From 1b9b1da46e4ebc891917ec3651794f6987ae3dfd Mon Sep 17 00:00:00 2001
From: Lee Page <lee.page@streamunlimited.com>
Date: Fri, 13 Mar 2015 11:54:56 +0100
Subject: [PATCH] ASoC: McASP: add support for DIT interfaces

Signed-off-by: Miroslav Rudisin <miero@seznam.cz>
Signed-off-by: Lee Page <lee.page@streamunlimited.com>
---
 sound/soc/davinci/davinci-mcasp.c | 71 ++++++++++++++++++++++++++++-----------
 1 file changed, 51 insertions(+), 20 deletions(-)

diff --git a/sound/soc/davinci/davinci-mcasp.c b/sound/soc/davinci/davinci-mcasp.c
index 58479c0..255c49b 100644
--- a/sound/soc/davinci/davinci-mcasp.c
+++ b/sound/soc/davinci/davinci-mcasp.c
@@ -417,6 +417,13 @@ static int davinci_set_dai_fmt(struct snd_soc_dai *cpu_dai,
 
 	dev_dbg(mcasp->dev, "davinci_set_dai_fmt(fmt %x, stream %d)\n", fmt, stream);
 
+	if ((fmt & SND_SOC_DAIFMT_FORMAT_MASK) == SND_SOC_DAIFMT_DIT) {
+		mcasp->op_mode = DAVINCI_MCASP_DIT_MODE;
+		return 0;
+	} else {
+		mcasp->op_mode = DAVINCI_MCASP_IIS_MODE;
+	}
+
 	pm_runtime_get_sync(mcasp->dev);
 	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
 	case SND_SOC_DAIFMT_DSP_A:
@@ -617,6 +624,10 @@ static int __davinci_mcasp_set_clkdiv(struct snd_soc_dai *dai, int div_id,
 		break;
 
 	case 1:		/* BCLK divider */
+		if (mcasp->op_mode == DAVINCI_MCASP_DIT_MODE)
+			div /= 2;
+		if (div < 1 || 32 < div)
+			return -EINVAL;
 		mcasp_mod_bits(mcasp, DAVINCI_MCASP_ACLKXCTL_REG,
 				   ACLKXDIV(div - 1), ACLKXDIV_MASK);
 		if (explicit)
@@ -699,6 +710,14 @@ static int davinci_config_channel_size(struct davinci_mcasp *mcasp,
 	 */
 	u32 rx_rotate = 0;
 
+	if (mcasp->op_mode == DAVINCI_MCASP_DIT_MODE) {
+		/* DIT requires data aligned to bits 23-0 */
+		tx_rotate = (tx_rotate + 2) & 0x7;
+		if (word_length > 24) {
+			mask &= 0xffffffUL << (word_length - 24);
+		}
+	}
+
 	/*
 	 * if s BCLK-to-LRCLK ratio has been configured via the set_clkdiv()
 	 * callback, take it into account here. That allows us to for example
@@ -734,22 +753,23 @@ static int davinci_config_channel_size(struct davinci_mcasp *mcasp,
 	/* mapping of the XSSZ bit-field as described in the datasheet */
 	fmt = (word_length >> 1) - 1;
 
-	if (mcasp->op_mode != DAVINCI_MCASP_DIT_MODE) {
-		if (stream == SNDRV_PCM_STREAM_PLAYBACK) {
-			mcasp_mod_bits(mcasp, DAVINCI_MCASP_TXFMT_REG, TXSSZ(fmt),
-					   TXSSZ(0x0F));
-			mcasp_mod_bits(mcasp, DAVINCI_MCASP_TXFMT_REG, TXROT(tx_rotate),
-					   TXROT(7));
-			mcasp_set_reg(mcasp, DAVINCI_MCASP_TXMASK_REG, mask);
-		} else {
-			mcasp_mod_bits(mcasp, DAVINCI_MCASP_RXFMT_REG, RXSSZ(fmt),
-					   RXSSZ(0x0F));
-			mcasp_mod_bits(mcasp, DAVINCI_MCASP_RXFMT_REG, RXROT(rx_rotate),
-					   RXROT(7));
-			mcasp_set_reg(mcasp, DAVINCI_MCASP_RXMASK_REG, mask);
-		}
+	if (mcasp->op_mode == DAVINCI_MCASP_DIT_MODE) {
+		/* DIT requires 32-bit slot size */
+		fmt = 0xf;
 	}
 
+	mcasp_mod_bits(mcasp, DAVINCI_MCASP_RXFMT_REG, RXSSZ(fmt),
+			   RXSSZ(0x0F));
+	mcasp_mod_bits(mcasp, DAVINCI_MCASP_TXFMT_REG, TXSSZ(fmt),
+			   TXSSZ(0x0F));
+	mcasp_mod_bits(mcasp, DAVINCI_MCASP_TXFMT_REG, TXROT(tx_rotate),
+			   TXROT(7));
+	mcasp_mod_bits(mcasp, DAVINCI_MCASP_RXFMT_REG, RXROT(rx_rotate),
+			   RXROT(7));
+	mcasp_set_reg(mcasp, DAVINCI_MCASP_RXMASK_REG, mask);
+
+	mcasp_set_reg(mcasp, DAVINCI_MCASP_TXMASK_REG, mask);
+
 	return 0;
 }
 
@@ -906,6 +926,9 @@ static int mcasp_i2s_hw_param(struct davinci_mcasp *mcasp, int stream,
 	mcasp_mod_bits(mcasp, DAVINCI_MCASP_RXFMCTL_REG,
 		       FSRMOD(total_slots), FSRMOD(0x1FF));
 
+	/* Disable the DIT */
+	mcasp_clr_bits(mcasp, DAVINCI_MCASP_TXDITCTL_REG, DITEN);
+
 	return 0;
 }
 
@@ -913,12 +936,14 @@ static int mcasp_i2s_hw_param(struct davinci_mcasp *mcasp, int stream,
 static int mcasp_dit_hw_param(struct davinci_mcasp *mcasp,
 			      unsigned int rate)
 {
+	u32 busel = 0;
 	u32 cs_value = 0;
 	u8 *cs_bytes = (u8*) &cs_value;
 
-	/* Set the TX format : 24 bit right rotation, 32 bit slot, Pad 0
-	   and LSB first */
-	mcasp_set_bits(mcasp, DAVINCI_MCASP_TXFMT_REG, TXROT(6) | TXSSZ(15));
+	if (!mcasp->dat_port)
+		busel = TXSEL;
+	mcasp_mod_bits(mcasp, DAVINCI_MCASP_TXFMT_REG, busel | FSXDLY(0),
+			TXSEL | TXORD | FSXDLY(3));
 
 	/* Set TX frame synch : DIT Mode, 1 bit width, internal, rising edge */
 	mcasp_set_reg(mcasp, DAVINCI_MCASP_TXFMCTL_REG, AFSXE | FSXMOD(0x180));
@@ -931,9 +956,6 @@ static int mcasp_dit_hw_param(struct davinci_mcasp *mcasp,
 
 	mcasp_clr_bits(mcasp, DAVINCI_MCASP_XEVTCTL_REG, TXDATADMADIS);
 
-	/* Only 44100 and 48000 are valid, both have the same setting */
-	mcasp_set_bits(mcasp, DAVINCI_MCASP_AHCLKXCTL_REG, AHCLKXDIV(3));
-
 	/* Enable the DIT */
 	mcasp_set_bits(mcasp, DAVINCI_MCASP_TXDITCTL_REG, DITEN);
 
@@ -1894,6 +1916,15 @@ static int davinci_mcasp_probe(struct platform_device *pdev)
 		goto err;
 	}
 
+	/* Defaults for DIT mode */
+
+	/* Set the TX format : 24 bit right rotation, 32 bit slot, Pad 0
+	   and LSB first */
+	mcasp_set_bits(mcasp, DAVINCI_MCASP_TXFMT_REG, TXROT(6) | TXSSZ(15));
+
+	/* Only 44100 and 48000 are valid, both have the same setting */
+	mcasp_set_bits(mcasp, DAVINCI_MCASP_AHCLKXCTL_REG, AHCLKXDIV(3));
+
 	return 0;
 
 err:
-- 
1.9.1

