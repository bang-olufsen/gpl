From d590589e21f85ba282d4decb5b8a18de302ae299 Mon Sep 17 00:00:00 2001
From: Xia Zhou <xia.zhou@streamunlimited.com>
Date: Wed, 13 Aug 2014 13:26:34 +0200
Subject: [PATCH] Use PlayerControllerInterface instead of PlayerController

Signed-off-by: Milan Plzik <milan.plzik@streamunlimited.com>

Conflicts:
	INSTALL
	src/librygel-renderer/rygel-player-controller.vala

Modified to match rygel-0.22.3:
	src/librygel-renderer/rygel-player-controller.vala
        src/librygel-renderer/rygel-player-controller-interface.vala

Signed-off-by: Xia Zhou <xia.zhou@streamunlimited.com>
---
 src/librygel-renderer/filelist.am                  |    1 +
 src/librygel-renderer/rygel-av-transport.c         |  311 +++---
 src/librygel-renderer/rygel-av-transport.vala      |    2 +-
 .../rygel-media-renderer-plugin.c                  |   85 +-
 .../rygel-media-renderer-plugin.vala               |    6 +-
 src/librygel-renderer/rygel-media-renderer.c       |   76 +-
 src/librygel-renderer/rygel-media-renderer.vala    |    6 +-
 .../rygel-player-controller-interface.c            |  294 ++++++
 .../rygel-player-controller-interface.vala         |   59 ++
 src/librygel-renderer/rygel-player-controller.c    | 1114 ++++++++------------
 src/librygel-renderer/rygel-player-controller.vala |   58 +-
 src/librygel-renderer/rygel-renderer.h             |  120 ++-
 12 files changed, 1202 insertions(+), 930 deletions(-)
 create mode 100644 src/librygel-renderer/rygel-player-controller-interface.c
 create mode 100644 src/librygel-renderer/rygel-player-controller-interface.vala

diff --git a/src/librygel-renderer/filelist.am b/src/librygel-renderer/filelist.am
index 8877acb..25ea56d 100644
--- a/src/librygel-renderer/filelist.am
+++ b/src/librygel-renderer/filelist.am
@@ -2,6 +2,7 @@ LIBRYGEL_RENDERER_VAPI_SOURCE_FILES = \
 	rygel-media-renderer-plugin.vala \
 	rygel-media-player.vala \
 	rygel-player-controller.vala \
+	rygel-player-controller-interface.vala \
 	rygel-media-renderer.vala
 
 LIBRYGEL_RENDERER_NONVAPI_SOURCE_FILES = \
diff --git a/src/librygel-renderer/rygel-av-transport.c b/src/librygel-renderer/rygel-av-transport.c
index 1151d8b..28d849c 100644
--- a/src/librygel-renderer/rygel-av-transport.c
+++ b/src/librygel-renderer/rygel-av-transport.c
@@ -37,10 +37,10 @@
 #include <string.h>
 #include <float.h>
 #include <math.h>
+#include <libgupnp-av/gupnp-av.h>
 #include <rygel-core.h>
 #include <glib/gi18n-lib.h>
 #include <gio/gio.h>
-#include <libgupnp-av/gupnp-av.h>
 
 
 #define RYGEL_TYPE_AV_TRANSPORT (rygel_av_transport_get_type ())
@@ -72,15 +72,13 @@ typedef struct _RygelChangeLogClass RygelChangeLogClass;
 typedef struct _RygelMediaPlayer RygelMediaPlayer;
 typedef struct _RygelMediaPlayerIface RygelMediaPlayerIface;
 
-#define RYGEL_TYPE_PLAYER_CONTROLLER (rygel_player_controller_get_type ())
-#define RYGEL_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerController))
-#define RYGEL_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
-#define RYGEL_IS_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER))
-#define RYGEL_IS_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), RYGEL_TYPE_PLAYER_CONTROLLER))
-#define RYGEL_PLAYER_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
+#define RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE (rygel_player_controller_interface_get_type ())
+#define RYGEL_PLAYER_CONTROLLER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, RygelPlayerControllerInterface))
+#define RYGEL_IS_PLAYER_CONTROLLER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE))
+#define RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, RygelPlayerControllerInterfaceIface))
 
-typedef struct _RygelPlayerController RygelPlayerController;
-typedef struct _RygelPlayerControllerClass RygelPlayerControllerClass;
+typedef struct _RygelPlayerControllerInterface RygelPlayerControllerInterface;
+typedef struct _RygelPlayerControllerInterfaceIface RygelPlayerControllerInterfaceIface;
 #define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
 #define _g_free0(var) (var = (g_free (var), NULL))
 
@@ -139,6 +137,35 @@ struct _RygelMediaPlayerIface {
 	gint64 (*get_byte_position) (RygelMediaPlayer* self);
 };
 
+struct _RygelPlayerControllerInterfaceIface {
+	GTypeInterface parent_iface;
+	gboolean (*next) (RygelPlayerControllerInterface* self);
+	gboolean (*previous) (RygelPlayerControllerInterface* self);
+	void (*set_single_play_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_playlist_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	void (*set_next_single_play_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_next_playlist_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	const gchar* (*get_playback_state) (RygelPlayerControllerInterface* self);
+	void (*set_playback_state) (RygelPlayerControllerInterface* self, const gchar* value);
+	guint (*get_n_tracks) (RygelPlayerControllerInterface* self);
+	void (*set_n_tracks) (RygelPlayerControllerInterface* self, guint value);
+	guint (*get_track) (RygelPlayerControllerInterface* self);
+	void (*set_track) (RygelPlayerControllerInterface* self, guint value);
+	const gchar* (*get_uri) (RygelPlayerControllerInterface* self);
+	void (*set_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_track_uri) (RygelPlayerControllerInterface* self);
+	void (*set_track_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_track_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_track_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_next_uri) (RygelPlayerControllerInterface* self);
+	void (*set_next_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_next_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_next_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_current_transport_actions) (RygelPlayerControllerInterface* self);
+};
+
 struct _RygelAVTransportPrivate {
 	SoupSession* session;
 	gchar* protocol_info;
@@ -146,7 +173,7 @@ struct _RygelAVTransportPrivate {
 	gchar* _mode;
 	RygelChangeLog* changelog;
 	RygelMediaPlayer* player;
-	RygelPlayerController* controller;
+	RygelPlayerControllerInterface* controller;
 	gboolean head_faked;
 };
 
@@ -198,11 +225,11 @@ struct _RygelAvTransportHandlePlaylistData {
 	const gchar* _tmp23_;
 	const gchar* _tmp24_;
 	GQuark _tmp26_;
-	RygelPlayerController* _tmp27_;
+	RygelPlayerControllerInterface* _tmp27_;
 	const gchar* _tmp28_;
 	const gchar* _tmp29_;
 	GUPnPMediaCollection* _tmp30_;
-	RygelPlayerController* _tmp31_;
+	RygelPlayerControllerInterface* _tmp31_;
 	const gchar* _tmp32_;
 	const gchar* _tmp33_;
 	GUPnPMediaCollection* _tmp34_;
@@ -223,7 +250,7 @@ static gpointer rygel_av_transport_parent_class = NULL;
 GType rygel_av_transport_get_type (void) G_GNUC_CONST;
 GType rygel_change_log_get_type (void) G_GNUC_CONST;
 GType rygel_media_player_get_type (void) G_GNUC_CONST;
-GType rygel_player_controller_get_type (void) G_GNUC_CONST;
+GType rygel_player_controller_interface_get_type (void) G_GNUC_CONST;
 #define RYGEL_AV_TRANSPORT_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), RYGEL_TYPE_AV_TRANSPORT, RygelAVTransportPrivate))
 enum  {
 	RYGEL_AV_TRANSPORT_DUMMY_PROPERTY,
@@ -242,7 +269,7 @@ GType rygel_media_renderer_plugin_get_type (void) G_GNUC_CONST;
 RygelChangeLog* rygel_change_log_new (GUPnPService* service, const gchar* service_ns);
 RygelChangeLog* rygel_change_log_construct (GType object_type, GUPnPService* service, const gchar* service_ns);
 static RygelMediaPlayer* rygel_av_transport_get_player (RygelAVTransport* self);
-RygelPlayerController* rygel_media_renderer_plugin_get_controller (RygelMediaRendererPlugin* self);
+RygelPlayerControllerInterface* rygel_media_renderer_plugin_get_controller (RygelMediaRendererPlugin* self);
 static void rygel_av_transport_query_last_change_cb (RygelAVTransport* self, GUPnPService* service, const gchar* variable, GValue* value);
 static void _rygel_av_transport_query_last_change_cb_gupnp_service_query_variable (GUPnPService* _sender, const gchar* variable, GValue* value, gpointer self);
 static void rygel_av_transport_set_av_transport_uri_cb (RygelAVTransport* self, GUPnPService* service, GUPnPServiceAction* action);
@@ -300,21 +327,21 @@ static void _rygel_av_transport_notify_duration_cb_g_object_notify (GObject* _se
 gchar* rygel_media_renderer_plugin_get_protocol_info (RygelMediaRendererPlugin* self);
 RygelMediaPlayer* rygel_media_renderer_plugin_get_player (RygelMediaRendererPlugin* self);
 void rygel_change_log_log (RygelChangeLog* self, const gchar* variable, const gchar* value);
-const gchar* rygel_player_controller_get_playback_state (RygelPlayerController* self);
-gchar* rygel_player_controller_get_current_transport_actions (RygelPlayerController* self);
+const gchar* rygel_player_controller_interface_get_playback_state (RygelPlayerControllerInterface* self);
+gchar* rygel_player_controller_interface_get_current_transport_actions (RygelPlayerControllerInterface* self);
 const gchar* rygel_av_transport_get_status (RygelAVTransport* self);
 const gchar* rygel_av_transport_get_playback_medium (RygelAVTransport* self);
 const gchar* rygel_av_transport_get_mode (RygelAVTransport* self);
 gchar* rygel_media_player_get_playback_speed (RygelMediaPlayer* self);
-guint rygel_player_controller_get_n_tracks (RygelPlayerController* self);
-guint rygel_player_controller_get_track (RygelPlayerController* self);
+guint rygel_player_controller_interface_get_n_tracks (RygelPlayerControllerInterface* self);
+guint rygel_player_controller_interface_get_track (RygelPlayerControllerInterface* self);
 gchar* rygel_media_player_get_duration_as_str (RygelMediaPlayer* self);
-const gchar* rygel_player_controller_get_uri (RygelPlayerController* self);
-const gchar* rygel_player_controller_get_metadata (RygelPlayerController* self);
-gchar* rygel_player_controller_get_track_uri (RygelPlayerController* self);
-gchar* rygel_player_controller_get_track_metadata (RygelPlayerController* self);
-const gchar* rygel_player_controller_get_next_uri (RygelPlayerController* self);
-const gchar* rygel_player_controller_get_next_metadata (RygelPlayerController* self);
+const gchar* rygel_player_controller_interface_get_uri (RygelPlayerControllerInterface* self);
+const gchar* rygel_player_controller_interface_get_metadata (RygelPlayerControllerInterface* self);
+gchar* rygel_player_controller_interface_get_track_uri (RygelPlayerControllerInterface* self);
+gchar* rygel_player_controller_interface_get_track_metadata (RygelPlayerControllerInterface* self);
+const gchar* rygel_player_controller_interface_get_next_uri (RygelPlayerControllerInterface* self);
+const gchar* rygel_player_controller_interface_get_next_metadata (RygelPlayerControllerInterface* self);
 gchar* rygel_change_log_finish (RygelChangeLog* self);
 static gboolean rygel_av_transport_check_instance_id (RygelAVTransport* self, GUPnPServiceAction* action);
 static void rygel_av_transport_handle_new_transport_uri (RygelAVTransport* self, GUPnPServiceAction* action, const gchar* uri, const gchar* metadata);
@@ -323,7 +350,7 @@ gchar** rygel_media_player_get_mime_types (RygelMediaPlayer* self, int* result_l
 static gboolean _vala_string_array_contains (gchar** stack, int stack_length, gchar* needle);
 gchar* rygel_media_player_get_position_as_str (RygelMediaPlayer* self);
 gint64 rygel_media_player_get_byte_position (RygelMediaPlayer* self);
-void rygel_player_controller_set_playback_state (RygelPlayerController* self, const gchar* value);
+void rygel_player_controller_interface_set_playback_state (RygelPlayerControllerInterface* self, const gchar* value);
 gchar** rygel_media_player_get_allowed_playback_speeds (RygelMediaPlayer* self, int* result_length1);
 void rygel_media_player_set_playback_speed (RygelMediaPlayer* self, const gchar* value);
 gint64 rygel_time_utils_time_from_string (const gchar* str);
@@ -331,9 +358,9 @@ gboolean rygel_media_player_get_can_seek (RygelMediaPlayer* self);
 gboolean rygel_media_player_seek (RygelMediaPlayer* self, gint64 time);
 gboolean rygel_media_player_get_can_seek_bytes (RygelMediaPlayer* self);
 gboolean rygel_media_player_seek_bytes (RygelMediaPlayer* self, gint64 bytes);
-void rygel_player_controller_set_track (RygelPlayerController* self, guint value);
-gboolean rygel_player_controller_next (RygelPlayerController* self);
-gboolean rygel_player_controller_previous (RygelPlayerController* self);
+void rygel_player_controller_interface_set_track (RygelPlayerControllerInterface* self, guint value);
+gboolean rygel_player_controller_interface_next (RygelPlayerControllerInterface* self);
+gboolean rygel_player_controller_interface_previous (RygelPlayerControllerInterface* self);
 gint64 rygel_media_player_get_size (RygelMediaPlayer* self);
 static void _vala_GUPnPServiceAction_free (GUPnPServiceAction* self);
 static void rygel_av_transport_handle_playlist_data_free (gpointer _data);
@@ -347,8 +374,8 @@ static void __lambda8_ (Block2Data* _data2_);
 static void ___lambda8__soup_session_callback (SoupSession* session, SoupMessage* msg, gpointer self);
 static void _g_object_unref0_ (gpointer var);
 static void _g_list_free__g_object_unref0_ (GList* self);
-void rygel_player_controller_set_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
-void rygel_player_controller_set_next_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+void rygel_player_controller_interface_set_playlist_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+void rygel_player_controller_interface_set_next_playlist_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
 static gboolean rygel_av_transport_is_playlist (RygelAVTransport* self, const gchar* mime, const gchar* features);
 static void rygel_av_transport_check_resource (RygelAVTransport* self, SoupMessage* msg, const gchar* _uri, const gchar* _metadata, GUPnPServiceAction* action);
 static void ___lambda7_ (RygelAVTransport* self, SoupMessage* msg);
@@ -358,8 +385,8 @@ static Block3Data* block3_data_ref (Block3Data* _data3_);
 static void block3_data_unref (void * _userdata_);
 static void ___lambda6_ (Block3Data* _data3_, SoupMessage* msg);
 static void ____lambda6__soup_message_finished (SoupMessage* _sender, gpointer self);
-void rygel_player_controller_set_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
-void rygel_player_controller_set_next_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+void rygel_player_controller_interface_set_single_play_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+void rygel_player_controller_interface_set_next_single_play_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
 RygelAVTransport* rygel_av_transport_new (void);
 RygelAVTransport* rygel_av_transport_construct (GType object_type);
 void rygel_av_transport_set_status (RygelAVTransport* self, const gchar* value);
@@ -525,16 +552,16 @@ static void rygel_av_transport_real_constructed (GObject* base) {
 	RygelMediaRendererPlugin* _tmp6_ = NULL;
 	RygelChangeLog* _tmp7_ = NULL;
 	RygelMediaPlayer* _tmp8_ = NULL;
-	RygelPlayerController* _tmp9_ = NULL;
-	RygelPlayerController* _tmp10_ = NULL;
-	RygelPlayerController* _tmp11_ = NULL;
-	RygelPlayerController* _tmp12_ = NULL;
-	RygelPlayerController* _tmp13_ = NULL;
-	RygelPlayerController* _tmp14_ = NULL;
-	RygelPlayerController* _tmp15_ = NULL;
-	RygelPlayerController* _tmp16_ = NULL;
-	RygelPlayerController* _tmp17_ = NULL;
-	RygelPlayerController* _tmp18_ = NULL;
+	RygelPlayerControllerInterface* _tmp9_ = NULL;
+	RygelPlayerControllerInterface* _tmp10_ = NULL;
+	RygelPlayerControllerInterface* _tmp11_ = NULL;
+	RygelPlayerControllerInterface* _tmp12_ = NULL;
+	RygelPlayerControllerInterface* _tmp13_ = NULL;
+	RygelPlayerControllerInterface* _tmp14_ = NULL;
+	RygelPlayerControllerInterface* _tmp15_ = NULL;
+	RygelPlayerControllerInterface* _tmp16_ = NULL;
+	RygelPlayerControllerInterface* _tmp17_ = NULL;
+	RygelPlayerControllerInterface* _tmp18_ = NULL;
 	RygelMediaPlayer* _tmp19_ = NULL;
 	SoupSession* _tmp20_ = NULL;
 	gchar* _tmp21_ = NULL;
@@ -636,10 +663,10 @@ static RygelMediaPlayer* rygel_av_transport_get_player (RygelAVTransport* self)
 static void rygel_av_transport_query_last_change_cb (RygelAVTransport* self, GUPnPService* service, const gchar* variable, GValue* value) {
 	RygelChangeLog* log = NULL;
 	RygelChangeLog* _tmp0_ = NULL;
-	RygelPlayerController* _tmp1_ = NULL;
+	RygelPlayerControllerInterface* _tmp1_ = NULL;
 	const gchar* _tmp2_ = NULL;
 	const gchar* _tmp3_ = NULL;
-	RygelPlayerController* _tmp4_ = NULL;
+	RygelPlayerControllerInterface* _tmp4_ = NULL;
 	gchar* _tmp5_ = NULL;
 	gchar* _tmp6_ = NULL;
 	gchar* _tmp7_ = NULL;
@@ -653,12 +680,12 @@ static void rygel_av_transport_query_last_change_cb (RygelAVTransport* self, GUP
 	gchar* _tmp15_ = NULL;
 	gchar* _tmp16_ = NULL;
 	gchar* _tmp17_ = NULL;
-	RygelPlayerController* _tmp18_ = NULL;
+	RygelPlayerControllerInterface* _tmp18_ = NULL;
 	guint _tmp19_ = 0U;
 	guint _tmp20_ = 0U;
 	gchar* _tmp21_ = NULL;
 	gchar* _tmp22_ = NULL;
-	RygelPlayerController* _tmp23_ = NULL;
+	RygelPlayerControllerInterface* _tmp23_ = NULL;
 	guint _tmp24_ = 0U;
 	guint _tmp25_ = 0U;
 	gchar* _tmp26_ = NULL;
@@ -671,28 +698,28 @@ static void rygel_av_transport_query_last_change_cb (RygelAVTransport* self, GUP
 	gchar* _tmp33_ = NULL;
 	gchar* _tmp34_ = NULL;
 	gchar* _tmp35_ = NULL;
-	RygelPlayerController* _tmp36_ = NULL;
+	RygelPlayerControllerInterface* _tmp36_ = NULL;
 	const gchar* _tmp37_ = NULL;
 	const gchar* _tmp38_ = NULL;
-	RygelPlayerController* _tmp39_ = NULL;
+	RygelPlayerControllerInterface* _tmp39_ = NULL;
 	const gchar* _tmp40_ = NULL;
 	const gchar* _tmp41_ = NULL;
 	gchar* _tmp42_ = NULL;
 	gchar* _tmp43_ = NULL;
-	RygelPlayerController* _tmp44_ = NULL;
+	RygelPlayerControllerInterface* _tmp44_ = NULL;
 	gchar* _tmp45_ = NULL;
 	gchar* _tmp46_ = NULL;
 	gchar* _tmp47_ = NULL;
-	RygelPlayerController* _tmp48_ = NULL;
+	RygelPlayerControllerInterface* _tmp48_ = NULL;
 	gchar* _tmp49_ = NULL;
 	gchar* _tmp50_ = NULL;
 	gchar* _tmp51_ = NULL;
 	gchar* _tmp52_ = NULL;
 	gchar* _tmp53_ = NULL;
-	RygelPlayerController* _tmp54_ = NULL;
+	RygelPlayerControllerInterface* _tmp54_ = NULL;
 	const gchar* _tmp55_ = NULL;
 	const gchar* _tmp56_ = NULL;
-	RygelPlayerController* _tmp57_ = NULL;
+	RygelPlayerControllerInterface* _tmp57_ = NULL;
 	const gchar* _tmp58_ = NULL;
 	const gchar* _tmp59_ = NULL;
 	gchar* _tmp60_ = NULL;
@@ -706,11 +733,11 @@ static void rygel_av_transport_query_last_change_cb (RygelAVTransport* self, GUP
 	_tmp0_ = rygel_change_log_new (NULL, RYGEL_AV_TRANSPORT_LAST_CHANGE_NS);
 	log = _tmp0_;
 	_tmp1_ = self->priv->controller;
-	_tmp2_ = rygel_player_controller_get_playback_state (_tmp1_);
+	_tmp2_ = rygel_player_controller_interface_get_playback_state (_tmp1_);
 	_tmp3_ = _tmp2_;
 	rygel_change_log_log (log, "TransportState", _tmp3_);
 	_tmp4_ = self->priv->controller;
-	_tmp5_ = rygel_player_controller_get_current_transport_actions (_tmp4_);
+	_tmp5_ = rygel_player_controller_interface_get_current_transport_actions (_tmp4_);
 	_tmp6_ = _tmp5_;
 	_tmp7_ = _tmp6_;
 	rygel_change_log_log (log, "CurrentTransportActions", _tmp7_);
@@ -737,14 +764,14 @@ static void rygel_av_transport_query_last_change_cb (RygelAVTransport* self, GUP
 	rygel_change_log_log (log, "CurrentRecordQualityMode", "NOT_IMPLEMENTED");
 	rygel_change_log_log (log, "PossibleRecordQualityModes", "NOT_IMPLEMENTED");
 	_tmp18_ = self->priv->controller;
-	_tmp19_ = rygel_player_controller_get_n_tracks (_tmp18_);
+	_tmp19_ = rygel_player_controller_interface_get_n_tracks (_tmp18_);
 	_tmp20_ = _tmp19_;
 	_tmp21_ = g_strdup_printf ("%u", _tmp20_);
 	_tmp22_ = _tmp21_;
 	rygel_change_log_log (log, "NumberOfTracks", _tmp22_);
 	_g_free0 (_tmp22_);
 	_tmp23_ = self->priv->controller;
-	_tmp24_ = rygel_player_controller_get_track (_tmp23_);
+	_tmp24_ = rygel_player_controller_interface_get_track (_tmp23_);
 	_tmp25_ = _tmp24_;
 	_tmp26_ = g_strdup_printf ("%u", _tmp25_);
 	_tmp27_ = _tmp26_;
@@ -763,24 +790,24 @@ static void rygel_av_transport_query_last_change_cb (RygelAVTransport* self, GUP
 	rygel_change_log_log (log, "CurrentMediaDuration", _tmp35_);
 	_g_free0 (_tmp35_);
 	_tmp36_ = self->priv->controller;
-	_tmp37_ = rygel_player_controller_get_uri (_tmp36_);
+	_tmp37_ = rygel_player_controller_interface_get_uri (_tmp36_);
 	_tmp38_ = _tmp37_;
 	rygel_change_log_log (log, "AVTransportURI", _tmp38_);
 	_tmp39_ = self->priv->controller;
-	_tmp40_ = rygel_player_controller_get_metadata (_tmp39_);
+	_tmp40_ = rygel_player_controller_interface_get_metadata (_tmp39_);
 	_tmp41_ = _tmp40_;
 	_tmp42_ = g_markup_escape_text (_tmp41_, (gssize) (-1));
 	_tmp43_ = _tmp42_;
 	rygel_change_log_log (log, "AVTransportURIMetaData", _tmp43_);
 	_g_free0 (_tmp43_);
 	_tmp44_ = self->priv->controller;
-	_tmp45_ = rygel_player_controller_get_track_uri (_tmp44_);
+	_tmp45_ = rygel_player_controller_interface_get_track_uri (_tmp44_);
 	_tmp46_ = _tmp45_;
 	_tmp47_ = _tmp46_;
 	rygel_change_log_log (log, "CurrentTrackURI", _tmp47_);
 	_g_free0 (_tmp47_);
 	_tmp48_ = self->priv->controller;
-	_tmp49_ = rygel_player_controller_get_track_metadata (_tmp48_);
+	_tmp49_ = rygel_player_controller_interface_get_track_metadata (_tmp48_);
 	_tmp50_ = _tmp49_;
 	_tmp51_ = _tmp50_;
 	_tmp52_ = g_markup_escape_text (_tmp51_, (gssize) (-1));
@@ -789,11 +816,11 @@ static void rygel_av_transport_query_last_change_cb (RygelAVTransport* self, GUP
 	_g_free0 (_tmp53_);
 	_g_free0 (_tmp51_);
 	_tmp54_ = self->priv->controller;
-	_tmp55_ = rygel_player_controller_get_next_uri (_tmp54_);
+	_tmp55_ = rygel_player_controller_interface_get_next_uri (_tmp54_);
 	_tmp56_ = _tmp55_;
 	rygel_change_log_log (log, "NextAVTransportURI", _tmp56_);
 	_tmp57_ = self->priv->controller;
-	_tmp58_ = rygel_player_controller_get_next_metadata (_tmp57_);
+	_tmp58_ = rygel_player_controller_interface_get_next_metadata (_tmp57_);
 	_tmp59_ = _tmp58_;
 	_tmp60_ = g_markup_escape_text (_tmp59_, (gssize) (-1));
 	_tmp61_ = _tmp60_;
@@ -1086,24 +1113,24 @@ static void rygel_av_transport_get_media_info_cb (RygelAVTransport* self, GUPnPS
 	GUPnPServiceAction* _tmp0_ = NULL;
 	gboolean _tmp1_ = FALSE;
 	gchar* media_duration = NULL;
-	RygelPlayerController* _tmp2_ = NULL;
+	RygelPlayerControllerInterface* _tmp2_ = NULL;
 	guint _tmp3_ = 0U;
 	guint _tmp4_ = 0U;
 	GUPnPServiceAction* _tmp9_ = NULL;
-	RygelPlayerController* _tmp10_ = NULL;
+	RygelPlayerControllerInterface* _tmp10_ = NULL;
 	guint _tmp11_ = 0U;
 	guint _tmp12_ = 0U;
 	const gchar* _tmp13_ = NULL;
-	RygelPlayerController* _tmp14_ = NULL;
+	RygelPlayerControllerInterface* _tmp14_ = NULL;
 	const gchar* _tmp15_ = NULL;
 	const gchar* _tmp16_ = NULL;
-	RygelPlayerController* _tmp17_ = NULL;
+	RygelPlayerControllerInterface* _tmp17_ = NULL;
 	const gchar* _tmp18_ = NULL;
 	const gchar* _tmp19_ = NULL;
-	RygelPlayerController* _tmp20_ = NULL;
+	RygelPlayerControllerInterface* _tmp20_ = NULL;
 	const gchar* _tmp21_ = NULL;
 	const gchar* _tmp22_ = NULL;
-	RygelPlayerController* _tmp23_ = NULL;
+	RygelPlayerControllerInterface* _tmp23_ = NULL;
 	const gchar* _tmp24_ = NULL;
 	const gchar* _tmp25_ = NULL;
 	const gchar* _tmp26_ = NULL;
@@ -1118,7 +1145,7 @@ static void rygel_av_transport_get_media_info_cb (RygelAVTransport* self, GUPnPS
 		return;
 	}
 	_tmp2_ = self->priv->controller;
-	_tmp3_ = rygel_player_controller_get_n_tracks (_tmp2_);
+	_tmp3_ = rygel_player_controller_interface_get_n_tracks (_tmp2_);
 	_tmp4_ = _tmp3_;
 	if (_tmp4_ > ((guint) 1)) {
 		gchar* _tmp5_ = NULL;
@@ -1137,20 +1164,20 @@ static void rygel_av_transport_get_media_info_cb (RygelAVTransport* self, GUPnPS
 	}
 	_tmp9_ = action;
 	_tmp10_ = self->priv->controller;
-	_tmp11_ = rygel_player_controller_get_n_tracks (_tmp10_);
+	_tmp11_ = rygel_player_controller_interface_get_n_tracks (_tmp10_);
 	_tmp12_ = _tmp11_;
 	_tmp13_ = media_duration;
 	_tmp14_ = self->priv->controller;
-	_tmp15_ = rygel_player_controller_get_uri (_tmp14_);
+	_tmp15_ = rygel_player_controller_interface_get_uri (_tmp14_);
 	_tmp16_ = _tmp15_;
 	_tmp17_ = self->priv->controller;
-	_tmp18_ = rygel_player_controller_get_metadata (_tmp17_);
+	_tmp18_ = rygel_player_controller_interface_get_metadata (_tmp17_);
 	_tmp19_ = _tmp18_;
 	_tmp20_ = self->priv->controller;
-	_tmp21_ = rygel_player_controller_get_next_uri (_tmp20_);
+	_tmp21_ = rygel_player_controller_interface_get_next_uri (_tmp20_);
 	_tmp22_ = _tmp21_;
 	_tmp23_ = self->priv->controller;
-	_tmp24_ = rygel_player_controller_get_next_metadata (_tmp23_);
+	_tmp24_ = rygel_player_controller_interface_get_next_metadata (_tmp23_);
 	_tmp25_ = _tmp24_;
 	_tmp26_ = rygel_av_transport_get_playback_medium (self);
 	_tmp27_ = _tmp26_;
@@ -1165,24 +1192,24 @@ static void rygel_av_transport_get_media_info_ex_cb (RygelAVTransport* self, GUP
 	GUPnPServiceAction* _tmp0_ = NULL;
 	gboolean _tmp1_ = FALSE;
 	gchar* media_duration = NULL;
-	RygelPlayerController* _tmp2_ = NULL;
+	RygelPlayerControllerInterface* _tmp2_ = NULL;
 	guint _tmp3_ = 0U;
 	guint _tmp4_ = 0U;
 	GUPnPServiceAction* _tmp9_ = NULL;
-	RygelPlayerController* _tmp10_ = NULL;
+	RygelPlayerControllerInterface* _tmp10_ = NULL;
 	guint _tmp11_ = 0U;
 	guint _tmp12_ = 0U;
 	const gchar* _tmp13_ = NULL;
-	RygelPlayerController* _tmp14_ = NULL;
+	RygelPlayerControllerInterface* _tmp14_ = NULL;
 	const gchar* _tmp15_ = NULL;
 	const gchar* _tmp16_ = NULL;
-	RygelPlayerController* _tmp17_ = NULL;
+	RygelPlayerControllerInterface* _tmp17_ = NULL;
 	const gchar* _tmp18_ = NULL;
 	const gchar* _tmp19_ = NULL;
-	RygelPlayerController* _tmp20_ = NULL;
+	RygelPlayerControllerInterface* _tmp20_ = NULL;
 	const gchar* _tmp21_ = NULL;
 	const gchar* _tmp22_ = NULL;
-	RygelPlayerController* _tmp23_ = NULL;
+	RygelPlayerControllerInterface* _tmp23_ = NULL;
 	const gchar* _tmp24_ = NULL;
 	const gchar* _tmp25_ = NULL;
 	const gchar* _tmp26_ = NULL;
@@ -1197,7 +1224,7 @@ static void rygel_av_transport_get_media_info_ex_cb (RygelAVTransport* self, GUP
 		return;
 	}
 	_tmp2_ = self->priv->controller;
-	_tmp3_ = rygel_player_controller_get_n_tracks (_tmp2_);
+	_tmp3_ = rygel_player_controller_interface_get_n_tracks (_tmp2_);
 	_tmp4_ = _tmp3_;
 	if (_tmp4_ > ((guint) 1)) {
 		gchar* _tmp5_ = NULL;
@@ -1216,20 +1243,20 @@ static void rygel_av_transport_get_media_info_ex_cb (RygelAVTransport* self, GUP
 	}
 	_tmp9_ = action;
 	_tmp10_ = self->priv->controller;
-	_tmp11_ = rygel_player_controller_get_n_tracks (_tmp10_);
+	_tmp11_ = rygel_player_controller_interface_get_n_tracks (_tmp10_);
 	_tmp12_ = _tmp11_;
 	_tmp13_ = media_duration;
 	_tmp14_ = self->priv->controller;
-	_tmp15_ = rygel_player_controller_get_uri (_tmp14_);
+	_tmp15_ = rygel_player_controller_interface_get_uri (_tmp14_);
 	_tmp16_ = _tmp15_;
 	_tmp17_ = self->priv->controller;
-	_tmp18_ = rygel_player_controller_get_metadata (_tmp17_);
+	_tmp18_ = rygel_player_controller_interface_get_metadata (_tmp17_);
 	_tmp19_ = _tmp18_;
 	_tmp20_ = self->priv->controller;
-	_tmp21_ = rygel_player_controller_get_next_uri (_tmp20_);
+	_tmp21_ = rygel_player_controller_interface_get_next_uri (_tmp20_);
 	_tmp22_ = _tmp21_;
 	_tmp23_ = self->priv->controller;
-	_tmp24_ = rygel_player_controller_get_next_metadata (_tmp23_);
+	_tmp24_ = rygel_player_controller_interface_get_next_metadata (_tmp23_);
 	_tmp25_ = _tmp24_;
 	_tmp26_ = rygel_av_transport_get_playback_medium (self);
 	_tmp27_ = _tmp26_;
@@ -1244,7 +1271,7 @@ static void rygel_av_transport_get_transport_info_cb (RygelAVTransport* self, GU
 	GUPnPServiceAction* _tmp0_ = NULL;
 	gboolean _tmp1_ = FALSE;
 	GUPnPServiceAction* _tmp2_ = NULL;
-	RygelPlayerController* _tmp3_ = NULL;
+	RygelPlayerControllerInterface* _tmp3_ = NULL;
 	const gchar* _tmp4_ = NULL;
 	const gchar* _tmp5_ = NULL;
 	const gchar* _tmp6_ = NULL;
@@ -1264,7 +1291,7 @@ static void rygel_av_transport_get_transport_info_cb (RygelAVTransport* self, GU
 	}
 	_tmp2_ = action;
 	_tmp3_ = self->priv->controller;
-	_tmp4_ = rygel_player_controller_get_playback_state (_tmp3_);
+	_tmp4_ = rygel_player_controller_interface_get_playback_state (_tmp3_);
 	_tmp5_ = _tmp4_;
 	_tmp6_ = rygel_av_transport_get_status (self);
 	_tmp7_ = _tmp6_;
@@ -1283,7 +1310,7 @@ static void rygel_av_transport_get_transport_actions_cb (RygelAVTransport* self,
 	GUPnPServiceAction* _tmp0_ = NULL;
 	gboolean _tmp1_ = FALSE;
 	GUPnPServiceAction* _tmp2_ = NULL;
-	RygelPlayerController* _tmp3_ = NULL;
+	RygelPlayerControllerInterface* _tmp3_ = NULL;
 	gchar* _tmp4_ = NULL;
 	gchar* _tmp5_ = NULL;
 	gchar* _tmp6_ = NULL;
@@ -1298,7 +1325,7 @@ static void rygel_av_transport_get_transport_actions_cb (RygelAVTransport* self,
 	}
 	_tmp2_ = action;
 	_tmp3_ = self->priv->controller;
-	_tmp4_ = rygel_player_controller_get_current_transport_actions (_tmp3_);
+	_tmp4_ = rygel_player_controller_interface_get_current_transport_actions (_tmp3_);
 	_tmp5_ = _tmp4_;
 	_tmp6_ = _tmp5_;
 	gupnp_service_action_set (_tmp2_, "Actions", G_TYPE_STRING, _tmp6_, NULL);
@@ -1312,18 +1339,18 @@ static void rygel_av_transport_get_position_info_cb (RygelAVTransport* self, GUP
 	GUPnPServiceAction* _tmp0_ = NULL;
 	gboolean _tmp1_ = FALSE;
 	GUPnPServiceAction* _tmp2_ = NULL;
-	RygelPlayerController* _tmp3_ = NULL;
+	RygelPlayerControllerInterface* _tmp3_ = NULL;
 	guint _tmp4_ = 0U;
 	guint _tmp5_ = 0U;
 	RygelMediaPlayer* _tmp6_ = NULL;
 	gchar* _tmp7_ = NULL;
 	gchar* _tmp8_ = NULL;
 	gchar* _tmp9_ = NULL;
-	RygelPlayerController* _tmp10_ = NULL;
+	RygelPlayerControllerInterface* _tmp10_ = NULL;
 	gchar* _tmp11_ = NULL;
 	gchar* _tmp12_ = NULL;
 	gchar* _tmp13_ = NULL;
-	RygelPlayerController* _tmp14_ = NULL;
+	RygelPlayerControllerInterface* _tmp14_ = NULL;
 	gchar* _tmp15_ = NULL;
 	gchar* _tmp16_ = NULL;
 	gchar* _tmp17_ = NULL;
@@ -1352,18 +1379,18 @@ static void rygel_av_transport_get_position_info_cb (RygelAVTransport* self, GUP
 	}
 	_tmp2_ = action;
 	_tmp3_ = self->priv->controller;
-	_tmp4_ = rygel_player_controller_get_track (_tmp3_);
+	_tmp4_ = rygel_player_controller_interface_get_track (_tmp3_);
 	_tmp5_ = _tmp4_;
 	_tmp6_ = self->priv->player;
 	_tmp7_ = rygel_media_player_get_duration_as_str (_tmp6_);
 	_tmp8_ = _tmp7_;
 	_tmp9_ = _tmp8_;
 	_tmp10_ = self->priv->controller;
-	_tmp11_ = rygel_player_controller_get_track_metadata (_tmp10_);
+	_tmp11_ = rygel_player_controller_interface_get_track_metadata (_tmp10_);
 	_tmp12_ = _tmp11_;
 	_tmp13_ = _tmp12_;
 	_tmp14_ = self->priv->controller;
-	_tmp15_ = rygel_player_controller_get_track_uri (_tmp14_);
+	_tmp15_ = rygel_player_controller_interface_get_track_uri (_tmp14_);
 	_tmp16_ = _tmp15_;
 	_tmp17_ = _tmp16_;
 	_tmp18_ = self->priv->player;
@@ -1438,7 +1465,7 @@ static void rygel_av_transport_get_transport_settings_cb (RygelAVTransport* self
 static void rygel_av_transport_stop_cb (RygelAVTransport* self, GUPnPService* service, GUPnPServiceAction* action) {
 	GUPnPServiceAction* _tmp0_ = NULL;
 	gboolean _tmp1_ = FALSE;
-	RygelPlayerController* _tmp2_ = NULL;
+	RygelPlayerControllerInterface* _tmp2_ = NULL;
 	GUPnPServiceAction* _tmp3_ = NULL;
 	g_return_if_fail (self != NULL);
 	g_return_if_fail (service != NULL);
@@ -1449,7 +1476,7 @@ static void rygel_av_transport_stop_cb (RygelAVTransport* self, GUPnPService* se
 		return;
 	}
 	_tmp2_ = self->priv->controller;
-	rygel_player_controller_set_playback_state (_tmp2_, "STOPPED");
+	rygel_player_controller_interface_set_playback_state (_tmp2_, "STOPPED");
 	_tmp3_ = action;
 	gupnp_service_action_return (_tmp3_);
 }
@@ -1471,7 +1498,7 @@ static void rygel_av_transport_play_cb (RygelAVTransport* self, GUPnPService* se
 	gboolean _tmp8_ = FALSE;
 	RygelMediaPlayer* _tmp11_ = NULL;
 	const gchar* _tmp12_ = NULL;
-	RygelPlayerController* _tmp13_ = NULL;
+	RygelPlayerControllerInterface* _tmp13_ = NULL;
 	GUPnPServiceAction* _tmp14_ = NULL;
 	g_return_if_fail (self != NULL);
 	g_return_if_fail (service != NULL);
@@ -1505,7 +1532,7 @@ static void rygel_av_transport_play_cb (RygelAVTransport* self, GUPnPService* se
 	_tmp12_ = speed;
 	rygel_media_player_set_playback_speed (_tmp11_, _tmp12_);
 	_tmp13_ = self->priv->controller;
-	rygel_player_controller_set_playback_state (_tmp13_, "PLAYING");
+	rygel_player_controller_interface_set_playback_state (_tmp13_, "PLAYING");
 	_tmp14_ = action;
 	gupnp_service_action_return (_tmp14_);
 	_g_free0 (speed);
@@ -1515,10 +1542,10 @@ static void rygel_av_transport_play_cb (RygelAVTransport* self, GUPnPService* se
 static void rygel_av_transport_pause_cb (RygelAVTransport* self, GUPnPService* service, GUPnPServiceAction* action) {
 	GUPnPServiceAction* _tmp0_ = NULL;
 	gboolean _tmp1_ = FALSE;
-	RygelPlayerController* _tmp2_ = NULL;
+	RygelPlayerControllerInterface* _tmp2_ = NULL;
 	const gchar* _tmp3_ = NULL;
 	const gchar* _tmp4_ = NULL;
-	RygelPlayerController* _tmp7_ = NULL;
+	RygelPlayerControllerInterface* _tmp7_ = NULL;
 	GUPnPServiceAction* _tmp8_ = NULL;
 	g_return_if_fail (self != NULL);
 	g_return_if_fail (service != NULL);
@@ -1529,7 +1556,7 @@ static void rygel_av_transport_pause_cb (RygelAVTransport* self, GUPnPService* s
 		return;
 	}
 	_tmp2_ = self->priv->controller;
-	_tmp3_ = rygel_player_controller_get_playback_state (_tmp2_);
+	_tmp3_ = rygel_player_controller_interface_get_playback_state (_tmp2_);
 	_tmp4_ = _tmp3_;
 	if (g_strcmp0 (_tmp4_, "PLAYING") != 0) {
 		GUPnPServiceAction* _tmp5_ = NULL;
@@ -1540,7 +1567,7 @@ static void rygel_av_transport_pause_cb (RygelAVTransport* self, GUPnPService* s
 		return;
 	}
 	_tmp7_ = self->priv->controller;
-	rygel_player_controller_set_playback_state (_tmp7_, "PAUSED_PLAYBACK");
+	rygel_player_controller_interface_set_playback_state (_tmp7_, "PAUSED_PLAYBACK");
 	_tmp8_ = action;
 	gupnp_service_action_return (_tmp8_);
 }
@@ -1715,7 +1742,7 @@ static void rygel_av_transport_seek_cb (RygelAVTransport* self, GUPnPService* se
 				gint _tmp42_ = 0;
 				gboolean _tmp43_ = FALSE;
 				gint _tmp44_ = 0;
-				RygelPlayerController* _tmp51_ = NULL;
+				RygelPlayerControllerInterface* _tmp51_ = NULL;
 				gint _tmp52_ = 0;
 				GUPnPServiceAction* _tmp53_ = NULL;
 				_tmp40_ = target;
@@ -1728,12 +1755,12 @@ static void rygel_av_transport_seek_cb (RygelAVTransport* self, GUPnPService* se
 					_tmp43_ = TRUE;
 				} else {
 					gint _tmp45_ = 0;
-					RygelPlayerController* _tmp46_ = NULL;
+					RygelPlayerControllerInterface* _tmp46_ = NULL;
 					guint _tmp47_ = 0U;
 					guint _tmp48_ = 0U;
 					_tmp45_ = track;
 					_tmp46_ = self->priv->controller;
-					_tmp47_ = rygel_player_controller_get_n_tracks (_tmp46_);
+					_tmp47_ = rygel_player_controller_interface_get_n_tracks (_tmp46_);
 					_tmp48_ = _tmp47_;
 					_tmp43_ = ((guint) _tmp45_) > _tmp48_;
 				}
@@ -1749,7 +1776,7 @@ static void rygel_av_transport_seek_cb (RygelAVTransport* self, GUPnPService* se
 				}
 				_tmp51_ = self->priv->controller;
 				_tmp52_ = track;
-				rygel_player_controller_set_track (_tmp51_, (guint) _tmp52_);
+				rygel_player_controller_interface_set_track (_tmp51_, (guint) _tmp52_);
 				_tmp53_ = action;
 				gupnp_service_action_return (_tmp53_);
 				break;
@@ -1778,7 +1805,7 @@ static void rygel_av_transport_seek_cb (RygelAVTransport* self, GUPnPService* se
 static void rygel_av_transport_next_cb (RygelAVTransport* self, GUPnPService* service, GUPnPServiceAction* action) {
 	GUPnPServiceAction* _tmp0_ = NULL;
 	gboolean _tmp1_ = FALSE;
-	RygelPlayerController* _tmp2_ = NULL;
+	RygelPlayerControllerInterface* _tmp2_ = NULL;
 	gboolean _tmp3_ = FALSE;
 	g_return_if_fail (self != NULL);
 	g_return_if_fail (service != NULL);
@@ -1789,7 +1816,7 @@ static void rygel_av_transport_next_cb (RygelAVTransport* self, GUPnPService* se
 		return;
 	}
 	_tmp2_ = self->priv->controller;
-	_tmp3_ = rygel_player_controller_next (_tmp2_);
+	_tmp3_ = rygel_player_controller_interface_next (_tmp2_);
 	if (_tmp3_) {
 		GUPnPServiceAction* _tmp4_ = NULL;
 		_tmp4_ = action;
@@ -1807,7 +1834,7 @@ static void rygel_av_transport_next_cb (RygelAVTransport* self, GUPnPService* se
 static void rygel_av_transport_previous_cb (RygelAVTransport* self, GUPnPService* service, GUPnPServiceAction* action) {
 	GUPnPServiceAction* _tmp0_ = NULL;
 	gboolean _tmp1_ = FALSE;
-	RygelPlayerController* _tmp2_ = NULL;
+	RygelPlayerControllerInterface* _tmp2_ = NULL;
 	gboolean _tmp3_ = FALSE;
 	g_return_if_fail (self != NULL);
 	g_return_if_fail (service != NULL);
@@ -1818,7 +1845,7 @@ static void rygel_av_transport_previous_cb (RygelAVTransport* self, GUPnPService
 		return;
 	}
 	_tmp2_ = self->priv->controller;
-	_tmp3_ = rygel_player_controller_previous (_tmp2_);
+	_tmp3_ = rygel_player_controller_interface_previous (_tmp2_);
 	if (_tmp3_) {
 		GUPnPServiceAction* _tmp4_ = NULL;
 		_tmp4_ = action;
@@ -1836,7 +1863,7 @@ static void rygel_av_transport_previous_cb (RygelAVTransport* self, GUPnPService
 static void rygel_av_transport_x_dlna_get_byte_position_info_cb (RygelAVTransport* self, GUPnPService* service, GUPnPServiceAction* action) {
 	GUPnPServiceAction* _tmp0_ = NULL;
 	gboolean _tmp1_ = FALSE;
-	RygelPlayerController* _tmp2_ = NULL;
+	RygelPlayerControllerInterface* _tmp2_ = NULL;
 	const gchar* _tmp3_ = NULL;
 	const gchar* _tmp4_ = NULL;
 	GUPnPServiceAction* _tmp18_ = NULL;
@@ -1849,7 +1876,7 @@ static void rygel_av_transport_x_dlna_get_byte_position_info_cb (RygelAVTranspor
 		return;
 	}
 	_tmp2_ = self->priv->controller;
-	_tmp3_ = rygel_player_controller_get_uri (_tmp2_);
+	_tmp3_ = rygel_player_controller_interface_get_uri (_tmp2_);
 	_tmp4_ = _tmp3_;
 	if (g_strcmp0 (_tmp4_, "") == 0) {
 		GUPnPServiceAction* _tmp5_ = NULL;
@@ -1893,13 +1920,13 @@ static void rygel_av_transport_x_dlna_get_byte_position_info_cb (RygelAVTranspor
 
 static void rygel_av_transport_notify_state_cb (RygelAVTransport* self, GObject* controller, GParamSpec* p) {
 	gchar* state = NULL;
-	RygelPlayerController* _tmp0_ = NULL;
+	RygelPlayerControllerInterface* _tmp0_ = NULL;
 	const gchar* _tmp1_ = NULL;
 	const gchar* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
 	RygelChangeLog* _tmp4_ = NULL;
 	RygelChangeLog* _tmp5_ = NULL;
-	RygelPlayerController* _tmp6_ = NULL;
+	RygelPlayerControllerInterface* _tmp6_ = NULL;
 	gchar* _tmp7_ = NULL;
 	gchar* _tmp8_ = NULL;
 	gchar* _tmp9_ = NULL;
@@ -1907,7 +1934,7 @@ static void rygel_av_transport_notify_state_cb (RygelAVTransport* self, GObject*
 	g_return_if_fail (controller != NULL);
 	g_return_if_fail (p != NULL);
 	_tmp0_ = self->priv->controller;
-	_tmp1_ = rygel_player_controller_get_playback_state (_tmp0_);
+	_tmp1_ = rygel_player_controller_interface_get_playback_state (_tmp0_);
 	_tmp2_ = _tmp1_;
 	_tmp3_ = g_strdup (_tmp2_);
 	state = _tmp3_;
@@ -1915,7 +1942,7 @@ static void rygel_av_transport_notify_state_cb (RygelAVTransport* self, GObject*
 	rygel_change_log_log (_tmp4_, "TransportState", state);
 	_tmp5_ = self->priv->changelog;
 	_tmp6_ = self->priv->controller;
-	_tmp7_ = rygel_player_controller_get_current_transport_actions (_tmp6_);
+	_tmp7_ = rygel_player_controller_interface_get_current_transport_actions (_tmp6_);
 	_tmp8_ = _tmp7_;
 	_tmp9_ = _tmp8_;
 	rygel_change_log_log (_tmp5_, "CurrentTransportActions", _tmp9_);
@@ -1926,7 +1953,7 @@ static void rygel_av_transport_notify_state_cb (RygelAVTransport* self, GObject*
 
 static void rygel_av_transport_notify_n_tracks_cb (RygelAVTransport* self, GObject* controller, GParamSpec* p) {
 	RygelChangeLog* _tmp0_ = NULL;
-	RygelPlayerController* _tmp1_ = NULL;
+	RygelPlayerControllerInterface* _tmp1_ = NULL;
 	guint _tmp2_ = 0U;
 	guint _tmp3_ = 0U;
 	gchar* _tmp4_ = NULL;
@@ -1936,7 +1963,7 @@ static void rygel_av_transport_notify_n_tracks_cb (RygelAVTransport* self, GObje
 	g_return_if_fail (p != NULL);
 	_tmp0_ = self->priv->changelog;
 	_tmp1_ = self->priv->controller;
-	_tmp2_ = rygel_player_controller_get_n_tracks (_tmp1_);
+	_tmp2_ = rygel_player_controller_interface_get_n_tracks (_tmp1_);
 	_tmp3_ = _tmp2_;
 	_tmp4_ = g_strdup_printf ("%u", _tmp3_);
 	_tmp5_ = _tmp4_;
@@ -1947,7 +1974,7 @@ static void rygel_av_transport_notify_n_tracks_cb (RygelAVTransport* self, GObje
 
 static void rygel_av_transport_notify_track_cb (RygelAVTransport* self, GObject* controller, GParamSpec* p) {
 	RygelChangeLog* _tmp0_ = NULL;
-	RygelPlayerController* _tmp1_ = NULL;
+	RygelPlayerControllerInterface* _tmp1_ = NULL;
 	guint _tmp2_ = 0U;
 	guint _tmp3_ = 0U;
 	gchar* _tmp4_ = NULL;
@@ -1957,7 +1984,7 @@ static void rygel_av_transport_notify_track_cb (RygelAVTransport* self, GObject*
 	g_return_if_fail (p != NULL);
 	_tmp0_ = self->priv->changelog;
 	_tmp1_ = self->priv->controller;
-	_tmp2_ = rygel_player_controller_get_track (_tmp1_);
+	_tmp2_ = rygel_player_controller_interface_get_track (_tmp1_);
 	_tmp3_ = _tmp2_;
 	_tmp4_ = g_strdup_printf ("%u", _tmp3_);
 	_tmp5_ = _tmp4_;
@@ -1999,7 +2026,7 @@ static void rygel_av_transport_notify_duration_cb (RygelAVTransport* self, GObje
 
 static void rygel_av_transport_notify_uri_cb (RygelAVTransport* self, GObject* controller, GParamSpec* p) {
 	RygelChangeLog* _tmp0_ = NULL;
-	RygelPlayerController* _tmp1_ = NULL;
+	RygelPlayerControllerInterface* _tmp1_ = NULL;
 	const gchar* _tmp2_ = NULL;
 	const gchar* _tmp3_ = NULL;
 	g_return_if_fail (self != NULL);
@@ -2007,7 +2034,7 @@ static void rygel_av_transport_notify_uri_cb (RygelAVTransport* self, GObject* c
 	g_return_if_fail (p != NULL);
 	_tmp0_ = self->priv->changelog;
 	_tmp1_ = self->priv->controller;
-	_tmp2_ = rygel_player_controller_get_uri (_tmp1_);
+	_tmp2_ = rygel_player_controller_interface_get_uri (_tmp1_);
 	_tmp3_ = _tmp2_;
 	rygel_change_log_log (_tmp0_, "AVTransportURI", _tmp3_);
 }
@@ -2015,7 +2042,7 @@ static void rygel_av_transport_notify_uri_cb (RygelAVTransport* self, GObject* c
 
 static void rygel_av_transport_notify_meta_data_cb (RygelAVTransport* self, GObject* player, GParamSpec* p) {
 	RygelChangeLog* _tmp0_ = NULL;
-	RygelPlayerController* _tmp1_ = NULL;
+	RygelPlayerControllerInterface* _tmp1_ = NULL;
 	const gchar* _tmp2_ = NULL;
 	const gchar* _tmp3_ = NULL;
 	gchar* _tmp4_ = NULL;
@@ -2025,7 +2052,7 @@ static void rygel_av_transport_notify_meta_data_cb (RygelAVTransport* self, GObj
 	g_return_if_fail (p != NULL);
 	_tmp0_ = self->priv->changelog;
 	_tmp1_ = self->priv->controller;
-	_tmp2_ = rygel_player_controller_get_metadata (_tmp1_);
+	_tmp2_ = rygel_player_controller_interface_get_metadata (_tmp1_);
 	_tmp3_ = _tmp2_;
 	_tmp4_ = g_markup_escape_text (_tmp3_, (gssize) (-1));
 	_tmp5_ = _tmp4_;
@@ -2036,7 +2063,7 @@ static void rygel_av_transport_notify_meta_data_cb (RygelAVTransport* self, GObj
 
 static void rygel_av_transport_notify_track_uri_cb (RygelAVTransport* self, GObject* player, GParamSpec* p) {
 	RygelChangeLog* _tmp0_ = NULL;
-	RygelPlayerController* _tmp1_ = NULL;
+	RygelPlayerControllerInterface* _tmp1_ = NULL;
 	gchar* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
 	gchar* _tmp4_ = NULL;
@@ -2045,7 +2072,7 @@ static void rygel_av_transport_notify_track_uri_cb (RygelAVTransport* self, GObj
 	g_return_if_fail (p != NULL);
 	_tmp0_ = self->priv->changelog;
 	_tmp1_ = self->priv->controller;
-	_tmp2_ = rygel_player_controller_get_track_uri (_tmp1_);
+	_tmp2_ = rygel_player_controller_interface_get_track_uri (_tmp1_);
 	_tmp3_ = _tmp2_;
 	_tmp4_ = _tmp3_;
 	rygel_change_log_log (_tmp0_, "CurrentTrackURI", _tmp4_);
@@ -2055,7 +2082,7 @@ static void rygel_av_transport_notify_track_uri_cb (RygelAVTransport* self, GObj
 
 static void rygel_av_transport_notify_track_meta_data_cb (RygelAVTransport* self, GObject* player, GParamSpec* p) {
 	RygelChangeLog* _tmp0_ = NULL;
-	RygelPlayerController* _tmp1_ = NULL;
+	RygelPlayerControllerInterface* _tmp1_ = NULL;
 	gchar* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
 	gchar* _tmp4_ = NULL;
@@ -2066,7 +2093,7 @@ static void rygel_av_transport_notify_track_meta_data_cb (RygelAVTransport* self
 	g_return_if_fail (p != NULL);
 	_tmp0_ = self->priv->changelog;
 	_tmp1_ = self->priv->controller;
-	_tmp2_ = rygel_player_controller_get_track_metadata (_tmp1_);
+	_tmp2_ = rygel_player_controller_interface_get_track_metadata (_tmp1_);
 	_tmp3_ = _tmp2_;
 	_tmp4_ = _tmp3_;
 	_tmp5_ = g_markup_escape_text (_tmp4_, (gssize) (-1));
@@ -2079,7 +2106,7 @@ static void rygel_av_transport_notify_track_meta_data_cb (RygelAVTransport* self
 
 static void rygel_av_transport_notify_next_uri_cb (RygelAVTransport* self, GObject* controller, GParamSpec* p) {
 	RygelChangeLog* _tmp0_ = NULL;
-	RygelPlayerController* _tmp1_ = NULL;
+	RygelPlayerControllerInterface* _tmp1_ = NULL;
 	const gchar* _tmp2_ = NULL;
 	const gchar* _tmp3_ = NULL;
 	g_return_if_fail (self != NULL);
@@ -2087,7 +2114,7 @@ static void rygel_av_transport_notify_next_uri_cb (RygelAVTransport* self, GObje
 	g_return_if_fail (p != NULL);
 	_tmp0_ = self->priv->changelog;
 	_tmp1_ = self->priv->controller;
-	_tmp2_ = rygel_player_controller_get_next_uri (_tmp1_);
+	_tmp2_ = rygel_player_controller_interface_get_next_uri (_tmp1_);
 	_tmp3_ = _tmp2_;
 	rygel_change_log_log (_tmp0_, "NextAVTransportURI", _tmp3_);
 }
@@ -2095,7 +2122,7 @@ static void rygel_av_transport_notify_next_uri_cb (RygelAVTransport* self, GObje
 
 static void rygel_av_transport_notify_next_meta_data_cb (RygelAVTransport* self, GObject* player, GParamSpec* p) {
 	RygelChangeLog* _tmp0_ = NULL;
-	RygelPlayerController* _tmp1_ = NULL;
+	RygelPlayerControllerInterface* _tmp1_ = NULL;
 	const gchar* _tmp2_ = NULL;
 	const gchar* _tmp3_ = NULL;
 	gchar* _tmp4_ = NULL;
@@ -2105,7 +2132,7 @@ static void rygel_av_transport_notify_next_meta_data_cb (RygelAVTransport* self,
 	g_return_if_fail (p != NULL);
 	_tmp0_ = self->priv->changelog;
 	_tmp1_ = self->priv->controller;
-	_tmp2_ = rygel_player_controller_get_next_metadata (_tmp1_);
+	_tmp2_ = rygel_player_controller_interface_get_next_metadata (_tmp1_);
 	_tmp3_ = _tmp2_;
 	_tmp4_ = g_markup_escape_text (_tmp3_, (gssize) (-1));
 	_tmp5_ = _tmp4_;
@@ -2350,7 +2377,7 @@ static gboolean rygel_av_transport_handle_playlist_co (RygelAvTransportHandlePla
 				_data_->_tmp29_ = _data_->metadata;
 				_data_->_tmp30_ = NULL;
 				_data_->_tmp30_ = _data_->collection;
-				rygel_player_controller_set_playlist_uri (_data_->_tmp27_, _data_->_tmp28_, _data_->_tmp29_, _data_->_tmp30_);
+				rygel_player_controller_interface_set_playlist_uri (_data_->_tmp27_, _data_->_tmp28_, _data_->_tmp29_, _data_->_tmp30_);
 				break;
 			}
 		}
@@ -2366,7 +2393,7 @@ static gboolean rygel_av_transport_handle_playlist_co (RygelAvTransportHandlePla
 				_data_->_tmp33_ = _data_->metadata;
 				_data_->_tmp34_ = NULL;
 				_data_->_tmp34_ = _data_->collection;
-				rygel_player_controller_set_next_playlist_uri (_data_->_tmp31_, _data_->_tmp32_, _data_->_tmp33_, _data_->_tmp34_);
+				rygel_player_controller_interface_set_next_playlist_uri (_data_->_tmp31_, _data_->_tmp32_, _data_->_tmp33_, _data_->_tmp34_);
 				break;
 			}
 		}
@@ -2787,7 +2814,7 @@ static void rygel_av_transport_set_single_play_uri (RygelAVTransport* self, GUPn
 		switch (0) {
 			default:
 			{
-				RygelPlayerController* _tmp5_ = NULL;
+				RygelPlayerControllerInterface* _tmp5_ = NULL;
 				const gchar* _tmp6_ = NULL;
 				const gchar* _tmp7_ = NULL;
 				const gchar* _tmp8_ = NULL;
@@ -2797,7 +2824,7 @@ static void rygel_av_transport_set_single_play_uri (RygelAVTransport* self, GUPn
 				_tmp7_ = metadata;
 				_tmp8_ = mime;
 				_tmp9_ = features;
-				rygel_player_controller_set_single_play_uri (_tmp5_, _tmp6_, _tmp7_, _tmp8_, _tmp9_);
+				rygel_player_controller_interface_set_single_play_uri (_tmp5_, _tmp6_, _tmp7_, _tmp8_, _tmp9_);
 				break;
 			}
 		}
@@ -2805,7 +2832,7 @@ static void rygel_av_transport_set_single_play_uri (RygelAVTransport* self, GUPn
 		switch (0) {
 			default:
 			{
-				RygelPlayerController* _tmp10_ = NULL;
+				RygelPlayerControllerInterface* _tmp10_ = NULL;
 				const gchar* _tmp11_ = NULL;
 				const gchar* _tmp12_ = NULL;
 				const gchar* _tmp13_ = NULL;
@@ -2815,7 +2842,7 @@ static void rygel_av_transport_set_single_play_uri (RygelAVTransport* self, GUPn
 				_tmp12_ = metadata;
 				_tmp13_ = mime;
 				_tmp14_ = features;
-				rygel_player_controller_set_next_single_play_uri (_tmp10_, _tmp11_, _tmp12_, _tmp13_, _tmp14_);
+				rygel_player_controller_interface_set_next_single_play_uri (_tmp10_, _tmp11_, _tmp12_, _tmp13_, _tmp14_);
 				break;
 			}
 		}
@@ -2873,12 +2900,12 @@ void rygel_av_transport_set_status (RygelAVTransport* self, const gchar* value)
 
 const gchar* rygel_av_transport_get_playback_medium (RygelAVTransport* self) {
 	const gchar* result;
-	RygelPlayerController* _tmp0_ = NULL;
+	RygelPlayerControllerInterface* _tmp0_ = NULL;
 	const gchar* _tmp1_ = NULL;
 	const gchar* _tmp2_ = NULL;
 	g_return_val_if_fail (self != NULL, NULL);
 	_tmp0_ = self->priv->controller;
-	_tmp1_ = rygel_player_controller_get_uri (_tmp0_);
+	_tmp1_ = rygel_player_controller_interface_get_uri (_tmp0_);
 	_tmp2_ = _tmp1_;
 	if (g_strcmp0 (_tmp2_, "") == 0) {
 		result = "NONE";
diff --git a/src/librygel-renderer/rygel-av-transport.vala b/src/librygel-renderer/rygel-av-transport.vala
index 852b26a..3fe9994 100644
--- a/src/librygel-renderer/rygel-av-transport.vala
+++ b/src/librygel-renderer/rygel-av-transport.vala
@@ -92,7 +92,7 @@ internal class Rygel.AVTransport : Service {
 
     private ChangeLog changelog;
     private MediaPlayer player;
-    private PlayerController controller;
+    private PlayerControllerInterface controller;
 
     public override void constructed () {
         base.constructed ();
diff --git a/src/librygel-renderer/rygel-media-renderer-plugin.c b/src/librygel-renderer/rygel-media-renderer-plugin.c
index 8adf2e7..557060a 100644
--- a/src/librygel-renderer/rygel-media-renderer-plugin.c
+++ b/src/librygel-renderer/rygel-media-renderer-plugin.c
@@ -32,6 +32,7 @@
 #include <string.h>
 #include <float.h>
 #include <math.h>
+#include <libgupnp-av/gupnp-av.h>
 #include <config.h>
 #include <libgupnp/gupnp.h>
 
@@ -55,15 +56,13 @@ typedef struct _RygelMediaRendererPluginPrivate RygelMediaRendererPluginPrivate;
 typedef struct _RygelMediaPlayer RygelMediaPlayer;
 typedef struct _RygelMediaPlayerIface RygelMediaPlayerIface;
 
-#define RYGEL_TYPE_PLAYER_CONTROLLER (rygel_player_controller_get_type ())
-#define RYGEL_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerController))
-#define RYGEL_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
-#define RYGEL_IS_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER))
-#define RYGEL_IS_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), RYGEL_TYPE_PLAYER_CONTROLLER))
-#define RYGEL_PLAYER_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
+#define RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE (rygel_player_controller_interface_get_type ())
+#define RYGEL_PLAYER_CONTROLLER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, RygelPlayerControllerInterface))
+#define RYGEL_IS_PLAYER_CONTROLLER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE))
+#define RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, RygelPlayerControllerInterfaceIface))
 
-typedef struct _RygelPlayerController RygelPlayerController;
-typedef struct _RygelPlayerControllerClass RygelPlayerControllerClass;
+typedef struct _RygelPlayerControllerInterface RygelPlayerControllerInterface;
+typedef struct _RygelPlayerControllerInterfaceIface RygelPlayerControllerInterfaceIface;
 #define _g_free0(var) (var = (g_free (var), NULL))
 #define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
 #define __g_list_free__rygel_dlna_profile_unref0_0(var) ((var == NULL) ? NULL : (var = (_g_list_free__rygel_dlna_profile_unref0_ (var), NULL)))
@@ -99,6 +98,16 @@ typedef struct _RygelAVTransportClass RygelAVTransportClass;
 typedef struct _RygelRenderingControl RygelRenderingControl;
 typedef struct _RygelRenderingControlClass RygelRenderingControlClass;
 
+#define RYGEL_TYPE_PLAYER_CONTROLLER (rygel_player_controller_get_type ())
+#define RYGEL_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerController))
+#define RYGEL_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
+#define RYGEL_IS_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER))
+#define RYGEL_IS_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), RYGEL_TYPE_PLAYER_CONTROLLER))
+#define RYGEL_PLAYER_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
+
+typedef struct _RygelPlayerController RygelPlayerController;
+typedef struct _RygelPlayerControllerClass RygelPlayerControllerClass;
+
 struct _RygelMediaPlayerIface {
 	GTypeInterface parent_iface;
 	gboolean (*seek) (RygelMediaPlayer* self, gint64 time);
@@ -138,9 +147,38 @@ struct _RygelMediaRendererPluginClass {
 	RygelMediaPlayer* (*get_player) (RygelMediaRendererPlugin* self);
 };
 
+struct _RygelPlayerControllerInterfaceIface {
+	GTypeInterface parent_iface;
+	gboolean (*next) (RygelPlayerControllerInterface* self);
+	gboolean (*previous) (RygelPlayerControllerInterface* self);
+	void (*set_single_play_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_playlist_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	void (*set_next_single_play_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_next_playlist_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	const gchar* (*get_playback_state) (RygelPlayerControllerInterface* self);
+	void (*set_playback_state) (RygelPlayerControllerInterface* self, const gchar* value);
+	guint (*get_n_tracks) (RygelPlayerControllerInterface* self);
+	void (*set_n_tracks) (RygelPlayerControllerInterface* self, guint value);
+	guint (*get_track) (RygelPlayerControllerInterface* self);
+	void (*set_track) (RygelPlayerControllerInterface* self, guint value);
+	const gchar* (*get_uri) (RygelPlayerControllerInterface* self);
+	void (*set_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_track_uri) (RygelPlayerControllerInterface* self);
+	void (*set_track_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_track_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_track_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_next_uri) (RygelPlayerControllerInterface* self);
+	void (*set_next_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_next_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_next_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_current_transport_actions) (RygelPlayerControllerInterface* self);
+};
+
 struct _RygelMediaRendererPluginPrivate {
 	gchar* sink_protocol_info;
-	RygelPlayerController* controller;
+	RygelPlayerControllerInterface* controller;
 	GList* _supported_profiles;
 };
 
@@ -149,7 +187,7 @@ static gpointer rygel_media_renderer_plugin_parent_class = NULL;
 
 GType rygel_media_renderer_plugin_get_type (void) G_GNUC_CONST;
 GType rygel_media_player_get_type (void) G_GNUC_CONST;
-GType rygel_player_controller_get_type (void) G_GNUC_CONST;
+GType rygel_player_controller_interface_get_type (void) G_GNUC_CONST;
 #define RYGEL_MEDIA_RENDERER_PLUGIN_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), RYGEL_TYPE_MEDIA_RENDERER_PLUGIN, RygelMediaRendererPluginPrivate))
 enum  {
 	RYGEL_MEDIA_RENDERER_PLUGIN_DUMMY_PROPERTY,
@@ -159,8 +197,8 @@ static void _rygel_dlna_profile_unref0_ (gpointer var);
 static void _g_list_free__rygel_dlna_profile_unref0_ (GList* self);
 #define RYGEL_MEDIA_RENDERER_PLUGIN_MEDIA_RENDERER_DESC_PATH DATA_DIR "/xml/MediaRenderer2.xml"
 #define RYGEL_MEDIA_RENDERER_PLUGIN_DMR "urn:schemas-upnp-org:device:MediaRenderer"
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller);
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller);
 static void rygel_media_renderer_plugin_real_constructed (GObject* base);
 GType rygel_sink_connection_manager_get_type (void) G_GNUC_CONST;
 #define RYGEL_AV_TRANSPORT_UPNP_ID "urn:upnp-org:serviceId:AVTransport"
@@ -173,10 +211,11 @@ GType rygel_av_transport_get_type (void) G_GNUC_CONST;
 GType rygel_rendering_control_get_type (void) G_GNUC_CONST;
 RygelMediaPlayer* rygel_media_renderer_plugin_get_player (RygelMediaRendererPlugin* self);
 static RygelMediaPlayer* rygel_media_renderer_plugin_real_get_player (RygelMediaRendererPlugin* self);
-RygelPlayerController* rygel_media_renderer_plugin_get_controller (RygelMediaRendererPlugin* self);
+RygelPlayerControllerInterface* rygel_media_renderer_plugin_get_controller (RygelMediaRendererPlugin* self);
 gchar* rygel_media_renderer_plugin_get_protocol_info (RygelMediaRendererPlugin* self);
 RygelPlayerController* rygel_player_controller_new (RygelMediaPlayer* player, const gchar* protocol_info);
 RygelPlayerController* rygel_player_controller_construct (GType object_type, RygelMediaPlayer* player, const gchar* protocol_info);
+GType rygel_player_controller_get_type (void) G_GNUC_CONST;
 static void rygel_media_renderer_plugin_real_apply_hacks (RygelPlugin* base, RygelRootDevice* device, const gchar* description_path, GError** error);
 gchar** rygel_media_player_get_protocols (RygelMediaPlayer* self, int* result_length1);
 GList* rygel_media_renderer_plugin_get_supported_profiles (RygelMediaRendererPlugin* self);
@@ -212,14 +251,14 @@ static gpointer _g_object_ref0 (gpointer self) {
 }
 
 
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller) {
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller) {
 	RygelMediaRendererPlugin * self = NULL;
 	const gchar* _tmp0_ = NULL;
 	const gchar* _tmp1_ = NULL;
 	const gchar* _tmp2_ = NULL;
 	RygelPluginCapabilities _tmp3_ = 0;
-	RygelPlayerController* _tmp4_ = NULL;
-	RygelPlayerController* _tmp5_ = NULL;
+	RygelPlayerControllerInterface* _tmp4_ = NULL;
+	RygelPlayerControllerInterface* _tmp5_ = NULL;
 	g_return_val_if_fail (name != NULL, NULL);
 	_tmp0_ = name;
 	_tmp1_ = title;
@@ -234,7 +273,7 @@ RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_ty
 }
 
 
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller) {
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller) {
 	return rygel_media_renderer_plugin_construct (RYGEL_TYPE_MEDIA_RENDERER_PLUGIN, name, title, description, capabilities, controller);
 }
 
@@ -281,11 +320,11 @@ RygelMediaPlayer* rygel_media_renderer_plugin_get_player (RygelMediaRendererPlug
 }
 
 
-RygelPlayerController* rygel_media_renderer_plugin_get_controller (RygelMediaRendererPlugin* self) {
-	RygelPlayerController* result = NULL;
-	RygelPlayerController* _tmp0_ = NULL;
-	RygelPlayerController* _tmp6_ = NULL;
-	RygelPlayerController* _tmp7_ = NULL;
+RygelPlayerControllerInterface* rygel_media_renderer_plugin_get_controller (RygelMediaRendererPlugin* self) {
+	RygelPlayerControllerInterface* result = NULL;
+	RygelPlayerControllerInterface* _tmp0_ = NULL;
+	RygelPlayerControllerInterface* _tmp6_ = NULL;
+	RygelPlayerControllerInterface* _tmp7_ = NULL;
 	g_return_val_if_fail (self != NULL, NULL);
 	_tmp0_ = self->priv->controller;
 	if (_tmp0_ == NULL) {
@@ -300,7 +339,7 @@ RygelPlayerController* rygel_media_renderer_plugin_get_controller (RygelMediaRen
 		_tmp4_ = _tmp3_;
 		_tmp5_ = rygel_player_controller_new (_tmp2_, _tmp4_);
 		_g_object_unref0 (self->priv->controller);
-		self->priv->controller = _tmp5_;
+		self->priv->controller = (RygelPlayerControllerInterface*) _tmp5_;
 		_g_free0 (_tmp4_);
 		_g_object_unref0 (_tmp2_);
 	}
diff --git a/src/librygel-renderer/rygel-media-renderer-plugin.vala b/src/librygel-renderer/rygel-media-renderer-plugin.vala
index 724a912..d40e252 100644
--- a/src/librygel-renderer/rygel-media-renderer-plugin.vala
+++ b/src/librygel-renderer/rygel-media-renderer-plugin.vala
@@ -37,7 +37,7 @@ public class Rygel.MediaRendererPlugin : Rygel.Plugin {
     private static const string DMR = "urn:schemas-upnp-org:device:MediaRenderer";
 
     private string sink_protocol_info;
-    private PlayerController controller;
+    private PlayerControllerInterface controller;
 
     private GLib.List<DLNAProfile> _supported_profiles;
 
@@ -74,7 +74,7 @@ public class Rygel.MediaRendererPlugin : Rygel.Plugin {
                                 string? description = null,
                                 PluginCapabilities capabilities =
                                         PluginCapabilities.NONE,
-                                PlayerController? controller = null) {
+                                PlayerControllerInterface? controller = null) {
         Object (desc_path : MEDIA_RENDERER_DESC_PATH,
                 name : name,
                 title : title,
@@ -109,7 +109,7 @@ public class Rygel.MediaRendererPlugin : Rygel.Plugin {
         return null;
     }
 
-    internal PlayerController get_controller () {
+    internal PlayerControllerInterface get_controller () {
         if (this.controller == null) {
             this.controller = new PlayerController (this.get_player (),
                                                     this.get_protocol_info ());
diff --git a/src/librygel-renderer/rygel-media-renderer.c b/src/librygel-renderer/rygel-media-renderer.c
index 93eeb96..3d31d40 100644
--- a/src/librygel-renderer/rygel-media-renderer.c
+++ b/src/librygel-renderer/rygel-media-renderer.c
@@ -29,6 +29,7 @@
 #include <string.h>
 #include <float.h>
 #include <math.h>
+#include <libgupnp-av/gupnp-av.h>
 
 
 #define RYGEL_TYPE_MEDIA_RENDERER_PLUGIN (rygel_media_renderer_plugin_get_type ())
@@ -62,15 +63,13 @@ typedef struct _PluginClass PluginClass;
 typedef struct _PluginPrivate PluginPrivate;
 #define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
 
-#define RYGEL_TYPE_PLAYER_CONTROLLER (rygel_player_controller_get_type ())
-#define RYGEL_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerController))
-#define RYGEL_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
-#define RYGEL_IS_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER))
-#define RYGEL_IS_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), RYGEL_TYPE_PLAYER_CONTROLLER))
-#define RYGEL_PLAYER_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
+#define RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE (rygel_player_controller_interface_get_type ())
+#define RYGEL_PLAYER_CONTROLLER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, RygelPlayerControllerInterface))
+#define RYGEL_IS_PLAYER_CONTROLLER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE))
+#define RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, RygelPlayerControllerInterfaceIface))
 
-typedef struct _RygelPlayerController RygelPlayerController;
-typedef struct _RygelPlayerControllerClass RygelPlayerControllerClass;
+typedef struct _RygelPlayerControllerInterface RygelPlayerControllerInterface;
+typedef struct _RygelPlayerControllerInterfaceIface RygelPlayerControllerInterfaceIface;
 
 #define RYGEL_TYPE_MEDIA_RENDERER (rygel_media_renderer_get_type ())
 #define RYGEL_MEDIA_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_MEDIA_RENDERER, RygelMediaRenderer))
@@ -135,6 +134,35 @@ struct _PluginPrivate {
 	RygelMediaPlayer* player;
 };
 
+struct _RygelPlayerControllerInterfaceIface {
+	GTypeInterface parent_iface;
+	gboolean (*next) (RygelPlayerControllerInterface* self);
+	gboolean (*previous) (RygelPlayerControllerInterface* self);
+	void (*set_single_play_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_playlist_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	void (*set_next_single_play_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_next_playlist_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	const gchar* (*get_playback_state) (RygelPlayerControllerInterface* self);
+	void (*set_playback_state) (RygelPlayerControllerInterface* self, const gchar* value);
+	guint (*get_n_tracks) (RygelPlayerControllerInterface* self);
+	void (*set_n_tracks) (RygelPlayerControllerInterface* self, guint value);
+	guint (*get_track) (RygelPlayerControllerInterface* self);
+	void (*set_track) (RygelPlayerControllerInterface* self, guint value);
+	const gchar* (*get_uri) (RygelPlayerControllerInterface* self);
+	void (*set_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_track_uri) (RygelPlayerControllerInterface* self);
+	void (*set_track_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_track_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_track_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_next_uri) (RygelPlayerControllerInterface* self);
+	void (*set_next_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_next_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_next_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_current_transport_actions) (RygelPlayerControllerInterface* self);
+};
+
 struct _RygelMediaRenderer {
 	RygelMediaDevice parent_instance;
 	RygelMediaRendererPrivate * priv;
@@ -146,7 +174,7 @@ struct _RygelMediaRendererClass {
 
 struct _RygelMediaRendererPrivate {
 	RygelMediaPlayer* _player;
-	RygelPlayerController* controller;
+	RygelPlayerControllerInterface* controller;
 };
 
 
@@ -160,11 +188,11 @@ GType plugin_get_type (void) G_GNUC_CONST;
 enum  {
 	PLUGIN_DUMMY_PROPERTY
 };
-GType rygel_player_controller_get_type (void) G_GNUC_CONST;
-Plugin* plugin_new (RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
-Plugin* plugin_construct (GType object_type, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
+GType rygel_player_controller_interface_get_type (void) G_GNUC_CONST;
+Plugin* plugin_new (RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller);
+Plugin* plugin_construct (GType object_type, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller);
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller);
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller);
 static RygelMediaPlayer* plugin_real_get_player (RygelMediaRendererPlugin* base);
 static void plugin_finalize (GObject* obj);
 GType rygel_media_renderer_get_type (void) G_GNUC_CONST;
@@ -173,8 +201,8 @@ enum  {
 	RYGEL_MEDIA_RENDERER_DUMMY_PROPERTY,
 	RYGEL_MEDIA_RENDERER_PLAYER
 };
-RygelMediaRenderer* rygel_media_renderer_new (const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
-RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
+RygelMediaRenderer* rygel_media_renderer_new (const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller);
+RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller);
 static void rygel_media_renderer_real_constructed (GObject* base);
 static RygelMediaPlayer* rygel_media_renderer_get_player (RygelMediaRenderer* self);
 static void rygel_media_renderer_set_player (RygelMediaRenderer* self, RygelMediaPlayer* value);
@@ -188,10 +216,10 @@ static gpointer _g_object_ref0 (gpointer self) {
 }
 
 
-Plugin* plugin_construct (GType object_type, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller) {
+Plugin* plugin_construct (GType object_type, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller) {
 	Plugin * self = NULL;
 	RygelPluginCapabilities _tmp0_ = 0;
-	RygelPlayerController* _tmp1_ = NULL;
+	RygelPlayerControllerInterface* _tmp1_ = NULL;
 	RygelMediaPlayer* _tmp2_ = NULL;
 	RygelMediaPlayer* _tmp3_ = NULL;
 	g_return_val_if_fail (player != NULL, NULL);
@@ -206,7 +234,7 @@ Plugin* plugin_construct (GType object_type, RygelMediaPlayer* player, RygelPlug
 }
 
 
-Plugin* plugin_new (RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller) {
+Plugin* plugin_new (RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller) {
 	return plugin_construct (TYPE_PLUGIN, player, capabilities, controller);
 }
 
@@ -260,13 +288,13 @@ GType plugin_get_type (void) {
 /**
      * Create a RygelMediaRenderer to render content via a RygelMediaPlayer.
      */
-RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller) {
+RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller) {
 	RygelMediaRenderer * self = NULL;
 	const gchar* _tmp0_ = NULL;
 	RygelMediaPlayer* _tmp1_ = NULL;
 	RygelPluginCapabilities _tmp2_ = 0;
-	RygelPlayerController* _tmp3_ = NULL;
-	RygelPlayerController* _tmp4_ = NULL;
+	RygelPlayerControllerInterface* _tmp3_ = NULL;
+	RygelPlayerControllerInterface* _tmp4_ = NULL;
 	g_return_val_if_fail (title != NULL, NULL);
 	g_return_val_if_fail (player != NULL, NULL);
 	_tmp0_ = title;
@@ -281,7 +309,7 @@ RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gch
 }
 
 
-RygelMediaRenderer* rygel_media_renderer_new (const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller) {
+RygelMediaRenderer* rygel_media_renderer_new (const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller) {
 	return rygel_media_renderer_construct (RYGEL_TYPE_MEDIA_RENDERER, title, player, capabilities, controller);
 }
 
@@ -302,7 +330,7 @@ static void rygel_media_renderer_real_constructed (GObject* base) {
 		RygelMediaPlayer* _tmp2_ = NULL;
 		RygelPluginCapabilities _tmp3_ = 0;
 		RygelPluginCapabilities _tmp4_ = 0;
-		RygelPlayerController* _tmp5_ = NULL;
+		RygelPlayerControllerInterface* _tmp5_ = NULL;
 		Plugin* _tmp6_ = NULL;
 		Plugin* _tmp7_ = NULL;
 		_tmp2_ = self->priv->_player;
diff --git a/src/librygel-renderer/rygel-media-renderer.vala b/src/librygel-renderer/rygel-media-renderer.vala
index 7b772e3..9864c7d 100644
--- a/src/librygel-renderer/rygel-media-renderer.vala
+++ b/src/librygel-renderer/rygel-media-renderer.vala
@@ -24,7 +24,7 @@ internal class Plugin : Rygel.MediaRendererPlugin {
 
     public Plugin (Rygel.MediaPlayer        player,
                    Rygel.PluginCapabilities capabilities,
-                   Rygel.PlayerController?  controller = null) {
+                   Rygel.PlayerControllerInterface?  controller = null) {
         base ("LibRygelRenderer", "LibRygelRenderer", null, capabilities, controller);
         this.player = player;
     }
@@ -53,7 +53,7 @@ public class Rygel.MediaRenderer : MediaDevice {
                           MediaPlayer player,
                           PluginCapabilities capabilities =
                                         PluginCapabilities.NONE,
-                          PlayerController? controller = null) {
+                          PlayerControllerInterface? controller = null) {
         Object (title: title,
                 player: player,
                 capabilities: capabilities);
@@ -68,5 +68,5 @@ public class Rygel.MediaRenderer : MediaDevice {
         }
         this.plugin.title = this.title;
     }
-    private PlayerController controller;
+    private PlayerControllerInterface controller;
 }
diff --git a/src/librygel-renderer/rygel-player-controller-interface.c b/src/librygel-renderer/rygel-player-controller-interface.c
new file mode 100644
index 0000000..f86817a
--- /dev/null
+++ b/src/librygel-renderer/rygel-player-controller-interface.c
@@ -0,0 +1,294 @@
+/* rygel-player-controller-interface.c generated by valac 0.24.0, the Vala compiler
+ * generated from rygel-player-controller-interface.vala, do not modify */
+
+/*
+ * Copyright (C) 2012 Intel Corporation.
+ *
+ * Author: Jens Georg <jensg@openismus.com>
+ *
+ * Rygel is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * Rygel is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ */
+
+#include <glib.h>
+#include <glib-object.h>
+#include <stdlib.h>
+#include <string.h>
+#include <libgupnp-av/gupnp-av.h>
+
+
+#define RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE (rygel_player_controller_interface_get_type ())
+#define RYGEL_PLAYER_CONTROLLER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, RygelPlayerControllerInterface))
+#define RYGEL_IS_PLAYER_CONTROLLER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE))
+#define RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, RygelPlayerControllerInterfaceIface))
+
+typedef struct _RygelPlayerControllerInterface RygelPlayerControllerInterface;
+typedef struct _RygelPlayerControllerInterfaceIface RygelPlayerControllerInterfaceIface;
+
+struct _RygelPlayerControllerInterfaceIface {
+	GTypeInterface parent_iface;
+	gboolean (*next) (RygelPlayerControllerInterface* self);
+	gboolean (*previous) (RygelPlayerControllerInterface* self);
+	void (*set_single_play_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_playlist_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	void (*set_next_single_play_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_next_playlist_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	const gchar* (*get_playback_state) (RygelPlayerControllerInterface* self);
+	void (*set_playback_state) (RygelPlayerControllerInterface* self, const gchar* value);
+	guint (*get_n_tracks) (RygelPlayerControllerInterface* self);
+	void (*set_n_tracks) (RygelPlayerControllerInterface* self, guint value);
+	guint (*get_track) (RygelPlayerControllerInterface* self);
+	void (*set_track) (RygelPlayerControllerInterface* self, guint value);
+	const gchar* (*get_uri) (RygelPlayerControllerInterface* self);
+	void (*set_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_track_uri) (RygelPlayerControllerInterface* self);
+	void (*set_track_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_track_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_track_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_next_uri) (RygelPlayerControllerInterface* self);
+	void (*set_next_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_next_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_next_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_current_transport_actions) (RygelPlayerControllerInterface* self);
+};
+
+
+
+GType rygel_player_controller_interface_get_type (void) G_GNUC_CONST;
+gboolean rygel_player_controller_interface_next (RygelPlayerControllerInterface* self);
+gboolean rygel_player_controller_interface_previous (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_single_play_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+void rygel_player_controller_interface_set_playlist_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+void rygel_player_controller_interface_set_next_single_play_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+void rygel_player_controller_interface_set_next_playlist_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+const gchar* rygel_player_controller_interface_get_playback_state (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_playback_state (RygelPlayerControllerInterface* self, const gchar* value);
+guint rygel_player_controller_interface_get_n_tracks (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_n_tracks (RygelPlayerControllerInterface* self, guint value);
+guint rygel_player_controller_interface_get_track (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_track (RygelPlayerControllerInterface* self, guint value);
+const gchar* rygel_player_controller_interface_get_uri (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_uri (RygelPlayerControllerInterface* self, const gchar* value);
+const gchar* rygel_player_controller_interface_get_metadata (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_metadata (RygelPlayerControllerInterface* self, const gchar* value);
+gchar* rygel_player_controller_interface_get_track_uri (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_track_uri (RygelPlayerControllerInterface* self, const gchar* value);
+gchar* rygel_player_controller_interface_get_track_metadata (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_track_metadata (RygelPlayerControllerInterface* self, const gchar* value);
+const gchar* rygel_player_controller_interface_get_next_uri (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_next_uri (RygelPlayerControllerInterface* self, const gchar* value);
+const gchar* rygel_player_controller_interface_get_next_metadata (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_next_metadata (RygelPlayerControllerInterface* self, const gchar* value);
+gchar* rygel_player_controller_interface_get_current_transport_actions (RygelPlayerControllerInterface* self);
+
+
+gboolean rygel_player_controller_interface_next (RygelPlayerControllerInterface* self) {
+	g_return_val_if_fail (self != NULL, FALSE);
+	return RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->next (self);
+}
+
+
+gboolean rygel_player_controller_interface_previous (RygelPlayerControllerInterface* self) {
+	g_return_val_if_fail (self != NULL, FALSE);
+	return RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->previous (self);
+}
+
+
+void rygel_player_controller_interface_set_single_play_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_single_play_uri (self, uri, metadata, mime, features);
+}
+
+
+void rygel_player_controller_interface_set_playlist_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_playlist_uri (self, uri, metadata, collection);
+}
+
+
+void rygel_player_controller_interface_set_next_single_play_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_next_single_play_uri (self, uri, metadata, mime, features);
+}
+
+
+void rygel_player_controller_interface_set_next_playlist_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_next_playlist_uri (self, uri, metadata, collection);
+}
+
+
+const gchar* rygel_player_controller_interface_get_playback_state (RygelPlayerControllerInterface* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->get_playback_state (self);
+}
+
+
+void rygel_player_controller_interface_set_playback_state (RygelPlayerControllerInterface* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_playback_state (self, value);
+}
+
+
+guint rygel_player_controller_interface_get_n_tracks (RygelPlayerControllerInterface* self) {
+	g_return_val_if_fail (self != NULL, 0U);
+	return RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->get_n_tracks (self);
+}
+
+
+void rygel_player_controller_interface_set_n_tracks (RygelPlayerControllerInterface* self, guint value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_n_tracks (self, value);
+}
+
+
+guint rygel_player_controller_interface_get_track (RygelPlayerControllerInterface* self) {
+	g_return_val_if_fail (self != NULL, 0U);
+	return RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->get_track (self);
+}
+
+
+void rygel_player_controller_interface_set_track (RygelPlayerControllerInterface* self, guint value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_track (self, value);
+}
+
+
+const gchar* rygel_player_controller_interface_get_uri (RygelPlayerControllerInterface* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->get_uri (self);
+}
+
+
+void rygel_player_controller_interface_set_uri (RygelPlayerControllerInterface* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_uri (self, value);
+}
+
+
+const gchar* rygel_player_controller_interface_get_metadata (RygelPlayerControllerInterface* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->get_metadata (self);
+}
+
+
+void rygel_player_controller_interface_set_metadata (RygelPlayerControllerInterface* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_metadata (self, value);
+}
+
+
+gchar* rygel_player_controller_interface_get_track_uri (RygelPlayerControllerInterface* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->get_track_uri (self);
+}
+
+
+void rygel_player_controller_interface_set_track_uri (RygelPlayerControllerInterface* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_track_uri (self, value);
+}
+
+
+gchar* rygel_player_controller_interface_get_track_metadata (RygelPlayerControllerInterface* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->get_track_metadata (self);
+}
+
+
+void rygel_player_controller_interface_set_track_metadata (RygelPlayerControllerInterface* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_track_metadata (self, value);
+}
+
+
+const gchar* rygel_player_controller_interface_get_next_uri (RygelPlayerControllerInterface* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->get_next_uri (self);
+}
+
+
+void rygel_player_controller_interface_set_next_uri (RygelPlayerControllerInterface* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_next_uri (self, value);
+}
+
+
+const gchar* rygel_player_controller_interface_get_next_metadata (RygelPlayerControllerInterface* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->get_next_metadata (self);
+}
+
+
+void rygel_player_controller_interface_set_next_metadata (RygelPlayerControllerInterface* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->set_next_metadata (self, value);
+}
+
+
+gchar* rygel_player_controller_interface_get_current_transport_actions (RygelPlayerControllerInterface* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE (self)->get_current_transport_actions (self);
+}
+
+
+static void rygel_player_controller_interface_base_init (RygelPlayerControllerInterfaceIface * iface) {
+	static gboolean initialized = FALSE;
+	if (!initialized) {
+		initialized = TRUE;
+		g_object_interface_install_property (iface, g_param_spec_string ("playback-state", "playback-state", "playback-state", NULL, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+		g_object_interface_install_property (iface, g_param_spec_uint ("n-tracks", "n-tracks", "n-tracks", 0, G_MAXUINT, 0U, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+		g_object_interface_install_property (iface, g_param_spec_uint ("track", "track", "track", 0, G_MAXUINT, 0U, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+		g_object_interface_install_property (iface, g_param_spec_string ("uri", "uri", "uri", NULL, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+		g_object_interface_install_property (iface, g_param_spec_string ("metadata", "metadata", "metadata", NULL, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+		g_object_interface_install_property (iface, g_param_spec_string ("track-uri", "track-uri", "track-uri", NULL, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+		g_object_interface_install_property (iface, g_param_spec_string ("track-metadata", "track-metadata", "track-metadata", NULL, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+		g_object_interface_install_property (iface, g_param_spec_string ("next-uri", "next-uri", "next-uri", NULL, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+		g_object_interface_install_property (iface, g_param_spec_string ("next-metadata", "next-metadata", "next-metadata", NULL, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+		g_object_interface_install_property (iface, g_param_spec_string ("current-transport-actions", "current-transport-actions", "current-transport-actions", NULL, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE));
+	}
+}
+
+
+/**
+ * This interface abstracts global states that are not dependant on the
+ * RygelMediaPlayer.
+ *
+ * These states are:
+ * # URI
+ * # MetaData
+ * # Number of tracks
+ * # Current track
+ * # Playback state
+ *
+ * In case of playlists this interface will also provide control of the player.
+ * It needs to proxy the playback state to react on end of item to be able to
+ * switch to the next item.
+ */
+GType rygel_player_controller_interface_get_type (void) {
+	static volatile gsize rygel_player_controller_interface_type_id__volatile = 0;
+	if (g_once_init_enter (&rygel_player_controller_interface_type_id__volatile)) {
+		static const GTypeInfo g_define_type_info = { sizeof (RygelPlayerControllerInterfaceIface), (GBaseInitFunc) rygel_player_controller_interface_base_init, (GBaseFinalizeFunc) NULL, (GClassInitFunc) NULL, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
+		GType rygel_player_controller_interface_type_id;
+		rygel_player_controller_interface_type_id = g_type_register_static (G_TYPE_INTERFACE, "RygelPlayerControllerInterface", &g_define_type_info, 0);
+		g_type_interface_add_prerequisite (rygel_player_controller_interface_type_id, G_TYPE_OBJECT);
+		g_once_init_leave (&rygel_player_controller_interface_type_id__volatile, rygel_player_controller_interface_type_id);
+	}
+	return rygel_player_controller_interface_type_id__volatile;
+}
+
+
+
diff --git a/src/librygel-renderer/rygel-player-controller-interface.vala b/src/librygel-renderer/rygel-player-controller-interface.vala
new file mode 100644
index 0000000..64eacb5
--- /dev/null
+++ b/src/librygel-renderer/rygel-player-controller-interface.vala
@@ -0,0 +1,59 @@
+
+/*
+ * Copyright (C) 2012 Intel Corporation.
+ *
+ * Author: Jens Georg <jensg@openismus.com>
+ *
+ * Rygel is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * Rygel is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ */
+
+using GUPnP;
+
+/**
+ * This interface abstracts global states that are not dependant on the
+ * RygelMediaPlayer.
+ *
+ * These states are:
+ * # URI
+ * # MetaData
+ * # Number of tracks
+ * # Current track
+ * # Playback state
+ *
+ * In case of playlists this interface will also provide control of the player.
+ * It needs to proxy the playback state to react on end of item to be able to
+ * switch to the next item.
+ */
+public interface Rygel.PlayerControllerInterface : Object {
+    /* public properties */
+    [CCode (notify = false)]
+    public abstract string playback_state { get; set; }
+    public abstract uint n_tracks { get; set; }
+    public abstract uint track { get; set; }
+    public abstract string uri { get; set; }
+    public abstract string metadata { get; set; }
+    public abstract string track_uri { owned get; set; }
+    public abstract string track_metadata { owned get; set; }
+    public abstract string next_uri { get; set; }
+    public abstract string next_metadata { get; set; }
+    public abstract string current_transport_actions { owned get; }
+
+    public abstract bool next ();
+    public abstract bool previous ();
+    public abstract void set_single_play_uri (string uri, string metadata, string? mime, string? features);
+    public abstract void set_playlist_uri (string uri, string metadata, MediaCollection collection);
+    public abstract void set_next_single_play_uri (string uri, string metadata, string? mime, string? features);
+    public abstract void set_next_playlist_uri (string uri, string metadata, MediaCollection collection);
+}
diff --git a/src/librygel-renderer/rygel-player-controller.c b/src/librygel-renderer/rygel-player-controller.c
index fc83d69..0406ecb 100644
--- a/src/librygel-renderer/rygel-player-controller.c
+++ b/src/librygel-renderer/rygel-player-controller.c
@@ -31,6 +31,14 @@
 #include <rygel-core.h>
 
 
+#define RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE (rygel_player_controller_interface_get_type ())
+#define RYGEL_PLAYER_CONTROLLER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, RygelPlayerControllerInterface))
+#define RYGEL_IS_PLAYER_CONTROLLER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE))
+#define RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, RygelPlayerControllerInterfaceIface))
+
+typedef struct _RygelPlayerControllerInterface RygelPlayerControllerInterface;
+typedef struct _RygelPlayerControllerInterfaceIface RygelPlayerControllerInterfaceIface;
+
 #define RYGEL_TYPE_PLAYER_CONTROLLER (rygel_player_controller_get_type ())
 #define RYGEL_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerController))
 #define RYGEL_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
@@ -55,6 +63,44 @@ typedef struct _RygelMediaPlayerIface RygelMediaPlayerIface;
 #define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
 #define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
 
+struct _RygelPlayerControllerInterfaceIface {
+	GTypeInterface parent_iface;
+	gboolean (*next) (RygelPlayerControllerInterface* self);
+	gboolean (*previous) (RygelPlayerControllerInterface* self);
+	void (*set_single_play_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_playlist_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	void (*set_next_single_play_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_next_playlist_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	const gchar* (*get_playback_state) (RygelPlayerControllerInterface* self);
+	void (*set_playback_state) (RygelPlayerControllerInterface* self, const gchar* value);
+	guint (*get_n_tracks) (RygelPlayerControllerInterface* self);
+	void (*set_n_tracks) (RygelPlayerControllerInterface* self, guint value);
+	guint (*get_track) (RygelPlayerControllerInterface* self);
+	void (*set_track) (RygelPlayerControllerInterface* self, guint value);
+	const gchar* (*get_uri) (RygelPlayerControllerInterface* self);
+	void (*set_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_track_uri) (RygelPlayerControllerInterface* self);
+	void (*set_track_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_track_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_track_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_next_uri) (RygelPlayerControllerInterface* self);
+	void (*set_next_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_next_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_next_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_current_transport_actions) (RygelPlayerControllerInterface* self);
+};
+
+struct _RygelPlayerController {
+	GObject parent_instance;
+	RygelPlayerControllerPrivate * priv;
+};
+
+struct _RygelPlayerControllerClass {
+	GObjectClass parent_class;
+};
+
 struct _RygelMediaPlayerIface {
 	GTypeInterface parent_iface;
 	gboolean (*seek) (RygelMediaPlayer* self, gint64 time);
@@ -84,44 +130,6 @@ struct _RygelMediaPlayerIface {
 	gint64 (*get_byte_position) (RygelMediaPlayer* self);
 };
 
-struct _RygelPlayerController {
-	GObject parent_instance;
-	RygelPlayerControllerPrivate * priv;
-};
-
-struct _RygelPlayerControllerClass {
-	GObjectClass parent_class;
-	gboolean (*next) (RygelPlayerController* self);
-	gboolean (*previous) (RygelPlayerController* self);
-	void (*set_single_play_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
-	void (*set_playlist_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
-	void (*set_next_single_play_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
-	void (*set_next_playlist_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
-	RygelMediaPlayer* (*get_player) (RygelPlayerController* self);
-	void (*set_player) (RygelPlayerController* self, RygelMediaPlayer* value);
-	const gchar* (*get_protocol_info) (RygelPlayerController* self);
-	void (*set_protocol_info) (RygelPlayerController* self, const gchar* value);
-	const gchar* (*get_playback_state) (RygelPlayerController* self);
-	void (*set_playback_state) (RygelPlayerController* self, const gchar* value);
-	guint (*get_n_tracks) (RygelPlayerController* self);
-	void (*set_n_tracks) (RygelPlayerController* self, guint value);
-	guint (*get_track) (RygelPlayerController* self);
-	void (*set_track) (RygelPlayerController* self, guint value);
-	const gchar* (*get_uri) (RygelPlayerController* self);
-	void (*set_uri) (RygelPlayerController* self, const gchar* value);
-	const gchar* (*get_metadata) (RygelPlayerController* self);
-	void (*set_metadata) (RygelPlayerController* self, const gchar* value);
-	gchar* (*get_track_uri) (RygelPlayerController* self);
-	void (*set_track_uri) (RygelPlayerController* self, const gchar* value);
-	gchar* (*get_track_metadata) (RygelPlayerController* self);
-	void (*set_track_metadata) (RygelPlayerController* self, const gchar* value);
-	const gchar* (*get_next_uri) (RygelPlayerController* self);
-	void (*set_next_uri) (RygelPlayerController* self, const gchar* value);
-	const gchar* (*get_next_metadata) (RygelPlayerController* self);
-	void (*set_next_metadata) (RygelPlayerController* self, const gchar* value);
-	gchar* (*get_current_transport_actions) (RygelPlayerController* self);
-};
-
 struct _RygelPlayerControllerPrivate {
 	RygelMediaPlayer* _player;
 	gchar* _protocol_info;
@@ -143,7 +151,9 @@ struct _RygelPlayerControllerPrivate {
 
 
 static gpointer rygel_player_controller_parent_class = NULL;
+static RygelPlayerControllerInterfaceIface* rygel_player_controller_rygel_player_controller_interface_parent_iface = NULL;
 
+GType rygel_player_controller_interface_get_type (void) G_GNUC_CONST;
 GType rygel_player_controller_get_type (void) G_GNUC_CONST;
 GType rygel_media_player_get_type (void) G_GNUC_CONST;
 #define RYGEL_PLAYER_CONTROLLER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerPrivate))
@@ -180,60 +190,57 @@ static void rygel_player_controller_notify_metadata_cb (RygelPlayerController* s
 static void _rygel_player_controller_notify_metadata_cb_g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self);
 static void rygel_player_controller_on_setting_changed (RygelPlayerController* self, const gchar* section, const gchar* key);
 static void _rygel_player_controller_on_setting_changed_rygel_configuration_setting_changed (RygelConfiguration* _sender, const gchar* section, const gchar* key, gpointer self);
-gboolean rygel_player_controller_next (RygelPlayerController* self);
-static gboolean rygel_player_controller_real_next (RygelPlayerController* self);
-guint rygel_player_controller_get_track (RygelPlayerController* self);
-guint rygel_player_controller_get_n_tracks (RygelPlayerController* self);
-void rygel_player_controller_set_track (RygelPlayerController* self, guint value);
-const gchar* rygel_player_controller_get_next_uri (RygelPlayerController* self);
-void rygel_player_controller_set_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
-const gchar* rygel_player_controller_get_next_metadata (RygelPlayerController* self);
-void rygel_player_controller_set_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
-static void rygel_player_controller_set_next_uri (RygelPlayerController* self, const gchar* value);
-static void rygel_player_controller_set_next_metadata (RygelPlayerController* self, const gchar* value);
-gboolean rygel_player_controller_previous (RygelPlayerController* self);
-static gboolean rygel_player_controller_real_previous (RygelPlayerController* self);
-static void rygel_player_controller_real_set_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+static gboolean rygel_player_controller_real_next (RygelPlayerControllerInterface* base);
+guint rygel_player_controller_interface_get_track (RygelPlayerControllerInterface* self);
+guint rygel_player_controller_interface_get_n_tracks (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_track (RygelPlayerControllerInterface* self, guint value);
+const gchar* rygel_player_controller_interface_get_next_uri (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_playlist_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+const gchar* rygel_player_controller_interface_get_next_metadata (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_single_play_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+void rygel_player_controller_interface_set_next_uri (RygelPlayerControllerInterface* self, const gchar* value);
+void rygel_player_controller_interface_set_next_metadata (RygelPlayerControllerInterface* self, const gchar* value);
+static gboolean rygel_player_controller_real_previous (RygelPlayerControllerInterface* base);
+static void rygel_player_controller_real_set_single_play_uri (RygelPlayerControllerInterface* base, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
 static gchar* rygel_player_controller_unescape (RygelPlayerController* self, const gchar* input);
-static void rygel_player_controller_set_metadata (RygelPlayerController* self, const gchar* value);
-static void rygel_player_controller_set_uri (RygelPlayerController* self, const gchar* value);
+void rygel_player_controller_interface_set_metadata (RygelPlayerControllerInterface* self, const gchar* value);
+void rygel_player_controller_interface_set_uri (RygelPlayerControllerInterface* self, const gchar* value);
 void rygel_media_player_set_mime_type (RygelMediaPlayer* self, const gchar* value);
 void rygel_media_player_set_content_features (RygelMediaPlayer* self, const gchar* value);
-const gchar* rygel_player_controller_get_metadata (RygelPlayerController* self);
-static void rygel_player_controller_set_track_metadata (RygelPlayerController* self, const gchar* value);
-const gchar* rygel_player_controller_get_uri (RygelPlayerController* self);
-static void rygel_player_controller_set_track_uri (RygelPlayerController* self, const gchar* value);
-static void rygel_player_controller_set_n_tracks (RygelPlayerController* self, guint value);
-static void rygel_player_controller_real_set_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+const gchar* rygel_player_controller_interface_get_metadata (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_track_metadata (RygelPlayerControllerInterface* self, const gchar* value);
+const gchar* rygel_player_controller_interface_get_uri (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_track_uri (RygelPlayerControllerInterface* self, const gchar* value);
+void rygel_player_controller_interface_set_n_tracks (RygelPlayerControllerInterface* self, guint value);
+static void rygel_player_controller_real_set_playlist_uri (RygelPlayerControllerInterface* base, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
 static void rygel_player_controller_apply_track (RygelPlayerController* self);
-void rygel_player_controller_set_next_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
-static void rygel_player_controller_real_set_next_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
-void rygel_player_controller_set_next_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
-static void rygel_player_controller_real_set_next_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+static void rygel_player_controller_real_set_next_single_play_uri (RygelPlayerControllerInterface* base, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+static void rygel_player_controller_real_set_next_playlist_uri (RygelPlayerControllerInterface* base, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
 gchar* rygel_media_player_get_playback_state (RygelMediaPlayer* self);
 static gboolean ___lambda4_ (RygelPlayerController* self);
+gboolean rygel_player_controller_interface_next (RygelPlayerControllerInterface* self);
 static void rygel_player_controller_reset (RygelPlayerController* self);
 static gboolean ____lambda4__gsource_func (gpointer self);
 static const gchar* rygel_player_controller_get_protocol_info (RygelPlayerController* self);
-const gchar* rygel_player_controller_get_playback_state (RygelPlayerController* self);
+const gchar* rygel_player_controller_interface_get_playback_state (RygelPlayerControllerInterface* self);
 static void rygel_player_controller_setup_image_timeouts (RygelPlayerController* self, glong lifetime);
-void rygel_player_controller_set_playback_state (RygelPlayerController* self, const gchar* value);
+void rygel_player_controller_interface_set_playback_state (RygelPlayerControllerInterface* self, const gchar* value);
 static gboolean __lambda5_ (RygelPlayerController* self);
 static gboolean ___lambda5__gsource_func (gpointer self);
 static void rygel_player_controller_set_player (RygelPlayerController* self, RygelMediaPlayer* value);
 static void rygel_player_controller_set_protocol_info (RygelPlayerController* self, const gchar* value);
 void rygel_media_player_set_playback_state (RygelMediaPlayer* self, const gchar* value);
-gchar* rygel_player_controller_get_track_uri (RygelPlayerController* self);
 gchar* rygel_media_player_get_uri (RygelMediaPlayer* self);
 void rygel_media_player_set_uri (RygelMediaPlayer* self, const gchar* value);
-gchar* rygel_player_controller_get_track_metadata (RygelPlayerController* self);
 gchar* rygel_media_player_get_metadata (RygelMediaPlayer* self);
 void rygel_media_player_set_metadata (RygelMediaPlayer* self, const gchar* value);
-gchar* rygel_player_controller_get_current_transport_actions (RygelPlayerController* self);
 gboolean rygel_media_player_get_can_seek (RygelMediaPlayer* self);
 gboolean rygel_media_player_get_can_seek_bytes (RygelMediaPlayer* self);
 gchar** rygel_media_player_get_allowed_playback_speeds (RygelMediaPlayer* self, int* result_length1);
 static void rygel_player_controller_finalize (GObject* obj);
+gchar* rygel_player_controller_interface_get_track_uri (RygelPlayerControllerInterface* self);
+gchar* rygel_player_controller_interface_get_track_metadata (RygelPlayerControllerInterface* self);
+gchar* rygel_player_controller_interface_get_current_transport_actions (RygelPlayerControllerInterface* self);
 static void _vala_rygel_player_controller_get_property (GObject * object, guint property_id, GValue * value, GParamSpec * pspec);
 static void _vala_rygel_player_controller_set_property (GObject * object, guint property_id, const GValue * value, GParamSpec * pspec);
 static void _vala_array_destroy (gpointer array, gint array_length, GDestroyNotify destroy_func);
@@ -294,33 +301,28 @@ static void rygel_player_controller_real_constructed (GObject* base) {
 	RygelMediaPlayer* _tmp0_ = NULL;
 	RygelMediaPlayer* _tmp1_ = NULL;
 	RygelMediaPlayer* _tmp2_ = NULL;
-	RygelMediaPlayer* _tmp3_ = NULL;
-	RygelMediaPlayer* _tmp4_ = NULL;
-	RygelMediaPlayer* _tmp5_ = NULL;
-	RygelMetaConfig* _tmp6_ = NULL;
-	RygelConfiguration* _tmp7_ = NULL;
+	RygelMetaConfig* _tmp3_ = NULL;
+	RygelConfiguration* _tmp4_ = NULL;
 	self = (RygelPlayerController*) base;
 	G_OBJECT_CLASS (rygel_player_controller_parent_class)->constructed (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject));
-	_tmp0_ = rygel_player_controller_get_player (self);
-	_tmp1_ = _tmp0_;
-	g_signal_connect_object ((GObject*) _tmp1_, "notify::playback-state", (GCallback) _rygel_player_controller_notify_state_cb_g_object_notify, self, 0);
-	_tmp2_ = rygel_player_controller_get_player (self);
-	_tmp3_ = _tmp2_;
-	g_signal_connect_object ((GObject*) _tmp3_, "notify::uri", (GCallback) _rygel_player_controller_notify_uri_cb_g_object_notify, self, 0);
-	_tmp4_ = rygel_player_controller_get_player (self);
-	_tmp5_ = _tmp4_;
-	g_signal_connect_object ((GObject*) _tmp5_, "notify::metadata", (GCallback) _rygel_player_controller_notify_metadata_cb_g_object_notify, self, 0);
-	_tmp6_ = rygel_meta_config_get_default ();
+	_tmp0_ = self->priv->_player;
+	g_signal_connect_object ((GObject*) _tmp0_, "notify::playback-state", (GCallback) _rygel_player_controller_notify_state_cb_g_object_notify, self, 0);
+	_tmp1_ = self->priv->_player;
+	g_signal_connect_object ((GObject*) _tmp1_, "notify::uri", (GCallback) _rygel_player_controller_notify_uri_cb_g_object_notify, self, 0);
+	_tmp2_ = self->priv->_player;
+	g_signal_connect_object ((GObject*) _tmp2_, "notify::metadata", (GCallback) _rygel_player_controller_notify_metadata_cb_g_object_notify, self, 0);
+	_tmp3_ = rygel_meta_config_get_default ();
 	_g_object_unref0 (self->priv->config);
-	self->priv->config = (RygelConfiguration*) _tmp6_;
-	_tmp7_ = self->priv->config;
-	g_signal_connect_object (_tmp7_, "setting-changed", (GCallback) _rygel_player_controller_on_setting_changed_rygel_configuration_setting_changed, self, 0);
+	self->priv->config = (RygelConfiguration*) _tmp3_;
+	_tmp4_ = self->priv->config;
+	g_signal_connect_object (_tmp4_, "setting-changed", (GCallback) _rygel_player_controller_on_setting_changed_rygel_configuration_setting_changed, self, 0);
 	self->priv->default_image_timeout = (guint) RYGEL_PLAYER_CONTROLLER_DEFAULT_IMAGE_TIMEOUT;
 	rygel_player_controller_on_setting_changed (self, RYGEL_PLAYER_CONTROLLER_CONFIG_SECTION, RYGEL_PLAYER_CONTROLLER_TIMEOUT_KEY);
 }
 
 
-static gboolean rygel_player_controller_real_next (RygelPlayerController* self) {
+static gboolean rygel_player_controller_real_next (RygelPlayerControllerInterface* base) {
+	RygelPlayerController * self;
 	gboolean result = FALSE;
 	guint _tmp0_ = 0U;
 	guint _tmp1_ = 0U;
@@ -328,20 +330,21 @@ static gboolean rygel_player_controller_real_next (RygelPlayerController* self)
 	guint _tmp3_ = 0U;
 	const gchar* _tmp6_ = NULL;
 	const gchar* _tmp7_ = NULL;
-	_tmp0_ = rygel_player_controller_get_track (self);
+	self = (RygelPlayerController*) base;
+	_tmp0_ = rygel_player_controller_interface_get_track ((RygelPlayerControllerInterface*) self);
 	_tmp1_ = _tmp0_;
-	_tmp2_ = rygel_player_controller_get_n_tracks (self);
+	_tmp2_ = rygel_player_controller_interface_get_n_tracks ((RygelPlayerControllerInterface*) self);
 	_tmp3_ = _tmp2_;
 	if (_tmp1_ < _tmp3_) {
 		guint _tmp4_ = 0U;
 		guint _tmp5_ = 0U;
-		_tmp4_ = rygel_player_controller_get_track (self);
+		_tmp4_ = rygel_player_controller_interface_get_track ((RygelPlayerControllerInterface*) self);
 		_tmp5_ = _tmp4_;
-		rygel_player_controller_set_track (self, _tmp5_ + 1);
+		rygel_player_controller_interface_set_track ((RygelPlayerControllerInterface*) self, _tmp5_ + 1);
 		result = TRUE;
 		return result;
 	}
-	_tmp6_ = rygel_player_controller_get_next_uri (self);
+	_tmp6_ = rygel_player_controller_interface_get_next_uri ((RygelPlayerControllerInterface*) self);
 	_tmp7_ = _tmp6_;
 	if (g_strcmp0 (_tmp7_, "") != 0) {
 		GUPnPMediaCollection* _tmp8_ = NULL;
@@ -352,12 +355,12 @@ static gboolean rygel_player_controller_real_next (RygelPlayerController* self)
 			const gchar* _tmp11_ = NULL;
 			const gchar* _tmp12_ = NULL;
 			GUPnPMediaCollection* _tmp13_ = NULL;
-			_tmp9_ = rygel_player_controller_get_next_uri (self);
+			_tmp9_ = rygel_player_controller_interface_get_next_uri ((RygelPlayerControllerInterface*) self);
 			_tmp10_ = _tmp9_;
-			_tmp11_ = rygel_player_controller_get_next_metadata (self);
+			_tmp11_ = rygel_player_controller_interface_get_next_metadata ((RygelPlayerControllerInterface*) self);
 			_tmp12_ = _tmp11_;
 			_tmp13_ = self->priv->next_collection;
-			rygel_player_controller_set_playlist_uri (self, _tmp10_, _tmp12_, _tmp13_);
+			rygel_player_controller_interface_set_playlist_uri ((RygelPlayerControllerInterface*) self, _tmp10_, _tmp12_, _tmp13_);
 		} else {
 			const gchar* _tmp14_ = NULL;
 			const gchar* _tmp15_ = NULL;
@@ -365,16 +368,16 @@ static gboolean rygel_player_controller_real_next (RygelPlayerController* self)
 			const gchar* _tmp17_ = NULL;
 			const gchar* _tmp18_ = NULL;
 			const gchar* _tmp19_ = NULL;
-			_tmp14_ = rygel_player_controller_get_next_uri (self);
+			_tmp14_ = rygel_player_controller_interface_get_next_uri ((RygelPlayerControllerInterface*) self);
 			_tmp15_ = _tmp14_;
-			_tmp16_ = rygel_player_controller_get_next_metadata (self);
+			_tmp16_ = rygel_player_controller_interface_get_next_metadata ((RygelPlayerControllerInterface*) self);
 			_tmp17_ = _tmp16_;
 			_tmp18_ = self->priv->next_mime;
 			_tmp19_ = self->priv->next_features;
-			rygel_player_controller_set_single_play_uri (self, _tmp15_, _tmp17_, _tmp18_, _tmp19_);
+			rygel_player_controller_interface_set_single_play_uri ((RygelPlayerControllerInterface*) self, _tmp15_, _tmp17_, _tmp18_, _tmp19_);
 		}
-		rygel_player_controller_set_next_uri (self, "");
-		rygel_player_controller_set_next_metadata (self, "");
+		rygel_player_controller_interface_set_next_uri ((RygelPlayerControllerInterface*) self, "");
+		rygel_player_controller_interface_set_next_metadata ((RygelPlayerControllerInterface*) self, "");
 		_g_free0 (self->priv->next_mime);
 		self->priv->next_mime = NULL;
 		_g_free0 (self->priv->next_features);
@@ -389,39 +392,30 @@ static gboolean rygel_player_controller_real_next (RygelPlayerController* self)
 }
 
 
-gboolean rygel_player_controller_next (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, FALSE);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->next (self);
-}
-
-
-static gboolean rygel_player_controller_real_previous (RygelPlayerController* self) {
+static gboolean rygel_player_controller_real_previous (RygelPlayerControllerInterface* base) {
+	RygelPlayerController * self;
 	gboolean result = FALSE;
 	guint _tmp0_ = 0U;
 	guint _tmp1_ = 0U;
 	guint _tmp2_ = 0U;
 	guint _tmp3_ = 0U;
-	_tmp0_ = rygel_player_controller_get_track (self);
+	self = (RygelPlayerController*) base;
+	_tmp0_ = rygel_player_controller_interface_get_track ((RygelPlayerControllerInterface*) self);
 	_tmp1_ = _tmp0_;
 	if (_tmp1_ <= ((guint) 1)) {
 		result = FALSE;
 		return result;
 	}
-	_tmp2_ = rygel_player_controller_get_track (self);
+	_tmp2_ = rygel_player_controller_interface_get_track ((RygelPlayerControllerInterface*) self);
 	_tmp3_ = _tmp2_;
-	rygel_player_controller_set_track (self, _tmp3_ - 1);
+	rygel_player_controller_interface_set_track ((RygelPlayerControllerInterface*) self, _tmp3_ - 1);
 	result = TRUE;
 	return result;
 }
 
 
-gboolean rygel_player_controller_previous (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, FALSE);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->previous (self);
-}
-
-
-static void rygel_player_controller_real_set_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
+static void rygel_player_controller_real_set_single_play_uri (RygelPlayerControllerInterface* base, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
+	RygelPlayerController * self;
 	guint _tmp0_ = 0U;
 	const gchar* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
@@ -430,17 +424,16 @@ static void rygel_player_controller_real_set_single_play_uri (RygelPlayerControl
 	const gchar* _tmp6_ = NULL;
 	const gchar* _tmp7_ = NULL;
 	RygelMediaPlayer* _tmp8_ = NULL;
-	RygelMediaPlayer* _tmp9_ = NULL;
+	const gchar* _tmp9_ = NULL;
 	const gchar* _tmp10_ = NULL;
-	const gchar* _tmp11_ = NULL;
-	RygelMediaPlayer* _tmp12_ = NULL;
-	RygelMediaPlayer* _tmp13_ = NULL;
+	RygelMediaPlayer* _tmp11_ = NULL;
+	const gchar* _tmp12_ = NULL;
+	const gchar* _tmp13_ = NULL;
 	const gchar* _tmp14_ = NULL;
 	const gchar* _tmp15_ = NULL;
 	const gchar* _tmp16_ = NULL;
 	const gchar* _tmp17_ = NULL;
-	const gchar* _tmp18_ = NULL;
-	const gchar* _tmp19_ = NULL;
+	self = (RygelPlayerController*) base;
 	g_return_if_fail (uri != NULL);
 	g_return_if_fail (metadata != NULL);
 	_tmp0_ = self->priv->timeout_id;
@@ -453,53 +446,46 @@ static void rygel_player_controller_real_set_single_play_uri (RygelPlayerControl
 	_tmp2_ = metadata;
 	_tmp3_ = rygel_player_controller_unescape (self, _tmp2_);
 	_tmp4_ = _tmp3_;
-	rygel_player_controller_set_metadata (self, _tmp4_);
+	rygel_player_controller_interface_set_metadata ((RygelPlayerControllerInterface*) self, _tmp4_);
 	_g_free0 (_tmp4_);
 	_tmp5_ = uri;
-	rygel_player_controller_set_uri (self, _tmp5_);
+	rygel_player_controller_interface_set_uri ((RygelPlayerControllerInterface*) self, _tmp5_);
 	_tmp7_ = mime;
 	_tmp6_ = _tmp7_;
 	if (_tmp6_ == NULL) {
 		_tmp6_ = "";
 	}
-	_tmp8_ = rygel_player_controller_get_player (self);
-	_tmp9_ = _tmp8_;
-	rygel_media_player_set_mime_type (_tmp9_, _tmp6_);
-	_tmp11_ = features;
-	_tmp10_ = _tmp11_;
-	if (_tmp10_ == NULL) {
-		_tmp10_ = "*";
+	_tmp8_ = self->priv->_player;
+	rygel_media_player_set_mime_type (_tmp8_, _tmp6_);
+	_tmp10_ = features;
+	_tmp9_ = _tmp10_;
+	if (_tmp9_ == NULL) {
+		_tmp9_ = "*";
 	}
-	_tmp12_ = rygel_player_controller_get_player (self);
+	_tmp11_ = self->priv->_player;
+	rygel_media_player_set_content_features (_tmp11_, _tmp9_);
+	_tmp12_ = rygel_player_controller_interface_get_metadata ((RygelPlayerControllerInterface*) self);
 	_tmp13_ = _tmp12_;
-	rygel_media_player_set_content_features (_tmp13_, _tmp10_);
-	_tmp14_ = rygel_player_controller_get_metadata (self);
+	rygel_player_controller_interface_set_track_metadata ((RygelPlayerControllerInterface*) self, _tmp13_);
+	_tmp14_ = rygel_player_controller_interface_get_uri ((RygelPlayerControllerInterface*) self);
 	_tmp15_ = _tmp14_;
-	rygel_player_controller_set_track_metadata (self, _tmp15_);
-	_tmp16_ = rygel_player_controller_get_uri (self);
-	_tmp17_ = _tmp16_;
-	rygel_player_controller_set_track_uri (self, _tmp17_);
+	rygel_player_controller_interface_set_track_uri ((RygelPlayerControllerInterface*) self, _tmp15_);
 	__g_list_free__g_object_unref0_0 (self->priv->playlist);
 	self->priv->playlist = NULL;
-	_tmp18_ = rygel_player_controller_get_uri (self);
-	_tmp19_ = _tmp18_;
-	if (g_strcmp0 (_tmp19_, "") == 0) {
-		rygel_player_controller_set_n_tracks (self, (guint) 0);
-		rygel_player_controller_set_track (self, (guint) 0);
+	_tmp16_ = rygel_player_controller_interface_get_uri ((RygelPlayerControllerInterface*) self);
+	_tmp17_ = _tmp16_;
+	if (g_strcmp0 (_tmp17_, "") == 0) {
+		rygel_player_controller_interface_set_n_tracks ((RygelPlayerControllerInterface*) self, (guint) 0);
+		rygel_player_controller_interface_set_track ((RygelPlayerControllerInterface*) self, (guint) 0);
 	} else {
-		rygel_player_controller_set_n_tracks (self, (guint) 1);
-		rygel_player_controller_set_track (self, (guint) 1);
+		rygel_player_controller_interface_set_n_tracks ((RygelPlayerControllerInterface*) self, (guint) 1);
+		rygel_player_controller_interface_set_track ((RygelPlayerControllerInterface*) self, (guint) 1);
 	}
 }
 
 
-void rygel_player_controller_set_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_single_play_uri (self, uri, metadata, mime, features);
-}
-
-
-static void rygel_player_controller_real_set_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
+static void rygel_player_controller_real_set_playlist_uri (RygelPlayerControllerInterface* base, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
+	RygelPlayerController * self;
 	guint _tmp0_ = 0U;
 	const gchar* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
@@ -513,6 +499,7 @@ static void rygel_player_controller_real_set_playlist_uri (RygelPlayerController
 	guint _tmp10_ = 0U;
 	guint _tmp11_ = 0U;
 	gboolean _tmp12_ = FALSE;
+	self = (RygelPlayerController*) base;
 	g_return_if_fail (uri != NULL);
 	g_return_if_fail (metadata != NULL);
 	g_return_if_fail (collection != NULL);
@@ -526,18 +513,18 @@ static void rygel_player_controller_real_set_playlist_uri (RygelPlayerController
 	_tmp2_ = metadata;
 	_tmp3_ = rygel_player_controller_unescape (self, _tmp2_);
 	_tmp4_ = _tmp3_;
-	rygel_player_controller_set_metadata (self, _tmp4_);
+	rygel_player_controller_interface_set_metadata ((RygelPlayerControllerInterface*) self, _tmp4_);
 	_g_free0 (_tmp4_);
 	_tmp5_ = uri;
-	rygel_player_controller_set_uri (self, _tmp5_);
+	rygel_player_controller_interface_set_uri ((RygelPlayerControllerInterface*) self, _tmp5_);
 	_tmp6_ = collection;
 	_tmp7_ = gupnp_media_collection_get_items (_tmp6_);
 	__g_list_free__g_object_unref0_0 (self->priv->playlist);
 	self->priv->playlist = _tmp7_;
 	_tmp8_ = self->priv->playlist;
 	_tmp9_ = g_list_length (_tmp8_);
-	rygel_player_controller_set_n_tracks (self, _tmp9_);
-	_tmp10_ = rygel_player_controller_get_track (self);
+	rygel_player_controller_interface_set_n_tracks ((RygelPlayerControllerInterface*) self, _tmp9_);
+	_tmp10_ = rygel_player_controller_interface_get_track ((RygelPlayerControllerInterface*) self);
 	_tmp11_ = _tmp10_;
 	need_notify = _tmp11_ != ((guint) 1);
 	self->priv->_track = (guint) 1;
@@ -549,25 +536,21 @@ static void rygel_player_controller_real_set_playlist_uri (RygelPlayerController
 }
 
 
-void rygel_player_controller_set_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_playlist_uri (self, uri, metadata, collection);
-}
-
-
-static void rygel_player_controller_real_set_next_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
+static void rygel_player_controller_real_set_next_single_play_uri (RygelPlayerControllerInterface* base, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
+	RygelPlayerController * self;
 	const gchar* _tmp0_ = NULL;
 	const gchar* _tmp1_ = NULL;
 	const gchar* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
 	const gchar* _tmp4_ = NULL;
 	gchar* _tmp5_ = NULL;
+	self = (RygelPlayerController*) base;
 	g_return_if_fail (uri != NULL);
 	g_return_if_fail (metadata != NULL);
 	_tmp0_ = uri;
-	rygel_player_controller_set_next_uri (self, _tmp0_);
+	rygel_player_controller_interface_set_next_uri ((RygelPlayerControllerInterface*) self, _tmp0_);
 	_tmp1_ = metadata;
-	rygel_player_controller_set_next_metadata (self, _tmp1_);
+	rygel_player_controller_interface_set_next_metadata ((RygelPlayerControllerInterface*) self, _tmp1_);
 	_tmp2_ = mime;
 	_tmp3_ = g_strdup (_tmp2_);
 	_g_free0 (self->priv->next_mime);
@@ -581,29 +564,25 @@ static void rygel_player_controller_real_set_next_single_play_uri (RygelPlayerCo
 }
 
 
-void rygel_player_controller_set_next_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_next_single_play_uri (self, uri, metadata, mime, features);
-}
-
-
 static gpointer _g_object_ref0 (gpointer self) {
 	return self ? g_object_ref (self) : NULL;
 }
 
 
-static void rygel_player_controller_real_set_next_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
+static void rygel_player_controller_real_set_next_playlist_uri (RygelPlayerControllerInterface* base, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
+	RygelPlayerController * self;
 	const gchar* _tmp0_ = NULL;
 	const gchar* _tmp1_ = NULL;
 	GUPnPMediaCollection* _tmp2_ = NULL;
 	GUPnPMediaCollection* _tmp3_ = NULL;
+	self = (RygelPlayerController*) base;
 	g_return_if_fail (uri != NULL);
 	g_return_if_fail (metadata != NULL);
 	g_return_if_fail (collection != NULL);
 	_tmp0_ = uri;
-	rygel_player_controller_set_next_uri (self, _tmp0_);
+	rygel_player_controller_interface_set_next_uri ((RygelPlayerControllerInterface*) self, _tmp0_);
 	_tmp1_ = metadata;
-	rygel_player_controller_set_next_metadata (self, _tmp1_);
+	rygel_player_controller_interface_set_next_metadata ((RygelPlayerControllerInterface*) self, _tmp1_);
 	_g_free0 (self->priv->next_mime);
 	self->priv->next_mime = NULL;
 	_g_free0 (self->priv->next_features);
@@ -615,16 +594,10 @@ static void rygel_player_controller_real_set_next_playlist_uri (RygelPlayerContr
 }
 
 
-void rygel_player_controller_set_next_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_next_playlist_uri (self, uri, metadata, collection);
-}
-
-
 static gboolean ___lambda4_ (RygelPlayerController* self) {
 	gboolean result = FALSE;
 	gboolean _tmp0_ = FALSE;
-	_tmp0_ = rygel_player_controller_next (self);
+	_tmp0_ = rygel_player_controller_interface_next ((RygelPlayerControllerInterface*) self);
 	if (!_tmp0_) {
 		rygel_player_controller_reset (self);
 	}
@@ -643,33 +616,31 @@ static gboolean ____lambda4__gsource_func (gpointer self) {
 static void rygel_player_controller_notify_state_cb (RygelPlayerController* self, GObject* player, GParamSpec* p) {
 	gchar* state = NULL;
 	RygelMediaPlayer* _tmp0_ = NULL;
-	RygelMediaPlayer* _tmp1_ = NULL;
+	gchar* _tmp1_ = NULL;
 	gchar* _tmp2_ = NULL;
-	gchar* _tmp3_ = NULL;
-	const gchar* _tmp4_ = NULL;
+	const gchar* _tmp3_ = NULL;
 	g_return_if_fail (self != NULL);
 	g_return_if_fail (player != NULL);
 	g_return_if_fail (p != NULL);
-	_tmp0_ = rygel_player_controller_get_player (self);
-	_tmp1_ = _tmp0_;
-	_tmp2_ = rygel_media_player_get_playback_state (_tmp1_);
-	_tmp3_ = _tmp2_;
-	state = _tmp3_;
-	_tmp4_ = state;
-	if (g_strcmp0 (_tmp4_, "EOS") == 0) {
+	_tmp0_ = self->priv->_player;
+	_tmp1_ = rygel_media_player_get_playback_state (_tmp0_);
+	_tmp2_ = _tmp1_;
+	state = _tmp2_;
+	_tmp3_ = state;
+	if (g_strcmp0 (_tmp3_, "EOS") == 0) {
 		g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ____lambda4__gsource_func, g_object_ref (self), g_object_unref);
 	} else {
+		const gchar* _tmp4_ = NULL;
 		const gchar* _tmp5_ = NULL;
-		const gchar* _tmp6_ = NULL;
-		_tmp5_ = self->priv->_playback_state;
-		_tmp6_ = state;
-		if (g_strcmp0 (_tmp5_, _tmp6_) != 0) {
-			const gchar* _tmp7_ = NULL;
-			gchar* _tmp8_ = NULL;
-			_tmp7_ = state;
-			_tmp8_ = g_strdup (_tmp7_);
+		_tmp4_ = self->priv->_playback_state;
+		_tmp5_ = state;
+		if (g_strcmp0 (_tmp4_, _tmp5_) != 0) {
+			const gchar* _tmp6_ = NULL;
+			gchar* _tmp7_ = NULL;
+			_tmp6_ = state;
+			_tmp7_ = g_strdup (_tmp6_);
 			_g_free0 (self->priv->_playback_state);
-			self->priv->_playback_state = _tmp8_;
+			self->priv->_playback_state = _tmp7_;
 			g_object_notify ((GObject*) self, "playback-state");
 		}
 	}
@@ -708,64 +679,62 @@ static void rygel_player_controller_apply_track (RygelPlayerController* self) {
 		GUPnPDIDLLiteResource* res = NULL;
 		GUPnPDIDLLiteItem* _tmp7_ = NULL;
 		const gchar* _tmp8_ = NULL;
-		const gchar* _tmp9_ = NULL;
-		GUPnPDIDLLiteResource* _tmp10_ = NULL;
-		GUPnPDIDLLiteItem* _tmp11_ = NULL;
+		GUPnPDIDLLiteResource* _tmp9_ = NULL;
+		GUPnPDIDLLiteItem* _tmp10_ = NULL;
+		gchar* _tmp11_ = NULL;
 		gchar* _tmp12_ = NULL;
 		gchar* _tmp13_ = NULL;
 		gchar* _tmp14_ = NULL;
-		gchar* _tmp15_ = NULL;
-		GUPnPDIDLLiteResource* _tmp16_ = NULL;
-		const gchar* _tmp17_ = NULL;
-		gboolean _tmp18_ = FALSE;
-		GUPnPDIDLLiteItem* _tmp19_ = NULL;
+		GUPnPDIDLLiteResource* _tmp15_ = NULL;
+		const gchar* _tmp16_ = NULL;
+		gboolean _tmp17_ = FALSE;
+		GUPnPDIDLLiteItem* _tmp18_ = NULL;
+		const gchar* _tmp19_ = NULL;
 		const gchar* _tmp20_ = NULL;
-		const gchar* _tmp21_ = NULL;
-		gboolean _tmp22_ = FALSE;
+		gboolean _tmp21_ = FALSE;
 		_tmp1_ = self->priv->playlist;
-		_tmp2_ = rygel_player_controller_get_track (self);
+		_tmp2_ = rygel_player_controller_interface_get_track ((RygelPlayerControllerInterface*) self);
 		_tmp3_ = _tmp2_;
 		_tmp4_ = g_list_nth (_tmp1_, _tmp3_ - 1);
 		_tmp5_ = _tmp4_->data;
 		_tmp6_ = _g_object_ref0 ((GUPnPDIDLLiteItem*) _tmp5_);
 		item = _tmp6_;
 		_tmp7_ = item;
-		_tmp8_ = rygel_player_controller_get_protocol_info (self);
-		_tmp9_ = _tmp8_;
-		_tmp10_ = gupnp_didl_lite_object_get_compat_resource ((GUPnPDIDLLiteObject*) _tmp7_, _tmp9_, TRUE);
-		res = _tmp10_;
-		_tmp11_ = item;
-		_tmp12_ = gupnp_didl_lite_object_get_xml_string ((GUPnPDIDLLiteObject*) _tmp11_);
-		_tmp13_ = _tmp12_;
-		_tmp14_ = g_strdup_printf (RYGEL_PLAYER_CONTROLLER_DIDL_FRAME_TEMPLATE, _tmp13_);
-		_tmp15_ = _tmp14_;
-		rygel_player_controller_set_track_metadata (self, _tmp15_);
-		_g_free0 (_tmp15_);
-		_g_free0 (_tmp13_);
-		_tmp16_ = res;
-		_tmp17_ = gupnp_didl_lite_resource_get_uri (_tmp16_);
-		rygel_player_controller_set_track_uri (self, _tmp17_);
-		_tmp19_ = item;
-		_tmp20_ = gupnp_didl_lite_object_get_upnp_class ((GUPnPDIDLLiteObject*) _tmp19_);
-		_tmp21_ = _tmp20_;
-		_tmp22_ = g_str_has_prefix (_tmp21_, "object.item.image");
-		if (_tmp22_) {
+		_tmp8_ = self->priv->_protocol_info;
+		_tmp9_ = gupnp_didl_lite_object_get_compat_resource ((GUPnPDIDLLiteObject*) _tmp7_, _tmp8_, TRUE);
+		res = _tmp9_;
+		_tmp10_ = item;
+		_tmp11_ = gupnp_didl_lite_object_get_xml_string ((GUPnPDIDLLiteObject*) _tmp10_);
+		_tmp12_ = _tmp11_;
+		_tmp13_ = g_strdup_printf (RYGEL_PLAYER_CONTROLLER_DIDL_FRAME_TEMPLATE, _tmp12_);
+		_tmp14_ = _tmp13_;
+		rygel_player_controller_interface_set_track_metadata ((RygelPlayerControllerInterface*) self, _tmp14_);
+		_g_free0 (_tmp14_);
+		_g_free0 (_tmp12_);
+		_tmp15_ = res;
+		_tmp16_ = gupnp_didl_lite_resource_get_uri (_tmp15_);
+		rygel_player_controller_interface_set_track_uri ((RygelPlayerControllerInterface*) self, _tmp16_);
+		_tmp18_ = item;
+		_tmp19_ = gupnp_didl_lite_object_get_upnp_class ((GUPnPDIDLLiteObject*) _tmp18_);
+		_tmp20_ = _tmp19_;
+		_tmp21_ = g_str_has_prefix (_tmp20_, "object.item.image");
+		if (_tmp21_) {
+			const gchar* _tmp22_ = NULL;
 			const gchar* _tmp23_ = NULL;
-			const gchar* _tmp24_ = NULL;
-			_tmp23_ = rygel_player_controller_get_playback_state (self);
-			_tmp24_ = _tmp23_;
-			_tmp18_ = g_strcmp0 (_tmp24_, "STOPPED") != 0;
+			_tmp22_ = rygel_player_controller_interface_get_playback_state ((RygelPlayerControllerInterface*) self);
+			_tmp23_ = _tmp22_;
+			_tmp17_ = g_strcmp0 (_tmp23_, "STOPPED") != 0;
 		} else {
-			_tmp18_ = FALSE;
+			_tmp17_ = FALSE;
 		}
-		if (_tmp18_) {
-			GUPnPDIDLLiteItem* _tmp25_ = NULL;
+		if (_tmp17_) {
+			GUPnPDIDLLiteItem* _tmp24_ = NULL;
+			glong _tmp25_ = 0L;
 			glong _tmp26_ = 0L;
-			glong _tmp27_ = 0L;
-			_tmp25_ = item;
-			_tmp26_ = gupnp_didl_lite_item_get_lifetime (_tmp25_);
-			_tmp27_ = _tmp26_;
-			rygel_player_controller_setup_image_timeouts (self, _tmp27_);
+			_tmp24_ = item;
+			_tmp25_ = gupnp_didl_lite_item_get_lifetime (_tmp24_);
+			_tmp26_ = _tmp25_;
+			rygel_player_controller_setup_image_timeouts (self, _tmp26_);
 		}
 		_g_object_unref0 (res);
 		_g_object_unref0 (item);
@@ -775,8 +744,8 @@ static void rygel_player_controller_apply_track (RygelPlayerController* self) {
 
 static void rygel_player_controller_reset (RygelPlayerController* self) {
 	g_return_if_fail (self != NULL);
-	rygel_player_controller_set_playback_state (self, "STOPPED");
-	rygel_player_controller_set_track (self, (guint) 1);
+	rygel_player_controller_interface_set_playback_state ((RygelPlayerControllerInterface*) self, "STOPPED");
+	rygel_player_controller_interface_set_track ((RygelPlayerControllerInterface*) self, (guint) 1);
 }
 
 
@@ -784,7 +753,7 @@ static gboolean __lambda5_ (RygelPlayerController* self) {
 	gboolean result = FALSE;
 	gboolean _tmp0_ = FALSE;
 	self->priv->timeout_id = (guint) 0;
-	_tmp0_ = rygel_player_controller_next (self);
+	_tmp0_ = rygel_player_controller_interface_next ((RygelPlayerControllerInterface*) self);
 	if (!_tmp0_) {
 		rygel_player_controller_reset (self);
 	}
@@ -996,16 +965,9 @@ static gchar* rygel_player_controller_unescape (RygelPlayerController* self, con
 
 
 static RygelMediaPlayer* rygel_player_controller_get_player (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, NULL);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_player (self);
-}
-
-
-static RygelMediaPlayer* rygel_player_controller_real_get_player (RygelPlayerController* base) {
 	RygelMediaPlayer* result;
-	RygelPlayerController* self;
 	RygelMediaPlayer* _tmp0_ = NULL;
-	self = base;
+	g_return_val_if_fail (self != NULL, NULL);
 	_tmp0_ = self->priv->_player;
 	result = _tmp0_;
 	return result;
@@ -1013,16 +975,9 @@ static RygelMediaPlayer* rygel_player_controller_real_get_player (RygelPlayerCon
 
 
 static void rygel_player_controller_set_player (RygelPlayerController* self, RygelMediaPlayer* value) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_player (self, value);
-}
-
-
-static void rygel_player_controller_real_set_player (RygelPlayerController* base, RygelMediaPlayer* value) {
-	RygelPlayerController* self;
 	RygelMediaPlayer* _tmp0_ = NULL;
 	RygelMediaPlayer* _tmp1_ = NULL;
-	self = base;
+	g_return_if_fail (self != NULL);
 	_tmp0_ = value;
 	_tmp1_ = _g_object_ref0 (_tmp0_);
 	_g_object_unref0 (self->priv->_player);
@@ -1032,16 +987,9 @@ static void rygel_player_controller_real_set_player (RygelPlayerController* base
 
 
 static const gchar* rygel_player_controller_get_protocol_info (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, NULL);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_protocol_info (self);
-}
-
-
-static const gchar* rygel_player_controller_real_get_protocol_info (RygelPlayerController* base) {
 	const gchar* result;
-	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
-	self = base;
+	g_return_val_if_fail (self != NULL, NULL);
 	_tmp0_ = self->priv->_protocol_info;
 	result = _tmp0_;
 	return result;
@@ -1049,16 +997,9 @@ static const gchar* rygel_player_controller_real_get_protocol_info (RygelPlayerC
 
 
 static void rygel_player_controller_set_protocol_info (RygelPlayerController* self, const gchar* value) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_protocol_info (self, value);
-}
-
-
-static void rygel_player_controller_real_set_protocol_info (RygelPlayerController* base, const gchar* value) {
-	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
 	gchar* _tmp1_ = NULL;
-	self = base;
+	g_return_if_fail (self != NULL);
 	_tmp0_ = value;
 	_tmp1_ = g_strdup (_tmp0_);
 	_g_free0 (self->priv->_protocol_info);
@@ -1067,70 +1008,44 @@ static void rygel_player_controller_real_set_protocol_info (RygelPlayerControlle
 }
 
 
-const gchar* rygel_player_controller_get_playback_state (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, NULL);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_playback_state (self);
-}
-
-
-static const gchar* rygel_player_controller_real_get_playback_state (RygelPlayerController* base) {
+static const gchar* rygel_player_controller_real_get_playback_state (RygelPlayerControllerInterface* base) {
 	const gchar* result;
 	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = self->priv->_playback_state;
 	result = _tmp0_;
 	return result;
 }
 
 
-void rygel_player_controller_set_playback_state (RygelPlayerController* self, const gchar* value) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_playback_state (self, value);
-}
-
-
-static void rygel_player_controller_real_set_playback_state (RygelPlayerController* base, const gchar* value) {
+static void rygel_player_controller_real_set_playback_state (RygelPlayerControllerInterface* base, const gchar* value) {
 	RygelPlayerController* self;
 	RygelMediaPlayer* _tmp0_ = NULL;
-	RygelMediaPlayer* _tmp1_ = NULL;
-	const gchar* _tmp2_ = NULL;
-	self = base;
-	_tmp0_ = rygel_player_controller_get_player (self);
-	_tmp1_ = _tmp0_;
-	_tmp2_ = value;
-	rygel_media_player_set_playback_state (_tmp1_, _tmp2_);
-}
-
-
-guint rygel_player_controller_get_n_tracks (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, 0U);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_n_tracks (self);
+	const gchar* _tmp1_ = NULL;
+	self = (RygelPlayerController*) base;
+	_tmp0_ = self->priv->_player;
+	_tmp1_ = value;
+	rygel_media_player_set_playback_state (_tmp0_, _tmp1_);
 }
 
 
-static guint rygel_player_controller_real_get_n_tracks (RygelPlayerController* base) {
+static guint rygel_player_controller_real_get_n_tracks (RygelPlayerControllerInterface* base) {
 	guint result;
 	RygelPlayerController* self;
 	guint _tmp0_ = 0U;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = self->priv->_n_tracks;
 	result = _tmp0_;
 	return result;
 }
 
 
-static void rygel_player_controller_set_n_tracks (RygelPlayerController* self, guint value) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_n_tracks (self, value);
-}
-
-
-static void rygel_player_controller_real_set_n_tracks (RygelPlayerController* base, guint value) {
+static void rygel_player_controller_real_set_n_tracks (RygelPlayerControllerInterface* base, guint value) {
 	RygelPlayerController* self;
 	guint _tmp0_ = 0U;
 	guint _tmp1_ = 0U;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = value;
 	_tmp1_ = self->priv->_n_tracks;
 	if (_tmp0_ != _tmp1_) {
@@ -1142,34 +1057,22 @@ static void rygel_player_controller_real_set_n_tracks (RygelPlayerController* ba
 }
 
 
-guint rygel_player_controller_get_track (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, 0U);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_track (self);
-}
-
-
-static guint rygel_player_controller_real_get_track (RygelPlayerController* base) {
+static guint rygel_player_controller_real_get_track (RygelPlayerControllerInterface* base) {
 	guint result;
 	RygelPlayerController* self;
 	guint _tmp0_ = 0U;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = self->priv->_track;
 	result = _tmp0_;
 	return result;
 }
 
 
-void rygel_player_controller_set_track (RygelPlayerController* self, guint value) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_track (self, value);
-}
-
-
-static void rygel_player_controller_real_set_track (RygelPlayerController* base, guint value) {
+static void rygel_player_controller_real_set_track (RygelPlayerControllerInterface* base, guint value) {
 	RygelPlayerController* self;
 	guint _tmp0_ = 0U;
 	guint _tmp1_ = 0U;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = value;
 	_tmp1_ = self->priv->_track;
 	if (_tmp0_ != _tmp1_) {
@@ -1182,34 +1085,22 @@ static void rygel_player_controller_real_set_track (RygelPlayerController* base,
 }
 
 
-const gchar* rygel_player_controller_get_uri (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, NULL);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_uri (self);
-}
-
-
-static const gchar* rygel_player_controller_real_get_uri (RygelPlayerController* base) {
+static const gchar* rygel_player_controller_real_get_uri (RygelPlayerControllerInterface* base) {
 	const gchar* result;
 	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = self->priv->_uri;
 	result = _tmp0_;
 	return result;
 }
 
 
-static void rygel_player_controller_set_uri (RygelPlayerController* self, const gchar* value) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_uri (self, value);
-}
-
-
-static void rygel_player_controller_real_set_uri (RygelPlayerController* base, const gchar* value) {
+static void rygel_player_controller_real_set_uri (RygelPlayerControllerInterface* base, const gchar* value) {
 	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
 	gchar* _tmp1_ = NULL;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = value;
 	_tmp1_ = g_strdup (_tmp0_);
 	_g_free0 (self->priv->_uri);
@@ -1218,34 +1109,22 @@ static void rygel_player_controller_real_set_uri (RygelPlayerController* base, c
 }
 
 
-const gchar* rygel_player_controller_get_metadata (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, NULL);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_metadata (self);
-}
-
-
-static const gchar* rygel_player_controller_real_get_metadata (RygelPlayerController* base) {
+static const gchar* rygel_player_controller_real_get_metadata (RygelPlayerControllerInterface* base) {
 	const gchar* result;
 	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = self->priv->_metadata;
 	result = _tmp0_;
 	return result;
 }
 
 
-static void rygel_player_controller_set_metadata (RygelPlayerController* self, const gchar* value) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_metadata (self, value);
-}
-
-
-static void rygel_player_controller_real_set_metadata (RygelPlayerController* base, const gchar* value) {
+static void rygel_player_controller_real_set_metadata (RygelPlayerControllerInterface* base, const gchar* value) {
 	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
 	gchar* _tmp1_ = NULL;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = value;
 	_tmp1_ = g_strdup (_tmp0_);
 	_g_free0 (self->priv->_metadata);
@@ -1254,176 +1133,128 @@ static void rygel_player_controller_real_set_metadata (RygelPlayerController* ba
 }
 
 
-gchar* rygel_player_controller_get_track_uri (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, NULL);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_track_uri (self);
-}
-
-
-static gchar* rygel_player_controller_real_get_track_uri (RygelPlayerController* base) {
+static gchar* rygel_player_controller_real_get_track_uri (RygelPlayerControllerInterface* base) {
 	gchar* result;
 	RygelPlayerController* self;
 	RygelMediaPlayer* _tmp0_ = NULL;
-	RygelMediaPlayer* _tmp1_ = NULL;
+	gchar* _tmp1_ = NULL;
 	gchar* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
-	gchar* _tmp4_ = NULL;
-	gboolean _tmp5_ = FALSE;
-	self = base;
-	_tmp0_ = rygel_player_controller_get_player (self);
-	_tmp1_ = _tmp0_;
-	_tmp2_ = rygel_media_player_get_uri (_tmp1_);
+	gboolean _tmp4_ = FALSE;
+	self = (RygelPlayerController*) base;
+	_tmp0_ = self->priv->_player;
+	_tmp1_ = rygel_media_player_get_uri (_tmp0_);
+	_tmp2_ = _tmp1_;
 	_tmp3_ = _tmp2_;
-	_tmp4_ = _tmp3_;
-	_tmp5_ = _tmp4_ != NULL;
-	_g_free0 (_tmp4_);
-	if (_tmp5_) {
-		RygelMediaPlayer* _tmp6_ = NULL;
-		RygelMediaPlayer* _tmp7_ = NULL;
+	_tmp4_ = _tmp3_ != NULL;
+	_g_free0 (_tmp3_);
+	if (_tmp4_) {
+		RygelMediaPlayer* _tmp5_ = NULL;
+		gchar* _tmp6_ = NULL;
+		gchar* _tmp7_ = NULL;
 		gchar* _tmp8_ = NULL;
 		gchar* _tmp9_ = NULL;
 		gchar* _tmp10_ = NULL;
-		gchar* _tmp11_ = NULL;
-		gchar* _tmp12_ = NULL;
-		_tmp6_ = rygel_player_controller_get_player (self);
+		_tmp5_ = self->priv->_player;
+		_tmp6_ = rygel_media_player_get_uri (_tmp5_);
 		_tmp7_ = _tmp6_;
-		_tmp8_ = rygel_media_player_get_uri (_tmp7_);
-		_tmp9_ = _tmp8_;
+		_tmp8_ = _tmp7_;
+		_tmp9_ = g_markup_escape_text (_tmp8_, (gssize) (-1));
 		_tmp10_ = _tmp9_;
-		_tmp11_ = g_markup_escape_text (_tmp10_, (gssize) (-1));
-		_tmp12_ = _tmp11_;
-		_g_free0 (_tmp10_);
-		result = _tmp12_;
+		_g_free0 (_tmp8_);
+		result = _tmp10_;
 		return result;
 	} else {
-		gchar* _tmp13_ = NULL;
-		_tmp13_ = g_strdup ("");
-		result = _tmp13_;
+		gchar* _tmp11_ = NULL;
+		_tmp11_ = g_strdup ("");
+		result = _tmp11_;
 		return result;
 	}
 }
 
 
-static void rygel_player_controller_set_track_uri (RygelPlayerController* self, const gchar* value) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_track_uri (self, value);
-}
-
-
-static void rygel_player_controller_real_set_track_uri (RygelPlayerController* base, const gchar* value) {
+static void rygel_player_controller_real_set_track_uri (RygelPlayerControllerInterface* base, const gchar* value) {
 	RygelPlayerController* self;
 	RygelMediaPlayer* _tmp0_ = NULL;
-	RygelMediaPlayer* _tmp1_ = NULL;
-	const gchar* _tmp2_ = NULL;
-	self = base;
-	_tmp0_ = rygel_player_controller_get_player (self);
-	_tmp1_ = _tmp0_;
-	_tmp2_ = value;
-	rygel_media_player_set_uri (_tmp1_, _tmp2_);
-}
-
-
-gchar* rygel_player_controller_get_track_metadata (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, NULL);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_track_metadata (self);
+	const gchar* _tmp1_ = NULL;
+	self = (RygelPlayerController*) base;
+	_tmp0_ = self->priv->_player;
+	_tmp1_ = value;
+	rygel_media_player_set_uri (_tmp0_, _tmp1_);
 }
 
 
-static gchar* rygel_player_controller_real_get_track_metadata (RygelPlayerController* base) {
+static gchar* rygel_player_controller_real_get_track_metadata (RygelPlayerControllerInterface* base) {
 	gchar* result;
 	RygelPlayerController* self;
 	gchar* _tmp0_ = NULL;
 	RygelMediaPlayer* _tmp1_ = NULL;
-	RygelMediaPlayer* _tmp2_ = NULL;
+	gchar* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
-	gchar* _tmp4_ = NULL;
-	gchar* _tmp6_ = NULL;
-	self = base;
-	_tmp1_ = rygel_player_controller_get_player (self);
-	_tmp2_ = _tmp1_;
-	_tmp3_ = rygel_media_player_get_metadata (_tmp2_);
-	_tmp4_ = _tmp3_;
-	_tmp0_ = _tmp4_;
+	gchar* _tmp5_ = NULL;
+	self = (RygelPlayerController*) base;
+	_tmp1_ = self->priv->_player;
+	_tmp2_ = rygel_media_player_get_metadata (_tmp1_);
+	_tmp3_ = _tmp2_;
+	_tmp0_ = _tmp3_;
 	if (_tmp0_ == NULL) {
-		gchar* _tmp5_ = NULL;
-		_tmp5_ = g_strdup ("");
+		gchar* _tmp4_ = NULL;
+		_tmp4_ = g_strdup ("");
 		_g_free0 (_tmp0_);
-		_tmp0_ = _tmp5_;
+		_tmp0_ = _tmp4_;
 	}
-	_tmp6_ = _tmp0_;
+	_tmp5_ = _tmp0_;
 	_tmp0_ = NULL;
-	result = _tmp6_;
+	result = _tmp5_;
 	_g_free0 (_tmp0_);
 	return result;
 }
 
 
-static void rygel_player_controller_set_track_metadata (RygelPlayerController* self, const gchar* value) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_track_metadata (self, value);
-}
-
-
-static void rygel_player_controller_real_set_track_metadata (RygelPlayerController* base, const gchar* value) {
+static void rygel_player_controller_real_set_track_metadata (RygelPlayerControllerInterface* base, const gchar* value) {
 	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
 	gboolean _tmp1_ = FALSE;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = value;
 	_tmp1_ = g_str_has_prefix (_tmp0_, "&lt;");
 	if (_tmp1_) {
 		RygelMediaPlayer* _tmp2_ = NULL;
-		RygelMediaPlayer* _tmp3_ = NULL;
-		const gchar* _tmp4_ = NULL;
+		const gchar* _tmp3_ = NULL;
+		gchar* _tmp4_ = NULL;
 		gchar* _tmp5_ = NULL;
-		gchar* _tmp6_ = NULL;
-		_tmp2_ = rygel_player_controller_get_player (self);
-		_tmp3_ = _tmp2_;
-		_tmp4_ = value;
-		_tmp5_ = rygel_player_controller_unescape (self, _tmp4_);
-		_tmp6_ = _tmp5_;
-		rygel_media_player_set_metadata (_tmp3_, _tmp6_);
-		_g_free0 (_tmp6_);
+		_tmp2_ = self->priv->_player;
+		_tmp3_ = value;
+		_tmp4_ = rygel_player_controller_unescape (self, _tmp3_);
+		_tmp5_ = _tmp4_;
+		rygel_media_player_set_metadata (_tmp2_, _tmp5_);
+		_g_free0 (_tmp5_);
 	} else {
-		RygelMediaPlayer* _tmp7_ = NULL;
-		RygelMediaPlayer* _tmp8_ = NULL;
-		const gchar* _tmp9_ = NULL;
-		_tmp7_ = rygel_player_controller_get_player (self);
-		_tmp8_ = _tmp7_;
-		_tmp9_ = value;
-		rygel_media_player_set_metadata (_tmp8_, _tmp9_);
+		RygelMediaPlayer* _tmp6_ = NULL;
+		const gchar* _tmp7_ = NULL;
+		_tmp6_ = self->priv->_player;
+		_tmp7_ = value;
+		rygel_media_player_set_metadata (_tmp6_, _tmp7_);
 	}
 }
 
 
-const gchar* rygel_player_controller_get_next_uri (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, NULL);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_next_uri (self);
-}
-
-
-static const gchar* rygel_player_controller_real_get_next_uri (RygelPlayerController* base) {
+static const gchar* rygel_player_controller_real_get_next_uri (RygelPlayerControllerInterface* base) {
 	const gchar* result;
 	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = self->priv->_next_uri;
 	result = _tmp0_;
 	return result;
 }
 
 
-static void rygel_player_controller_set_next_uri (RygelPlayerController* self, const gchar* value) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_next_uri (self, value);
-}
-
-
-static void rygel_player_controller_real_set_next_uri (RygelPlayerController* base, const gchar* value) {
+static void rygel_player_controller_real_set_next_uri (RygelPlayerControllerInterface* base, const gchar* value) {
 	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
 	gchar* _tmp1_ = NULL;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = value;
 	_tmp1_ = g_strdup (_tmp0_);
 	_g_free0 (self->priv->_next_uri);
@@ -1432,34 +1263,22 @@ static void rygel_player_controller_real_set_next_uri (RygelPlayerController* ba
 }
 
 
-const gchar* rygel_player_controller_get_next_metadata (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, NULL);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_next_metadata (self);
-}
-
-
-static const gchar* rygel_player_controller_real_get_next_metadata (RygelPlayerController* base) {
+static const gchar* rygel_player_controller_real_get_next_metadata (RygelPlayerControllerInterface* base) {
 	const gchar* result;
 	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = self->priv->_next_metadata;
 	result = _tmp0_;
 	return result;
 }
 
 
-static void rygel_player_controller_set_next_metadata (RygelPlayerController* self, const gchar* value) {
-	g_return_if_fail (self != NULL);
-	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_next_metadata (self, value);
-}
-
-
-static void rygel_player_controller_real_set_next_metadata (RygelPlayerController* base, const gchar* value) {
+static void rygel_player_controller_real_set_next_metadata (RygelPlayerControllerInterface* base, const gchar* value) {
 	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
 	gchar* _tmp1_ = NULL;
-	self = base;
+	self = (RygelPlayerController*) base;
 	_tmp0_ = value;
 	_tmp1_ = g_strdup (_tmp0_);
 	_g_free0 (self->priv->_next_metadata);
@@ -1468,13 +1287,7 @@ static void rygel_player_controller_real_set_next_metadata (RygelPlayerControlle
 }
 
 
-gchar* rygel_player_controller_get_current_transport_actions (RygelPlayerController* self) {
-	g_return_val_if_fail (self != NULL, NULL);
-	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_current_transport_actions (self);
-}
-
-
-static gchar* rygel_player_controller_real_get_current_transport_actions (RygelPlayerController* base) {
+static gchar* rygel_player_controller_real_get_current_transport_actions (RygelPlayerControllerInterface* base) {
 	gchar* result;
 	RygelPlayerController* self;
 	gchar* actions = NULL;
@@ -1494,16 +1307,15 @@ static gchar* rygel_player_controller_real_get_current_transport_actions (RygelP
 	guint _tmp16_ = 0U;
 	guint _tmp17_ = 0U;
 	RygelMediaPlayer* _tmp20_ = NULL;
-	RygelMediaPlayer* _tmp21_ = NULL;
+	gboolean _tmp21_ = FALSE;
 	gboolean _tmp22_ = FALSE;
-	gboolean _tmp23_ = FALSE;
-	gboolean _tmp26_ = FALSE;
-	const gchar* _tmp27_ = NULL;
-	gboolean _tmp34_ = FALSE;
-	const gchar* _tmp35_ = NULL;
-	self = base;
+	gboolean _tmp25_ = FALSE;
+	const gchar* _tmp26_ = NULL;
+	gboolean _tmp32_ = FALSE;
+	const gchar* _tmp33_ = NULL;
+	self = (RygelPlayerController*) base;
 	actions = NULL;
-	_tmp0_ = rygel_player_controller_get_playback_state (self);
+	_tmp0_ = rygel_player_controller_interface_get_playback_state ((RygelPlayerControllerInterface*) self);
 	_tmp1_ = _tmp0_;
 	_tmp2_ = _tmp1_;
 	_tmp4_ = (NULL == _tmp2_) ? 0 : g_quark_from_string (_tmp2_);
@@ -1556,9 +1368,9 @@ static gchar* rygel_player_controller_real_get_current_transport_actions (RygelP
 		_g_free0 (actions);
 		return result;
 	}
-	_tmp10_ = rygel_player_controller_get_track (self);
+	_tmp10_ = rygel_player_controller_interface_get_track ((RygelPlayerControllerInterface*) self);
 	_tmp11_ = _tmp10_;
-	_tmp12_ = rygel_player_controller_get_n_tracks (self);
+	_tmp12_ = rygel_player_controller_interface_get_n_tracks ((RygelPlayerControllerInterface*) self);
 	_tmp13_ = _tmp12_;
 	if (_tmp11_ < _tmp13_) {
 		const gchar* _tmp14_ = NULL;
@@ -1568,7 +1380,7 @@ static gchar* rygel_player_controller_real_get_current_transport_actions (RygelP
 		_g_free0 (actions);
 		actions = _tmp15_;
 	}
-	_tmp16_ = rygel_player_controller_get_track (self);
+	_tmp16_ = rygel_player_controller_interface_get_track ((RygelPlayerControllerInterface*) self);
 	_tmp17_ = _tmp16_;
 	if (_tmp17_ > ((guint) 1)) {
 		const gchar* _tmp18_ = NULL;
@@ -1578,120 +1390,113 @@ static gchar* rygel_player_controller_real_get_current_transport_actions (RygelP
 		_g_free0 (actions);
 		actions = _tmp19_;
 	}
-	_tmp20_ = rygel_player_controller_get_player (self);
-	_tmp21_ = _tmp20_;
-	_tmp22_ = rygel_media_player_get_can_seek (_tmp21_);
-	_tmp23_ = _tmp22_;
-	if (_tmp23_) {
-		const gchar* _tmp24_ = NULL;
-		gchar* _tmp25_ = NULL;
-		_tmp24_ = actions;
-		_tmp25_ = g_strconcat (_tmp24_, ",X_DLNA_SeekTime", NULL);
+	_tmp20_ = self->priv->_player;
+	_tmp21_ = rygel_media_player_get_can_seek (_tmp20_);
+	_tmp22_ = _tmp21_;
+	if (_tmp22_) {
+		const gchar* _tmp23_ = NULL;
+		gchar* _tmp24_ = NULL;
+		_tmp23_ = actions;
+		_tmp24_ = g_strconcat (_tmp23_, ",X_DLNA_SeekTime", NULL);
 		_g_free0 (actions);
-		actions = _tmp25_;
+		actions = _tmp24_;
 	}
-	_tmp27_ = actions;
-	if (_tmp27_ != NULL) {
-		RygelMediaPlayer* _tmp28_ = NULL;
-		RygelMediaPlayer* _tmp29_ = NULL;
-		gboolean _tmp30_ = FALSE;
-		gboolean _tmp31_ = FALSE;
-		_tmp28_ = rygel_player_controller_get_player (self);
+	_tmp26_ = actions;
+	if (_tmp26_ != NULL) {
+		RygelMediaPlayer* _tmp27_ = NULL;
+		gboolean _tmp28_ = FALSE;
+		gboolean _tmp29_ = FALSE;
+		_tmp27_ = self->priv->_player;
+		_tmp28_ = rygel_media_player_get_can_seek_bytes (_tmp27_);
 		_tmp29_ = _tmp28_;
-		_tmp30_ = rygel_media_player_get_can_seek_bytes (_tmp29_);
-		_tmp31_ = _tmp30_;
-		_tmp26_ = _tmp31_;
+		_tmp25_ = _tmp29_;
 	} else {
-		_tmp26_ = FALSE;
+		_tmp25_ = FALSE;
 	}
-	if (_tmp26_) {
-		const gchar* _tmp32_ = NULL;
-		gchar* _tmp33_ = NULL;
-		_tmp32_ = actions;
-		_tmp33_ = g_strconcat (_tmp32_, ",X_DLNA_SeekByte", NULL);
+	if (_tmp25_) {
+		const gchar* _tmp30_ = NULL;
+		gchar* _tmp31_ = NULL;
+		_tmp30_ = actions;
+		_tmp31_ = g_strconcat (_tmp30_, ",X_DLNA_SeekByte", NULL);
 		_g_free0 (actions);
-		actions = _tmp33_;
+		actions = _tmp31_;
 	}
-	_tmp35_ = actions;
-	if (_tmp35_ != NULL) {
-		RygelMediaPlayer* _tmp36_ = NULL;
-		RygelMediaPlayer* _tmp37_ = NULL;
-		gchar** _tmp38_ = NULL;
-		gint _tmp38__length1 = 0;
-		gchar** _tmp39_ = NULL;
-		gint _tmp39__length1 = 0;
-		gchar** _tmp40_ = NULL;
-		gint _tmp40__length1 = 0;
-		_tmp36_ = rygel_player_controller_get_player (self);
+	_tmp33_ = actions;
+	if (_tmp33_ != NULL) {
+		RygelMediaPlayer* _tmp34_ = NULL;
+		gchar** _tmp35_ = NULL;
+		gint _tmp35__length1 = 0;
+		gchar** _tmp36_ = NULL;
+		gint _tmp36__length1 = 0;
+		gchar** _tmp37_ = NULL;
+		gint _tmp37__length1 = 0;
+		_tmp34_ = self->priv->_player;
+		_tmp35_ = rygel_media_player_get_allowed_playback_speeds (_tmp34_, &_tmp35__length1);
+		_tmp36_ = _tmp35_;
+		_tmp36__length1 = _tmp35__length1;
 		_tmp37_ = _tmp36_;
-		_tmp38_ = rygel_media_player_get_allowed_playback_speeds (_tmp37_, &_tmp38__length1);
-		_tmp39_ = _tmp38_;
-		_tmp39__length1 = _tmp38__length1;
-		_tmp40_ = _tmp39_;
-		_tmp40__length1 = _tmp39__length1;
-		_tmp34_ = _tmp39__length1 > 1;
-		_tmp40_ = (_vala_array_free (_tmp40_, _tmp40__length1, (GDestroyNotify) g_free), NULL);
+		_tmp37__length1 = _tmp36__length1;
+		_tmp32_ = _tmp36__length1 > 1;
+		_tmp37_ = (_vala_array_free (_tmp37_, _tmp37__length1, (GDestroyNotify) g_free), NULL);
 	} else {
-		_tmp34_ = FALSE;
+		_tmp32_ = FALSE;
 	}
-	if (_tmp34_) {
+	if (_tmp32_) {
 		gchar* play_speeds = NULL;
-		gchar* _tmp41_ = NULL;
-		RygelMediaPlayer* _tmp42_ = NULL;
-		RygelMediaPlayer* _tmp43_ = NULL;
-		gchar** _tmp44_ = NULL;
-		gint _tmp44__length1 = 0;
-		gchar** _tmp45_ = NULL;
-		gint _tmp45__length1 = 0;
-		const gchar* _tmp56_ = NULL;
-		const gchar* _tmp57_ = NULL;
-		gchar* _tmp58_ = NULL;
-		_tmp41_ = g_strdup ("");
-		play_speeds = _tmp41_;
-		_tmp42_ = rygel_player_controller_get_player (self);
-		_tmp43_ = _tmp42_;
-		_tmp44_ = rygel_media_player_get_allowed_playback_speeds (_tmp43_, &_tmp44__length1);
-		_tmp45_ = _tmp44_;
-		_tmp45__length1 = _tmp44__length1;
+		gchar* _tmp38_ = NULL;
+		RygelMediaPlayer* _tmp39_ = NULL;
+		gchar** _tmp40_ = NULL;
+		gint _tmp40__length1 = 0;
+		gchar** _tmp41_ = NULL;
+		gint _tmp41__length1 = 0;
+		const gchar* _tmp52_ = NULL;
+		const gchar* _tmp53_ = NULL;
+		gchar* _tmp54_ = NULL;
+		_tmp38_ = g_strdup ("");
+		play_speeds = _tmp38_;
+		_tmp39_ = self->priv->_player;
+		_tmp40_ = rygel_media_player_get_allowed_playback_speeds (_tmp39_, &_tmp40__length1);
+		_tmp41_ = _tmp40_;
+		_tmp41__length1 = _tmp40__length1;
 		{
 			gchar** speed_collection = NULL;
 			gint speed_collection_length1 = 0;
 			gint _speed_collection_size_ = 0;
 			gint speed_it = 0;
-			speed_collection = _tmp45_;
-			speed_collection_length1 = _tmp45__length1;
-			for (speed_it = 0; speed_it < _tmp45__length1; speed_it = speed_it + 1) {
-				gchar* _tmp46_ = NULL;
+			speed_collection = _tmp41_;
+			speed_collection_length1 = _tmp41__length1;
+			for (speed_it = 0; speed_it < _tmp41__length1; speed_it = speed_it + 1) {
+				gchar* _tmp42_ = NULL;
 				gchar* speed = NULL;
-				_tmp46_ = g_strdup (speed_collection[speed_it]);
-				speed = _tmp46_;
+				_tmp42_ = g_strdup (speed_collection[speed_it]);
+				speed = _tmp42_;
 				{
-					const gchar* _tmp47_ = NULL;
-					_tmp47_ = speed;
-					if (g_strcmp0 (_tmp47_, "1") != 0) {
-						const gchar* _tmp48_ = NULL;
-						_tmp48_ = play_speeds;
-						if (g_strcmp0 (_tmp48_, "") == 0) {
-							const gchar* _tmp49_ = NULL;
-							gchar* _tmp50_ = NULL;
-							_tmp49_ = speed;
-							_tmp50_ = g_strconcat (",X_DLNA_PS=", _tmp49_, NULL);
+					const gchar* _tmp43_ = NULL;
+					_tmp43_ = speed;
+					if (g_strcmp0 (_tmp43_, "1") != 0) {
+						const gchar* _tmp44_ = NULL;
+						_tmp44_ = play_speeds;
+						if (g_strcmp0 (_tmp44_, "") == 0) {
+							const gchar* _tmp45_ = NULL;
+							gchar* _tmp46_ = NULL;
+							_tmp45_ = speed;
+							_tmp46_ = g_strconcat (",X_DLNA_PS=", _tmp45_, NULL);
 							_g_free0 (play_speeds);
-							play_speeds = _tmp50_;
+							play_speeds = _tmp46_;
 						} else {
-							const gchar* _tmp51_ = NULL;
-							const gchar* _tmp52_ = NULL;
-							gchar* _tmp53_ = NULL;
-							gchar* _tmp54_ = NULL;
-							gchar* _tmp55_ = NULL;
-							_tmp51_ = play_speeds;
-							_tmp52_ = speed;
-							_tmp53_ = g_strconcat ("\\,", _tmp52_, NULL);
-							_tmp54_ = _tmp53_;
-							_tmp55_ = g_strconcat (_tmp51_, _tmp54_, NULL);
+							const gchar* _tmp47_ = NULL;
+							const gchar* _tmp48_ = NULL;
+							gchar* _tmp49_ = NULL;
+							gchar* _tmp50_ = NULL;
+							gchar* _tmp51_ = NULL;
+							_tmp47_ = play_speeds;
+							_tmp48_ = speed;
+							_tmp49_ = g_strconcat ("\\,", _tmp48_, NULL);
+							_tmp50_ = _tmp49_;
+							_tmp51_ = g_strconcat (_tmp47_, _tmp50_, NULL);
 							_g_free0 (play_speeds);
-							play_speeds = _tmp55_;
-							_g_free0 (_tmp54_);
+							play_speeds = _tmp51_;
+							_g_free0 (_tmp50_);
 						}
 					}
 					_g_free0 (speed);
@@ -1699,11 +1504,11 @@ static gchar* rygel_player_controller_real_get_current_transport_actions (RygelP
 			}
 			speed_collection = (_vala_array_free (speed_collection, speed_collection_length1, (GDestroyNotify) g_free), NULL);
 		}
-		_tmp56_ = actions;
-		_tmp57_ = play_speeds;
-		_tmp58_ = g_strconcat (_tmp56_, _tmp57_, NULL);
+		_tmp52_ = actions;
+		_tmp53_ = play_speeds;
+		_tmp54_ = g_strconcat (_tmp52_, _tmp53_, NULL);
 		_g_free0 (actions);
-		actions = _tmp58_;
+		actions = _tmp54_;
 		_g_free0 (play_speeds);
 	}
 	result = actions;
@@ -1715,35 +1520,6 @@ static void rygel_player_controller_class_init (RygelPlayerControllerClass * kla
 	rygel_player_controller_parent_class = g_type_class_peek_parent (klass);
 	g_type_class_add_private (klass, sizeof (RygelPlayerControllerPrivate));
 	G_OBJECT_CLASS (klass)->constructed = rygel_player_controller_real_constructed;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->next = rygel_player_controller_real_next;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->previous = rygel_player_controller_real_previous;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_single_play_uri = rygel_player_controller_real_set_single_play_uri;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_playlist_uri = rygel_player_controller_real_set_playlist_uri;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_next_single_play_uri = rygel_player_controller_real_set_next_single_play_uri;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_next_playlist_uri = rygel_player_controller_real_set_next_playlist_uri;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_player = rygel_player_controller_real_get_player;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_player = rygel_player_controller_real_set_player;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_protocol_info = rygel_player_controller_real_get_protocol_info;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_protocol_info = rygel_player_controller_real_set_protocol_info;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_playback_state = rygel_player_controller_real_get_playback_state;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_playback_state = rygel_player_controller_real_set_playback_state;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_n_tracks = rygel_player_controller_real_get_n_tracks;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_n_tracks = rygel_player_controller_real_set_n_tracks;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_track = rygel_player_controller_real_get_track;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_track = rygel_player_controller_real_set_track;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_uri = rygel_player_controller_real_get_uri;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_uri = rygel_player_controller_real_set_uri;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_metadata = rygel_player_controller_real_get_metadata;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_metadata = rygel_player_controller_real_set_metadata;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_track_uri = rygel_player_controller_real_get_track_uri;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_track_uri = rygel_player_controller_real_set_track_uri;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_track_metadata = rygel_player_controller_real_get_track_metadata;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_track_metadata = rygel_player_controller_real_set_track_metadata;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_next_uri = rygel_player_controller_real_get_next_uri;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_next_uri = rygel_player_controller_real_set_next_uri;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_next_metadata = rygel_player_controller_real_get_next_metadata;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_next_metadata = rygel_player_controller_real_set_next_metadata;
-	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_current_transport_actions = rygel_player_controller_real_get_current_transport_actions;
 	G_OBJECT_CLASS (klass)->get_property = _vala_rygel_player_controller_get_property;
 	G_OBJECT_CLASS (klass)->set_property = _vala_rygel_player_controller_set_property;
 	G_OBJECT_CLASS (klass)->finalize = rygel_player_controller_finalize;
@@ -1762,6 +1538,36 @@ static void rygel_player_controller_class_init (RygelPlayerControllerClass * kla
 }
 
 
+static void rygel_player_controller_rygel_player_controller_interface_interface_init (RygelPlayerControllerInterfaceIface * iface) {
+	rygel_player_controller_rygel_player_controller_interface_parent_iface = g_type_interface_peek_parent (iface);
+	iface->next = (gboolean (*)(RygelPlayerControllerInterface*)) rygel_player_controller_real_next;
+	iface->previous = (gboolean (*)(RygelPlayerControllerInterface*)) rygel_player_controller_real_previous;
+	iface->set_single_play_uri = (void (*)(RygelPlayerControllerInterface*, const gchar*, const gchar*, const gchar*, const gchar*)) rygel_player_controller_real_set_single_play_uri;
+	iface->set_playlist_uri = (void (*)(RygelPlayerControllerInterface*, const gchar*, const gchar*, GUPnPMediaCollection*)) rygel_player_controller_real_set_playlist_uri;
+	iface->set_next_single_play_uri = (void (*)(RygelPlayerControllerInterface*, const gchar*, const gchar*, const gchar*, const gchar*)) rygel_player_controller_real_set_next_single_play_uri;
+	iface->set_next_playlist_uri = (void (*)(RygelPlayerControllerInterface*, const gchar*, const gchar*, GUPnPMediaCollection*)) rygel_player_controller_real_set_next_playlist_uri;
+	iface->get_playback_state = rygel_player_controller_real_get_playback_state;
+	iface->set_playback_state = rygel_player_controller_real_set_playback_state;
+	iface->get_n_tracks = rygel_player_controller_real_get_n_tracks;
+	iface->set_n_tracks = rygel_player_controller_real_set_n_tracks;
+	iface->get_track = rygel_player_controller_real_get_track;
+	iface->set_track = rygel_player_controller_real_set_track;
+	iface->get_uri = rygel_player_controller_real_get_uri;
+	iface->set_uri = rygel_player_controller_real_set_uri;
+	iface->get_metadata = rygel_player_controller_real_get_metadata;
+	iface->set_metadata = rygel_player_controller_real_set_metadata;
+	iface->get_track_uri = rygel_player_controller_real_get_track_uri;
+	iface->set_track_uri = rygel_player_controller_real_set_track_uri;
+	iface->get_track_metadata = rygel_player_controller_real_get_track_metadata;
+	iface->set_track_metadata = rygel_player_controller_real_set_track_metadata;
+	iface->get_next_uri = rygel_player_controller_real_get_next_uri;
+	iface->set_next_uri = rygel_player_controller_real_set_next_uri;
+	iface->get_next_metadata = rygel_player_controller_real_get_next_metadata;
+	iface->set_next_metadata = rygel_player_controller_real_set_next_metadata;
+	iface->get_current_transport_actions = rygel_player_controller_real_get_current_transport_actions;
+}
+
+
 static void rygel_player_controller_instance_init (RygelPlayerController * self) {
 	gchar* _tmp0_ = NULL;
 	gchar* _tmp1_ = NULL;
@@ -1820,8 +1626,10 @@ GType rygel_player_controller_get_type (void) {
 	static volatile gsize rygel_player_controller_type_id__volatile = 0;
 	if (g_once_init_enter (&rygel_player_controller_type_id__volatile)) {
 		static const GTypeInfo g_define_type_info = { sizeof (RygelPlayerControllerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) rygel_player_controller_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (RygelPlayerController), 0, (GInstanceInitFunc) rygel_player_controller_instance_init, NULL };
+		static const GInterfaceInfo rygel_player_controller_interface_info = { (GInterfaceInitFunc) rygel_player_controller_rygel_player_controller_interface_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
 		GType rygel_player_controller_type_id;
 		rygel_player_controller_type_id = g_type_register_static (G_TYPE_OBJECT, "RygelPlayerController", &g_define_type_info, 0);
+		g_type_add_interface_static (rygel_player_controller_type_id, RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, &rygel_player_controller_interface_info);
 		g_once_init_leave (&rygel_player_controller_type_id__volatile, rygel_player_controller_type_id);
 	}
 	return rygel_player_controller_type_id__volatile;
@@ -1839,34 +1647,34 @@ static void _vala_rygel_player_controller_get_property (GObject * object, guint
 		g_value_set_string (value, rygel_player_controller_get_protocol_info (self));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_PLAYBACK_STATE:
-		g_value_set_string (value, rygel_player_controller_get_playback_state (self));
+		g_value_set_string (value, rygel_player_controller_interface_get_playback_state ((RygelPlayerControllerInterface*) self));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_N_TRACKS:
-		g_value_set_uint (value, rygel_player_controller_get_n_tracks (self));
+		g_value_set_uint (value, rygel_player_controller_interface_get_n_tracks ((RygelPlayerControllerInterface*) self));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_TRACK:
-		g_value_set_uint (value, rygel_player_controller_get_track (self));
+		g_value_set_uint (value, rygel_player_controller_interface_get_track ((RygelPlayerControllerInterface*) self));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_URI:
-		g_value_set_string (value, rygel_player_controller_get_uri (self));
+		g_value_set_string (value, rygel_player_controller_interface_get_uri ((RygelPlayerControllerInterface*) self));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_METADATA:
-		g_value_set_string (value, rygel_player_controller_get_metadata (self));
+		g_value_set_string (value, rygel_player_controller_interface_get_metadata ((RygelPlayerControllerInterface*) self));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_TRACK_URI:
-		g_value_take_string (value, rygel_player_controller_get_track_uri (self));
+		g_value_take_string (value, rygel_player_controller_interface_get_track_uri ((RygelPlayerControllerInterface*) self));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_TRACK_METADATA:
-		g_value_take_string (value, rygel_player_controller_get_track_metadata (self));
+		g_value_take_string (value, rygel_player_controller_interface_get_track_metadata ((RygelPlayerControllerInterface*) self));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_NEXT_URI:
-		g_value_set_string (value, rygel_player_controller_get_next_uri (self));
+		g_value_set_string (value, rygel_player_controller_interface_get_next_uri ((RygelPlayerControllerInterface*) self));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_NEXT_METADATA:
-		g_value_set_string (value, rygel_player_controller_get_next_metadata (self));
+		g_value_set_string (value, rygel_player_controller_interface_get_next_metadata ((RygelPlayerControllerInterface*) self));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_CURRENT_TRANSPORT_ACTIONS:
-		g_value_take_string (value, rygel_player_controller_get_current_transport_actions (self));
+		g_value_take_string (value, rygel_player_controller_interface_get_current_transport_actions ((RygelPlayerControllerInterface*) self));
 		break;
 		default:
 		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
@@ -1886,31 +1694,31 @@ static void _vala_rygel_player_controller_set_property (GObject * object, guint
 		rygel_player_controller_set_protocol_info (self, g_value_get_string (value));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_PLAYBACK_STATE:
-		rygel_player_controller_set_playback_state (self, g_value_get_string (value));
+		rygel_player_controller_interface_set_playback_state ((RygelPlayerControllerInterface*) self, g_value_get_string (value));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_N_TRACKS:
-		rygel_player_controller_set_n_tracks (self, g_value_get_uint (value));
+		rygel_player_controller_interface_set_n_tracks ((RygelPlayerControllerInterface*) self, g_value_get_uint (value));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_TRACK:
-		rygel_player_controller_set_track (self, g_value_get_uint (value));
+		rygel_player_controller_interface_set_track ((RygelPlayerControllerInterface*) self, g_value_get_uint (value));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_URI:
-		rygel_player_controller_set_uri (self, g_value_get_string (value));
+		rygel_player_controller_interface_set_uri ((RygelPlayerControllerInterface*) self, g_value_get_string (value));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_METADATA:
-		rygel_player_controller_set_metadata (self, g_value_get_string (value));
+		rygel_player_controller_interface_set_metadata ((RygelPlayerControllerInterface*) self, g_value_get_string (value));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_TRACK_URI:
-		rygel_player_controller_set_track_uri (self, g_value_get_string (value));
+		rygel_player_controller_interface_set_track_uri ((RygelPlayerControllerInterface*) self, g_value_get_string (value));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_TRACK_METADATA:
-		rygel_player_controller_set_track_metadata (self, g_value_get_string (value));
+		rygel_player_controller_interface_set_track_metadata ((RygelPlayerControllerInterface*) self, g_value_get_string (value));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_NEXT_URI:
-		rygel_player_controller_set_next_uri (self, g_value_get_string (value));
+		rygel_player_controller_interface_set_next_uri ((RygelPlayerControllerInterface*) self, g_value_get_string (value));
 		break;
 		case RYGEL_PLAYER_CONTROLLER_NEXT_METADATA:
-		rygel_player_controller_set_next_metadata (self, g_value_get_string (value));
+		rygel_player_controller_interface_set_next_metadata ((RygelPlayerControllerInterface*) self, g_value_get_string (value));
 		break;
 		default:
 		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
diff --git a/src/librygel-renderer/rygel-player-controller.vala b/src/librygel-renderer/rygel-player-controller.vala
index 11eecd7..0353756 100644
--- a/src/librygel-renderer/rygel-player-controller.vala
+++ b/src/librygel-renderer/rygel-player-controller.vala
@@ -35,7 +35,7 @@ using GUPnP;
  * proxy the playback state to react on end of item to be able to switch to
  * the next item.
  */
-public class Rygel.PlayerController : Object {
+public class Rygel.PlayerController : Object, PlayerControllerInterface {
     private const int DEFAULT_IMAGE_TIMEOUT = 15;
     private const string CONFIG_SECTION = "Renderer";
     private const string TIMEOUT_KEY = "image-timeout";
@@ -47,21 +47,21 @@ public class Rygel.PlayerController : Object {
         "%s</DIDL-Lite>";
 
     /* private (construction) properties */
-    public virtual MediaPlayer player { construct; private get; }
-    public virtual string protocol_info { construct; private get; }
+    public MediaPlayer player { construct; private get; }
+    public string protocol_info { construct; private get; }
 
     /* public properties */
 
     /* this._playback_state mirrors player.playback_state without including
      * non-UPnP "EOS" value. It is updated from notify_state_cb */
     [CCode (notify = false)]
-    public virtual string playback_state {
+    public string playback_state {
         get { return this._playback_state; }
         set { this.player.playback_state = value; }
     }
 
     [CCode (notify = false)]
-    public virtual uint n_tracks {
+    public uint n_tracks {
         get { return this._n_tracks; }
         private set {
             if (value != this._n_tracks) {
@@ -73,7 +73,7 @@ public class Rygel.PlayerController : Object {
     }
 
     [CCode (notify = false)]
-    public virtual uint track {
+    public uint track {
         get { return this._track; }
         set {
             if (value != this._track) {
@@ -85,11 +85,11 @@ public class Rygel.PlayerController : Object {
         default = 0;
     }
 
-    public virtual string uri { get; private set; default = ""; }
-    public virtual string metadata { get; private set; default = ""; }
+    public string uri { get; private set; default = ""; }
+    public string metadata { get; private set; default = ""; }
 
     [CCode (notify = false)]
-    public virtual string track_uri {
+    public string track_uri {
         owned get {
             if (this.player.uri != null) {
                 return Markup.escape_text (this.player.uri);
@@ -104,7 +104,7 @@ public class Rygel.PlayerController : Object {
     }
 
     [CCode (notify = false)]
-    public virtual string track_metadata {
+    public string track_metadata {
         owned get { return this.player.metadata ?? ""; }
 
         private set {
@@ -116,10 +116,10 @@ public class Rygel.PlayerController : Object {
         }
     }
 
-    public virtual string next_uri { get; private set; default = ""; }
-    public virtual string next_metadata { get; private set; default = ""; }
+    public string next_uri { get; private set; default = ""; }
+    public string next_metadata { get; private set; default = ""; }
 
-    public virtual string current_transport_actions {
+    public string current_transport_actions {
         owned get {
             string actions = null;
             switch (this.playback_state) {
@@ -206,7 +206,7 @@ public class Rygel.PlayerController : Object {
         this.on_setting_changed (CONFIG_SECTION, TIMEOUT_KEY);
     }
 
-    public virtual bool next () {
+    public bool next () {
         // Try advancing in playlist
         if (this.track < this.n_tracks) {
             this.track++;
@@ -239,7 +239,7 @@ public class Rygel.PlayerController : Object {
         return false;
     }
 
-    public virtual bool previous () {
+    public bool previous () {
         if (this.track <= 1) {
             return false;
         }
@@ -249,10 +249,10 @@ public class Rygel.PlayerController : Object {
         return true;
     }
 
-    public virtual void set_single_play_uri (string uri,
-                                             string metadata,
-                                             string? mime,
-                                             string? features)
+    public void set_single_play_uri (string uri,
+                                     string metadata,
+                                     string? mime,
+                                     string? features)
     {
         if (this.timeout_id != 0) {
             Source.remove (this.timeout_id);
@@ -279,9 +279,9 @@ public class Rygel.PlayerController : Object {
         }
     }
 
-    public virtual void set_playlist_uri (string uri,
-                                          string metadata,
-                                          MediaCollection collection) {
+    public void set_playlist_uri (string uri,
+                                  string metadata,
+                                  MediaCollection collection) {
         if (this.timeout_id != 0) {
             Source.remove (this.timeout_id);
             this.timeout_id = 0;
@@ -303,10 +303,10 @@ public class Rygel.PlayerController : Object {
         }
     }
 
-    public virtual void set_next_single_play_uri (string uri,
-                                                  string metadata,
-                                                  string? mime,
-                                                  string? features) {
+    public void set_next_single_play_uri (string uri,
+                                          string metadata,
+                                          string? mime,
+                                          string? features) {
         this.next_uri = uri;
         this.next_metadata = metadata;
         this.next_mime = mime;
@@ -314,9 +314,9 @@ public class Rygel.PlayerController : Object {
         this.next_collection = null;
     }
 
-    public virtual void set_next_playlist_uri (string uri,
-                                               string metadata,
-                                               MediaCollection collection) {
+    public void set_next_playlist_uri (string uri,
+                                       string metadata,
+                                       MediaCollection collection) {
         this.next_uri = uri;
         this.next_metadata = metadata;
         this.next_mime = null;
diff --git a/src/librygel-renderer/rygel-renderer.h b/src/librygel-renderer/rygel-renderer.h
index ca8e72e..4096a31 100644
--- a/src/librygel-renderer/rygel-renderer.h
+++ b/src/librygel-renderer/rygel-renderer.h
@@ -35,6 +35,14 @@ typedef struct _RygelMediaRendererPluginPrivate RygelMediaRendererPluginPrivate;
 typedef struct _RygelMediaPlayer RygelMediaPlayer;
 typedef struct _RygelMediaPlayerIface RygelMediaPlayerIface;
 
+#define RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE (rygel_player_controller_interface_get_type ())
+#define RYGEL_PLAYER_CONTROLLER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, RygelPlayerControllerInterface))
+#define RYGEL_IS_PLAYER_CONTROLLER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE))
+#define RYGEL_PLAYER_CONTROLLER_INTERFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER_INTERFACE, RygelPlayerControllerInterfaceIface))
+
+typedef struct _RygelPlayerControllerInterface RygelPlayerControllerInterface;
+typedef struct _RygelPlayerControllerInterfaceIface RygelPlayerControllerInterfaceIface;
+
 #define RYGEL_TYPE_PLAYER_CONTROLLER (rygel_player_controller_get_type ())
 #define RYGEL_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerController))
 #define RYGEL_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
@@ -96,6 +104,35 @@ struct _RygelMediaRendererPluginClass {
 	RygelMediaPlayer* (*get_player) (RygelMediaRendererPlugin* self);
 };
 
+struct _RygelPlayerControllerInterfaceIface {
+	GTypeInterface parent_iface;
+	gboolean (*next) (RygelPlayerControllerInterface* self);
+	gboolean (*previous) (RygelPlayerControllerInterface* self);
+	void (*set_single_play_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_playlist_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	void (*set_next_single_play_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_next_playlist_uri) (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	const gchar* (*get_playback_state) (RygelPlayerControllerInterface* self);
+	void (*set_playback_state) (RygelPlayerControllerInterface* self, const gchar* value);
+	guint (*get_n_tracks) (RygelPlayerControllerInterface* self);
+	void (*set_n_tracks) (RygelPlayerControllerInterface* self, guint value);
+	guint (*get_track) (RygelPlayerControllerInterface* self);
+	void (*set_track) (RygelPlayerControllerInterface* self, guint value);
+	const gchar* (*get_uri) (RygelPlayerControllerInterface* self);
+	void (*set_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_track_uri) (RygelPlayerControllerInterface* self);
+	void (*set_track_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_track_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_track_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_next_uri) (RygelPlayerControllerInterface* self);
+	void (*set_next_uri) (RygelPlayerControllerInterface* self, const gchar* value);
+	const gchar* (*get_next_metadata) (RygelPlayerControllerInterface* self);
+	void (*set_next_metadata) (RygelPlayerControllerInterface* self, const gchar* value);
+	gchar* (*get_current_transport_actions) (RygelPlayerControllerInterface* self);
+};
+
 struct _RygelPlayerController {
 	GObject parent_instance;
 	RygelPlayerControllerPrivate * priv;
@@ -103,35 +140,6 @@ struct _RygelPlayerController {
 
 struct _RygelPlayerControllerClass {
 	GObjectClass parent_class;
-	gboolean (*next) (RygelPlayerController* self);
-	gboolean (*previous) (RygelPlayerController* self);
-	void (*set_single_play_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
-	void (*set_playlist_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
-	void (*set_next_single_play_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
-	void (*set_next_playlist_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
-	RygelMediaPlayer* (*get_player) (RygelPlayerController* self);
-	void (*set_player) (RygelPlayerController* self, RygelMediaPlayer* value);
-	const gchar* (*get_protocol_info) (RygelPlayerController* self);
-	void (*set_protocol_info) (RygelPlayerController* self, const gchar* value);
-	const gchar* (*get_playback_state) (RygelPlayerController* self);
-	void (*set_playback_state) (RygelPlayerController* self, const gchar* value);
-	guint (*get_n_tracks) (RygelPlayerController* self);
-	void (*set_n_tracks) (RygelPlayerController* self, guint value);
-	guint (*get_track) (RygelPlayerController* self);
-	void (*set_track) (RygelPlayerController* self, guint value);
-	const gchar* (*get_uri) (RygelPlayerController* self);
-	void (*set_uri) (RygelPlayerController* self, const gchar* value);
-	const gchar* (*get_metadata) (RygelPlayerController* self);
-	void (*set_metadata) (RygelPlayerController* self, const gchar* value);
-	gchar* (*get_track_uri) (RygelPlayerController* self);
-	void (*set_track_uri) (RygelPlayerController* self, const gchar* value);
-	gchar* (*get_track_metadata) (RygelPlayerController* self);
-	void (*set_track_metadata) (RygelPlayerController* self, const gchar* value);
-	const gchar* (*get_next_uri) (RygelPlayerController* self);
-	void (*set_next_uri) (RygelPlayerController* self, const gchar* value);
-	const gchar* (*get_next_metadata) (RygelPlayerController* self);
-	void (*set_next_metadata) (RygelPlayerController* self, const gchar* value);
-	gchar* (*get_current_transport_actions) (RygelPlayerController* self);
 };
 
 struct _RygelMediaRenderer {
@@ -146,9 +154,9 @@ struct _RygelMediaRendererClass {
 
 GType rygel_media_renderer_plugin_get_type (void) G_GNUC_CONST;
 GType rygel_media_player_get_type (void) G_GNUC_CONST;
-GType rygel_player_controller_get_type (void) G_GNUC_CONST;
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
+GType rygel_player_controller_interface_get_type (void) G_GNUC_CONST;
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller);
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller);
 RygelMediaPlayer* rygel_media_renderer_plugin_get_player (RygelMediaRendererPlugin* self);
 gchar* rygel_media_renderer_plugin_get_protocol_info (RygelMediaRendererPlugin* self);
 GList* rygel_media_renderer_plugin_get_supported_profiles (RygelMediaRendererPlugin* self);
@@ -182,29 +190,37 @@ gint64 rygel_media_player_get_position (RygelMediaPlayer* self);
 gint64 rygel_media_player_get_byte_position (RygelMediaPlayer* self);
 gchar* rygel_media_player_get_position_as_str (RygelMediaPlayer* self);
 gchar* rygel_media_player_get_protocol_info (RygelMediaPlayer* self);
+GType rygel_player_controller_get_type (void) G_GNUC_CONST;
 RygelPlayerController* rygel_player_controller_new (RygelMediaPlayer* player, const gchar* protocol_info);
 RygelPlayerController* rygel_player_controller_construct (GType object_type, RygelMediaPlayer* player, const gchar* protocol_info);
-gboolean rygel_player_controller_next (RygelPlayerController* self);
-gboolean rygel_player_controller_previous (RygelPlayerController* self);
-void rygel_player_controller_set_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
-void rygel_player_controller_set_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
-void rygel_player_controller_set_next_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
-void rygel_player_controller_set_next_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
-const gchar* rygel_player_controller_get_playback_state (RygelPlayerController* self);
-void rygel_player_controller_set_playback_state (RygelPlayerController* self, const gchar* value);
-guint rygel_player_controller_get_n_tracks (RygelPlayerController* self);
-guint rygel_player_controller_get_track (RygelPlayerController* self);
-void rygel_player_controller_set_track (RygelPlayerController* self, guint value);
-const gchar* rygel_player_controller_get_uri (RygelPlayerController* self);
-const gchar* rygel_player_controller_get_metadata (RygelPlayerController* self);
-gchar* rygel_player_controller_get_track_uri (RygelPlayerController* self);
-gchar* rygel_player_controller_get_track_metadata (RygelPlayerController* self);
-const gchar* rygel_player_controller_get_next_uri (RygelPlayerController* self);
-const gchar* rygel_player_controller_get_next_metadata (RygelPlayerController* self);
-gchar* rygel_player_controller_get_current_transport_actions (RygelPlayerController* self);
+gboolean rygel_player_controller_interface_next (RygelPlayerControllerInterface* self);
+gboolean rygel_player_controller_interface_previous (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_single_play_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+void rygel_player_controller_interface_set_playlist_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+void rygel_player_controller_interface_set_next_single_play_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+void rygel_player_controller_interface_set_next_playlist_uri (RygelPlayerControllerInterface* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+const gchar* rygel_player_controller_interface_get_playback_state (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_playback_state (RygelPlayerControllerInterface* self, const gchar* value);
+guint rygel_player_controller_interface_get_n_tracks (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_n_tracks (RygelPlayerControllerInterface* self, guint value);
+guint rygel_player_controller_interface_get_track (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_track (RygelPlayerControllerInterface* self, guint value);
+const gchar* rygel_player_controller_interface_get_uri (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_uri (RygelPlayerControllerInterface* self, const gchar* value);
+const gchar* rygel_player_controller_interface_get_metadata (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_metadata (RygelPlayerControllerInterface* self, const gchar* value);
+gchar* rygel_player_controller_interface_get_track_uri (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_track_uri (RygelPlayerControllerInterface* self, const gchar* value);
+gchar* rygel_player_controller_interface_get_track_metadata (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_track_metadata (RygelPlayerControllerInterface* self, const gchar* value);
+const gchar* rygel_player_controller_interface_get_next_uri (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_next_uri (RygelPlayerControllerInterface* self, const gchar* value);
+const gchar* rygel_player_controller_interface_get_next_metadata (RygelPlayerControllerInterface* self);
+void rygel_player_controller_interface_set_next_metadata (RygelPlayerControllerInterface* self, const gchar* value);
+gchar* rygel_player_controller_interface_get_current_transport_actions (RygelPlayerControllerInterface* self);
 GType rygel_media_renderer_get_type (void) G_GNUC_CONST;
-RygelMediaRenderer* rygel_media_renderer_new (const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
-RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
+RygelMediaRenderer* rygel_media_renderer_new (const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller);
+RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerControllerInterface* controller);
 
 
 G_END_DECLS
-- 
1.9.1

