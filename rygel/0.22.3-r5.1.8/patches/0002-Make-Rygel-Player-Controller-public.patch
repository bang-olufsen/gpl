From a0fc881d51f5a5ec14c7a3b1c03345738ec2ee18 Mon Sep 17 00:00:00 2001
From: Xia Zhou <xia.zhou@streamunlimited.com>
Date: Wed, 13 Aug 2014 13:09:25 +0200
Subject: [PATCH] Make Rygel-Player-Controller public
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Modify Rygel-Media-Renderer to accept a fourth argument: the
Player-Controller.  If a NULL is passed in instead of an object then
Rygelâ€™s default Player-Controller is used.

Conflicts:
	src/librygel-renderer/filelist.am
	src/librygel-renderer/rygel-player-controller.vala
	src/librygel-renderer/rygel-renderer-2.0.deps

Signed-off-by: Xia Zhou <xia.zhou@streamunlimited.com>
Signed-off-by: Fionn Cleary <fionn.cleary@streamunlimited.com>
---
 src/librygel-renderer/filelist.am                  |   2 +-
 src/librygel-renderer/rygel-av-transport.c         |  10 +-
 .../rygel-media-renderer-plugin.c                  |  26 +-
 .../rygel-media-renderer-plugin.vala               |   4 +-
 src/librygel-renderer/rygel-media-renderer.c       |  81 +-
 src/librygel-renderer/rygel-media-renderer.vala    |  12 +-
 src/librygel-renderer/rygel-player-controller.c    | 919 ++++++++++++++-------
 src/librygel-renderer/rygel-player-controller.vala |  58 +-
 src/librygel-renderer/rygel-renderer-2.2.deps      |   1 +
 src/librygel-renderer/rygel-renderer.h             |  79 +-
 src/plugins/mpris/rygel-mpris-plugin.vala          |   2 +-
 11 files changed, 804 insertions(+), 390 deletions(-)

diff --git a/src/librygel-renderer/filelist.am b/src/librygel-renderer/filelist.am
index 3f5cb08..8877acb 100644
--- a/src/librygel-renderer/filelist.am
+++ b/src/librygel-renderer/filelist.am
@@ -1,11 +1,11 @@
 LIBRYGEL_RENDERER_VAPI_SOURCE_FILES = \
 	rygel-media-renderer-plugin.vala \
 	rygel-media-player.vala \
+	rygel-player-controller.vala \
 	rygel-media-renderer.vala
 
 LIBRYGEL_RENDERER_NONVAPI_SOURCE_FILES = \
 	rygel-av-transport.vala \
-	rygel-player-controller.vala \
 	rygel-rendering-control.vala \
 	rygel-sink-connection-manager.vala \
 	rygel-time-utils.vala \
diff --git a/src/librygel-renderer/rygel-av-transport.c b/src/librygel-renderer/rygel-av-transport.c
index 1ae3053..1151d8b 100644
--- a/src/librygel-renderer/rygel-av-transport.c
+++ b/src/librygel-renderer/rygel-av-transport.c
@@ -984,7 +984,7 @@ static gchar* string_replace (const gchar* self, const gchar* old, const gchar*
 		regex = _tmp4_;
 		if (_inner_error_ != NULL) {
 			if (_inner_error_->domain == G_REGEX_ERROR) {
-				goto __catch1_g_regex_error;
+				goto __catch3_g_regex_error;
 			}
 			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
 			g_clear_error (&_inner_error_);
@@ -997,7 +997,7 @@ static gchar* string_replace (const gchar* self, const gchar* old, const gchar*
 		if (_inner_error_ != NULL) {
 			_g_regex_unref0 (regex);
 			if (_inner_error_->domain == G_REGEX_ERROR) {
-				goto __catch1_g_regex_error;
+				goto __catch3_g_regex_error;
 			}
 			_g_regex_unref0 (regex);
 			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
@@ -1011,8 +1011,8 @@ static gchar* string_replace (const gchar* self, const gchar* old, const gchar*
 		_g_regex_unref0 (regex);
 		return result;
 	}
-	goto __finally1;
-	__catch1_g_regex_error:
+	goto __finally3;
+	__catch3_g_regex_error:
 	{
 		GError* e = NULL;
 		e = _inner_error_;
@@ -1020,7 +1020,7 @@ static gchar* string_replace (const gchar* self, const gchar* old, const gchar*
 		g_assert_not_reached ();
 		_g_error_free0 (e);
 	}
-	__finally1:
+	__finally3:
 	if (_inner_error_ != NULL) {
 		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
 		g_clear_error (&_inner_error_);
diff --git a/src/librygel-renderer/rygel-media-renderer-plugin.c b/src/librygel-renderer/rygel-media-renderer-plugin.c
index 9e748fc..8adf2e7 100644
--- a/src/librygel-renderer/rygel-media-renderer-plugin.c
+++ b/src/librygel-renderer/rygel-media-renderer-plugin.c
@@ -159,8 +159,8 @@ static void _rygel_dlna_profile_unref0_ (gpointer var);
 static void _g_list_free__rygel_dlna_profile_unref0_ (GList* self);
 #define RYGEL_MEDIA_RENDERER_PLUGIN_MEDIA_RENDERER_DESC_PATH DATA_DIR "/xml/MediaRenderer2.xml"
 #define RYGEL_MEDIA_RENDERER_PLUGIN_DMR "urn:schemas-upnp-org:device:MediaRenderer"
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities);
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities);
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
 static void rygel_media_renderer_plugin_real_constructed (GObject* base);
 GType rygel_sink_connection_manager_get_type (void) G_GNUC_CONST;
 #define RYGEL_AV_TRANSPORT_UPNP_ID "urn:upnp-org:serviceId:AVTransport"
@@ -207,24 +207,35 @@ static void _g_list_free__rygel_dlna_profile_unref0_ (GList* self) {
      * @param title An optional human-readable name (friendlyName) of the UPnP renderer provided by the plugin. If the title is empty then the name will be used.
      * @param description An optional human-readable description (modelDescription) of the UPnP renderer provided by the plugin.
      */
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities) {
+static gpointer _g_object_ref0 (gpointer self) {
+	return self ? g_object_ref (self) : NULL;
+}
+
+
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller) {
 	RygelMediaRendererPlugin * self = NULL;
 	const gchar* _tmp0_ = NULL;
 	const gchar* _tmp1_ = NULL;
 	const gchar* _tmp2_ = NULL;
 	RygelPluginCapabilities _tmp3_ = 0;
+	RygelPlayerController* _tmp4_ = NULL;
+	RygelPlayerController* _tmp5_ = NULL;
 	g_return_val_if_fail (name != NULL, NULL);
 	_tmp0_ = name;
 	_tmp1_ = title;
 	_tmp2_ = description;
 	_tmp3_ = capabilities;
 	self = (RygelMediaRendererPlugin*) g_object_new (object_type, "desc-path", RYGEL_MEDIA_RENDERER_PLUGIN_MEDIA_RENDERER_DESC_PATH, "name", _tmp0_, "title", _tmp1_, "description", _tmp2_, "capabilities", _tmp3_, NULL);
+	_tmp4_ = controller;
+	_tmp5_ = _g_object_ref0 (_tmp4_);
+	_g_object_unref0 (self->priv->controller);
+	self->priv->controller = _tmp5_;
 	return self;
 }
 
 
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities) {
-	return rygel_media_renderer_plugin_construct (RYGEL_TYPE_MEDIA_RENDERER_PLUGIN, name, title, description, capabilities);
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller) {
+	return rygel_media_renderer_plugin_construct (RYGEL_TYPE_MEDIA_RENDERER_PLUGIN, name, title, description, capabilities, controller);
 }
 
 
@@ -270,11 +281,6 @@ RygelMediaPlayer* rygel_media_renderer_plugin_get_player (RygelMediaRendererPlug
 }
 
 
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
 RygelPlayerController* rygel_media_renderer_plugin_get_controller (RygelMediaRendererPlugin* self) {
 	RygelPlayerController* result = NULL;
 	RygelPlayerController* _tmp0_ = NULL;
diff --git a/src/librygel-renderer/rygel-media-renderer-plugin.vala b/src/librygel-renderer/rygel-media-renderer-plugin.vala
index c6abf2c..724a912 100644
--- a/src/librygel-renderer/rygel-media-renderer-plugin.vala
+++ b/src/librygel-renderer/rygel-media-renderer-plugin.vala
@@ -73,12 +73,14 @@ public class Rygel.MediaRendererPlugin : Rygel.Plugin {
                                 string? title,
                                 string? description = null,
                                 PluginCapabilities capabilities =
-                                        PluginCapabilities.NONE) {
+                                        PluginCapabilities.NONE,
+                                PlayerController? controller = null) {
         Object (desc_path : MEDIA_RENDERER_DESC_PATH,
                 name : name,
                 title : title,
                 description : description,
                 capabilities : capabilities);
+        this.controller = controller;
     }
 
     public override void constructed () {
diff --git a/src/librygel-renderer/rygel-media-renderer.c b/src/librygel-renderer/rygel-media-renderer.c
index 0c32ba2..93eeb96 100644
--- a/src/librygel-renderer/rygel-media-renderer.c
+++ b/src/librygel-renderer/rygel-media-renderer.c
@@ -62,6 +62,16 @@ typedef struct _PluginClass PluginClass;
 typedef struct _PluginPrivate PluginPrivate;
 #define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
 
+#define RYGEL_TYPE_PLAYER_CONTROLLER (rygel_player_controller_get_type ())
+#define RYGEL_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerController))
+#define RYGEL_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
+#define RYGEL_IS_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER))
+#define RYGEL_IS_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), RYGEL_TYPE_PLAYER_CONTROLLER))
+#define RYGEL_PLAYER_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
+
+typedef struct _RygelPlayerController RygelPlayerController;
+typedef struct _RygelPlayerControllerClass RygelPlayerControllerClass;
+
 #define RYGEL_TYPE_MEDIA_RENDERER (rygel_media_renderer_get_type ())
 #define RYGEL_MEDIA_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_MEDIA_RENDERER, RygelMediaRenderer))
 #define RYGEL_MEDIA_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), RYGEL_TYPE_MEDIA_RENDERER, RygelMediaRendererClass))
@@ -136,6 +146,7 @@ struct _RygelMediaRendererClass {
 
 struct _RygelMediaRendererPrivate {
 	RygelMediaPlayer* _player;
+	RygelPlayerController* controller;
 };
 
 
@@ -149,10 +160,11 @@ GType plugin_get_type (void) G_GNUC_CONST;
 enum  {
 	PLUGIN_DUMMY_PROPERTY
 };
-Plugin* plugin_new (RygelMediaPlayer* player, RygelPluginCapabilities capabilities);
-Plugin* plugin_construct (GType object_type, RygelMediaPlayer* player, RygelPluginCapabilities capabilities);
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities);
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities);
+GType rygel_player_controller_get_type (void) G_GNUC_CONST;
+Plugin* plugin_new (RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
+Plugin* plugin_construct (GType object_type, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
 static RygelMediaPlayer* plugin_real_get_player (RygelMediaRendererPlugin* base);
 static void plugin_finalize (GObject* obj);
 GType rygel_media_renderer_get_type (void) G_GNUC_CONST;
@@ -161,8 +173,8 @@ enum  {
 	RYGEL_MEDIA_RENDERER_DUMMY_PROPERTY,
 	RYGEL_MEDIA_RENDERER_PLAYER
 };
-RygelMediaRenderer* rygel_media_renderer_new (const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities);
-RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities);
+RygelMediaRenderer* rygel_media_renderer_new (const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
+RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
 static void rygel_media_renderer_real_constructed (GObject* base);
 static RygelMediaPlayer* rygel_media_renderer_get_player (RygelMediaRenderer* self);
 static void rygel_media_renderer_set_player (RygelMediaRenderer* self, RygelMediaPlayer* value);
@@ -176,24 +188,26 @@ static gpointer _g_object_ref0 (gpointer self) {
 }
 
 
-Plugin* plugin_construct (GType object_type, RygelMediaPlayer* player, RygelPluginCapabilities capabilities) {
+Plugin* plugin_construct (GType object_type, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller) {
 	Plugin * self = NULL;
 	RygelPluginCapabilities _tmp0_ = 0;
-	RygelMediaPlayer* _tmp1_ = NULL;
+	RygelPlayerController* _tmp1_ = NULL;
 	RygelMediaPlayer* _tmp2_ = NULL;
+	RygelMediaPlayer* _tmp3_ = NULL;
 	g_return_val_if_fail (player != NULL, NULL);
 	_tmp0_ = capabilities;
-	self = (Plugin*) rygel_media_renderer_plugin_construct (object_type, "LibRygelRenderer", "LibRygelRenderer", NULL, _tmp0_);
-	_tmp1_ = player;
-	_tmp2_ = _g_object_ref0 (_tmp1_);
+	_tmp1_ = controller;
+	self = (Plugin*) rygel_media_renderer_plugin_construct (object_type, "LibRygelRenderer", "LibRygelRenderer", NULL, _tmp0_, _tmp1_);
+	_tmp2_ = player;
+	_tmp3_ = _g_object_ref0 (_tmp2_);
 	_g_object_unref0 (self->priv->player);
-	self->priv->player = _tmp2_;
+	self->priv->player = _tmp3_;
 	return self;
 }
 
 
-Plugin* plugin_new (RygelMediaPlayer* player, RygelPluginCapabilities capabilities) {
-	return plugin_construct (TYPE_PLUGIN, player, capabilities);
+Plugin* plugin_new (RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller) {
+	return plugin_construct (TYPE_PLUGIN, player, capabilities, controller);
 }
 
 
@@ -246,23 +260,29 @@ GType plugin_get_type (void) {
 /**
      * Create a RygelMediaRenderer to render content via a RygelMediaPlayer.
      */
-RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities) {
+RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller) {
 	RygelMediaRenderer * self = NULL;
 	const gchar* _tmp0_ = NULL;
 	RygelMediaPlayer* _tmp1_ = NULL;
 	RygelPluginCapabilities _tmp2_ = 0;
+	RygelPlayerController* _tmp3_ = NULL;
+	RygelPlayerController* _tmp4_ = NULL;
 	g_return_val_if_fail (title != NULL, NULL);
 	g_return_val_if_fail (player != NULL, NULL);
 	_tmp0_ = title;
 	_tmp1_ = player;
 	_tmp2_ = capabilities;
 	self = (RygelMediaRenderer*) g_object_new (object_type, "title", _tmp0_, "player", _tmp1_, "capabilities", _tmp2_, NULL);
+	_tmp3_ = controller;
+	_tmp4_ = _g_object_ref0 (_tmp3_);
+	_g_object_unref0 (self->priv->controller);
+	self->priv->controller = _tmp4_;
 	return self;
 }
 
 
-RygelMediaRenderer* rygel_media_renderer_new (const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities) {
-	return rygel_media_renderer_construct (RYGEL_TYPE_MEDIA_RENDERER, title, player, capabilities);
+RygelMediaRenderer* rygel_media_renderer_new (const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller) {
+	return rygel_media_renderer_construct (RYGEL_TYPE_MEDIA_RENDERER, title, player, capabilities, controller);
 }
 
 
@@ -270,10 +290,10 @@ static void rygel_media_renderer_real_constructed (GObject* base) {
 	RygelMediaRenderer * self;
 	RygelPlugin* _tmp0_ = NULL;
 	RygelPlugin* _tmp1_ = NULL;
-	RygelPlugin* _tmp7_ = NULL;
 	RygelPlugin* _tmp8_ = NULL;
-	const gchar* _tmp9_ = NULL;
+	RygelPlugin* _tmp9_ = NULL;
 	const gchar* _tmp10_ = NULL;
+	const gchar* _tmp11_ = NULL;
 	self = (RygelMediaRenderer*) base;
 	G_OBJECT_CLASS (rygel_media_renderer_parent_class)->constructed ((GObject*) G_TYPE_CHECK_INSTANCE_CAST (self, RYGEL_TYPE_MEDIA_DEVICE, RygelMediaDevice));
 	_tmp0_ = rygel_media_device_get_plugin ((RygelMediaDevice*) self);
@@ -282,21 +302,23 @@ static void rygel_media_renderer_real_constructed (GObject* base) {
 		RygelMediaPlayer* _tmp2_ = NULL;
 		RygelPluginCapabilities _tmp3_ = 0;
 		RygelPluginCapabilities _tmp4_ = 0;
-		Plugin* _tmp5_ = NULL;
+		RygelPlayerController* _tmp5_ = NULL;
 		Plugin* _tmp6_ = NULL;
+		Plugin* _tmp7_ = NULL;
 		_tmp2_ = self->priv->_player;
 		_tmp3_ = rygel_media_device_get_capabilities ((RygelMediaDevice*) self);
 		_tmp4_ = _tmp3_;
-		_tmp5_ = plugin_new (_tmp2_, _tmp4_);
-		_tmp6_ = _tmp5_;
-		rygel_media_device_set_plugin ((RygelMediaDevice*) self, (RygelPlugin*) _tmp6_);
-		_g_object_unref0 (_tmp6_);
+		_tmp5_ = self->priv->controller;
+		_tmp6_ = plugin_new (_tmp2_, _tmp4_, _tmp5_);
+		_tmp7_ = _tmp6_;
+		rygel_media_device_set_plugin ((RygelMediaDevice*) self, (RygelPlugin*) _tmp7_);
+		_g_object_unref0 (_tmp7_);
 	}
-	_tmp7_ = rygel_media_device_get_plugin ((RygelMediaDevice*) self);
-	_tmp8_ = _tmp7_;
-	_tmp9_ = rygel_media_device_get_title ((RygelMediaDevice*) self);
-	_tmp10_ = _tmp9_;
-	rygel_plugin_set_title (_tmp8_, _tmp10_);
+	_tmp8_ = rygel_media_device_get_plugin ((RygelMediaDevice*) self);
+	_tmp9_ = _tmp8_;
+	_tmp10_ = rygel_media_device_get_title ((RygelMediaDevice*) self);
+	_tmp11_ = _tmp10_;
+	rygel_plugin_set_title (_tmp9_, _tmp11_);
 }
 
 
@@ -338,6 +360,7 @@ static void rygel_media_renderer_instance_init (RygelMediaRenderer * self) {
 static void rygel_media_renderer_finalize (GObject* obj) {
 	RygelMediaRenderer * self;
 	self = G_TYPE_CHECK_INSTANCE_CAST (obj, RYGEL_TYPE_MEDIA_RENDERER, RygelMediaRenderer);
+	_g_object_unref0 (self->priv->controller);
 	G_OBJECT_CLASS (rygel_media_renderer_parent_class)->finalize (obj);
 }
 
diff --git a/src/librygel-renderer/rygel-media-renderer.vala b/src/librygel-renderer/rygel-media-renderer.vala
index fb2b492..7b772e3 100644
--- a/src/librygel-renderer/rygel-media-renderer.vala
+++ b/src/librygel-renderer/rygel-media-renderer.vala
@@ -23,8 +23,9 @@ internal class Plugin : Rygel.MediaRendererPlugin {
     private Rygel.MediaPlayer player;
 
     public Plugin (Rygel.MediaPlayer        player,
-                   Rygel.PluginCapabilities capabilities) {
-        base ("LibRygelRenderer", "LibRygelRenderer", null, capabilities);
+                   Rygel.PluginCapabilities capabilities,
+                   Rygel.PlayerController?  controller = null) {
+        base ("LibRygelRenderer", "LibRygelRenderer", null, capabilities, controller);
         this.player = player;
     }
 
@@ -51,18 +52,21 @@ public class Rygel.MediaRenderer : MediaDevice {
     public MediaRenderer (string title,
                           MediaPlayer player,
                           PluginCapabilities capabilities =
-                                        PluginCapabilities.NONE) {
+                                        PluginCapabilities.NONE,
+                          PlayerController? controller = null) {
         Object (title: title,
                 player: player,
                 capabilities: capabilities);
+        this.controller = controller;
     }
 
     public override void constructed () {
         base.constructed ();
 
         if (this.plugin == null) {
-            this.plugin = new global::Plugin (this.player, this.capabilities);
+            this.plugin = new global::Plugin (this.player, this.capabilities, this.controller);
         }
         this.plugin.title = this.title;
     }
+    private PlayerController controller;
 }
diff --git a/src/librygel-renderer/rygel-player-controller.c b/src/librygel-renderer/rygel-player-controller.c
index b52a150..fc83d69 100644
--- a/src/librygel-renderer/rygel-player-controller.c
+++ b/src/librygel-renderer/rygel-player-controller.c
@@ -25,9 +25,9 @@
 #include <glib-object.h>
 #include <stdlib.h>
 #include <string.h>
+#include <libgupnp-av/gupnp-av.h>
 #include <float.h>
 #include <math.h>
-#include <libgupnp-av/gupnp-av.h>
 #include <rygel-core.h>
 
 
@@ -55,15 +55,6 @@ typedef struct _RygelMediaPlayerIface RygelMediaPlayerIface;
 #define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
 #define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
 
-struct _RygelPlayerController {
-	GObject parent_instance;
-	RygelPlayerControllerPrivate * priv;
-};
-
-struct _RygelPlayerControllerClass {
-	GObjectClass parent_class;
-};
-
 struct _RygelMediaPlayerIface {
 	GTypeInterface parent_iface;
 	gboolean (*seek) (RygelMediaPlayer* self, gint64 time);
@@ -93,6 +84,44 @@ struct _RygelMediaPlayerIface {
 	gint64 (*get_byte_position) (RygelMediaPlayer* self);
 };
 
+struct _RygelPlayerController {
+	GObject parent_instance;
+	RygelPlayerControllerPrivate * priv;
+};
+
+struct _RygelPlayerControllerClass {
+	GObjectClass parent_class;
+	gboolean (*next) (RygelPlayerController* self);
+	gboolean (*previous) (RygelPlayerController* self);
+	void (*set_single_play_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_playlist_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	void (*set_next_single_play_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_next_playlist_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	RygelMediaPlayer* (*get_player) (RygelPlayerController* self);
+	void (*set_player) (RygelPlayerController* self, RygelMediaPlayer* value);
+	const gchar* (*get_protocol_info) (RygelPlayerController* self);
+	void (*set_protocol_info) (RygelPlayerController* self, const gchar* value);
+	const gchar* (*get_playback_state) (RygelPlayerController* self);
+	void (*set_playback_state) (RygelPlayerController* self, const gchar* value);
+	guint (*get_n_tracks) (RygelPlayerController* self);
+	void (*set_n_tracks) (RygelPlayerController* self, guint value);
+	guint (*get_track) (RygelPlayerController* self);
+	void (*set_track) (RygelPlayerController* self, guint value);
+	const gchar* (*get_uri) (RygelPlayerController* self);
+	void (*set_uri) (RygelPlayerController* self, const gchar* value);
+	const gchar* (*get_metadata) (RygelPlayerController* self);
+	void (*set_metadata) (RygelPlayerController* self, const gchar* value);
+	gchar* (*get_track_uri) (RygelPlayerController* self);
+	void (*set_track_uri) (RygelPlayerController* self, const gchar* value);
+	gchar* (*get_track_metadata) (RygelPlayerController* self);
+	void (*set_track_metadata) (RygelPlayerController* self, const gchar* value);
+	const gchar* (*get_next_uri) (RygelPlayerController* self);
+	void (*set_next_uri) (RygelPlayerController* self, const gchar* value);
+	const gchar* (*get_next_metadata) (RygelPlayerController* self);
+	void (*set_next_metadata) (RygelPlayerController* self, const gchar* value);
+	gchar* (*get_current_transport_actions) (RygelPlayerController* self);
+};
+
 struct _RygelPlayerControllerPrivate {
 	RygelMediaPlayer* _player;
 	gchar* _protocol_info;
@@ -152,6 +181,7 @@ static void _rygel_player_controller_notify_metadata_cb_g_object_notify (GObject
 static void rygel_player_controller_on_setting_changed (RygelPlayerController* self, const gchar* section, const gchar* key);
 static void _rygel_player_controller_on_setting_changed_rygel_configuration_setting_changed (RygelConfiguration* _sender, const gchar* section, const gchar* key, gpointer self);
 gboolean rygel_player_controller_next (RygelPlayerController* self);
+static gboolean rygel_player_controller_real_next (RygelPlayerController* self);
 guint rygel_player_controller_get_track (RygelPlayerController* self);
 guint rygel_player_controller_get_n_tracks (RygelPlayerController* self);
 void rygel_player_controller_set_track (RygelPlayerController* self, guint value);
@@ -162,6 +192,8 @@ void rygel_player_controller_set_single_play_uri (RygelPlayerController* self, c
 static void rygel_player_controller_set_next_uri (RygelPlayerController* self, const gchar* value);
 static void rygel_player_controller_set_next_metadata (RygelPlayerController* self, const gchar* value);
 gboolean rygel_player_controller_previous (RygelPlayerController* self);
+static gboolean rygel_player_controller_real_previous (RygelPlayerController* self);
+static void rygel_player_controller_real_set_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
 static gchar* rygel_player_controller_unescape (RygelPlayerController* self, const gchar* input);
 static void rygel_player_controller_set_metadata (RygelPlayerController* self, const gchar* value);
 static void rygel_player_controller_set_uri (RygelPlayerController* self, const gchar* value);
@@ -172,9 +204,12 @@ static void rygel_player_controller_set_track_metadata (RygelPlayerController* s
 const gchar* rygel_player_controller_get_uri (RygelPlayerController* self);
 static void rygel_player_controller_set_track_uri (RygelPlayerController* self, const gchar* value);
 static void rygel_player_controller_set_n_tracks (RygelPlayerController* self, guint value);
+static void rygel_player_controller_real_set_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
 static void rygel_player_controller_apply_track (RygelPlayerController* self);
 void rygel_player_controller_set_next_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+static void rygel_player_controller_real_set_next_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
 void rygel_player_controller_set_next_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+static void rygel_player_controller_real_set_next_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
 gchar* rygel_media_player_get_playback_state (RygelMediaPlayer* self);
 static gboolean ___lambda4_ (RygelPlayerController* self);
 static void rygel_player_controller_reset (RygelPlayerController* self);
@@ -259,34 +294,40 @@ static void rygel_player_controller_real_constructed (GObject* base) {
 	RygelMediaPlayer* _tmp0_ = NULL;
 	RygelMediaPlayer* _tmp1_ = NULL;
 	RygelMediaPlayer* _tmp2_ = NULL;
-	RygelMetaConfig* _tmp3_ = NULL;
-	RygelConfiguration* _tmp4_ = NULL;
+	RygelMediaPlayer* _tmp3_ = NULL;
+	RygelMediaPlayer* _tmp4_ = NULL;
+	RygelMediaPlayer* _tmp5_ = NULL;
+	RygelMetaConfig* _tmp6_ = NULL;
+	RygelConfiguration* _tmp7_ = NULL;
 	self = (RygelPlayerController*) base;
 	G_OBJECT_CLASS (rygel_player_controller_parent_class)->constructed (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject));
-	_tmp0_ = self->priv->_player;
-	g_signal_connect_object ((GObject*) _tmp0_, "notify::playback-state", (GCallback) _rygel_player_controller_notify_state_cb_g_object_notify, self, 0);
-	_tmp1_ = self->priv->_player;
-	g_signal_connect_object ((GObject*) _tmp1_, "notify::uri", (GCallback) _rygel_player_controller_notify_uri_cb_g_object_notify, self, 0);
-	_tmp2_ = self->priv->_player;
-	g_signal_connect_object ((GObject*) _tmp2_, "notify::metadata", (GCallback) _rygel_player_controller_notify_metadata_cb_g_object_notify, self, 0);
-	_tmp3_ = rygel_meta_config_get_default ();
+	_tmp0_ = rygel_player_controller_get_player (self);
+	_tmp1_ = _tmp0_;
+	g_signal_connect_object ((GObject*) _tmp1_, "notify::playback-state", (GCallback) _rygel_player_controller_notify_state_cb_g_object_notify, self, 0);
+	_tmp2_ = rygel_player_controller_get_player (self);
+	_tmp3_ = _tmp2_;
+	g_signal_connect_object ((GObject*) _tmp3_, "notify::uri", (GCallback) _rygel_player_controller_notify_uri_cb_g_object_notify, self, 0);
+	_tmp4_ = rygel_player_controller_get_player (self);
+	_tmp5_ = _tmp4_;
+	g_signal_connect_object ((GObject*) _tmp5_, "notify::metadata", (GCallback) _rygel_player_controller_notify_metadata_cb_g_object_notify, self, 0);
+	_tmp6_ = rygel_meta_config_get_default ();
 	_g_object_unref0 (self->priv->config);
-	self->priv->config = (RygelConfiguration*) _tmp3_;
-	_tmp4_ = self->priv->config;
-	g_signal_connect_object (_tmp4_, "setting-changed", (GCallback) _rygel_player_controller_on_setting_changed_rygel_configuration_setting_changed, self, 0);
+	self->priv->config = (RygelConfiguration*) _tmp6_;
+	_tmp7_ = self->priv->config;
+	g_signal_connect_object (_tmp7_, "setting-changed", (GCallback) _rygel_player_controller_on_setting_changed_rygel_configuration_setting_changed, self, 0);
 	self->priv->default_image_timeout = (guint) RYGEL_PLAYER_CONTROLLER_DEFAULT_IMAGE_TIMEOUT;
 	rygel_player_controller_on_setting_changed (self, RYGEL_PLAYER_CONTROLLER_CONFIG_SECTION, RYGEL_PLAYER_CONTROLLER_TIMEOUT_KEY);
 }
 
 
-gboolean rygel_player_controller_next (RygelPlayerController* self) {
+static gboolean rygel_player_controller_real_next (RygelPlayerController* self) {
 	gboolean result = FALSE;
 	guint _tmp0_ = 0U;
 	guint _tmp1_ = 0U;
 	guint _tmp2_ = 0U;
 	guint _tmp3_ = 0U;
 	const gchar* _tmp6_ = NULL;
-	g_return_val_if_fail (self != NULL, FALSE);
+	const gchar* _tmp7_ = NULL;
 	_tmp0_ = rygel_player_controller_get_track (self);
 	_tmp1_ = _tmp0_;
 	_tmp2_ = rygel_player_controller_get_n_tracks (self);
@@ -300,28 +341,37 @@ gboolean rygel_player_controller_next (RygelPlayerController* self) {
 		result = TRUE;
 		return result;
 	}
-	_tmp6_ = self->priv->_next_uri;
-	if (g_strcmp0 (_tmp6_, "") != 0) {
-		GUPnPMediaCollection* _tmp7_ = NULL;
-		_tmp7_ = self->priv->next_collection;
-		if (_tmp7_ != NULL) {
-			const gchar* _tmp8_ = NULL;
+	_tmp6_ = rygel_player_controller_get_next_uri (self);
+	_tmp7_ = _tmp6_;
+	if (g_strcmp0 (_tmp7_, "") != 0) {
+		GUPnPMediaCollection* _tmp8_ = NULL;
+		_tmp8_ = self->priv->next_collection;
+		if (_tmp8_ != NULL) {
 			const gchar* _tmp9_ = NULL;
-			GUPnPMediaCollection* _tmp10_ = NULL;
-			_tmp8_ = self->priv->_next_uri;
-			_tmp9_ = self->priv->_next_metadata;
-			_tmp10_ = self->priv->next_collection;
-			rygel_player_controller_set_playlist_uri (self, _tmp8_, _tmp9_, _tmp10_);
-		} else {
+			const gchar* _tmp10_ = NULL;
 			const gchar* _tmp11_ = NULL;
 			const gchar* _tmp12_ = NULL;
-			const gchar* _tmp13_ = NULL;
+			GUPnPMediaCollection* _tmp13_ = NULL;
+			_tmp9_ = rygel_player_controller_get_next_uri (self);
+			_tmp10_ = _tmp9_;
+			_tmp11_ = rygel_player_controller_get_next_metadata (self);
+			_tmp12_ = _tmp11_;
+			_tmp13_ = self->priv->next_collection;
+			rygel_player_controller_set_playlist_uri (self, _tmp10_, _tmp12_, _tmp13_);
+		} else {
 			const gchar* _tmp14_ = NULL;
-			_tmp11_ = self->priv->_next_uri;
-			_tmp12_ = self->priv->_next_metadata;
-			_tmp13_ = self->priv->next_mime;
-			_tmp14_ = self->priv->next_features;
-			rygel_player_controller_set_single_play_uri (self, _tmp11_, _tmp12_, _tmp13_, _tmp14_);
+			const gchar* _tmp15_ = NULL;
+			const gchar* _tmp16_ = NULL;
+			const gchar* _tmp17_ = NULL;
+			const gchar* _tmp18_ = NULL;
+			const gchar* _tmp19_ = NULL;
+			_tmp14_ = rygel_player_controller_get_next_uri (self);
+			_tmp15_ = _tmp14_;
+			_tmp16_ = rygel_player_controller_get_next_metadata (self);
+			_tmp17_ = _tmp16_;
+			_tmp18_ = self->priv->next_mime;
+			_tmp19_ = self->priv->next_features;
+			rygel_player_controller_set_single_play_uri (self, _tmp15_, _tmp17_, _tmp18_, _tmp19_);
 		}
 		rygel_player_controller_set_next_uri (self, "");
 		rygel_player_controller_set_next_metadata (self, "");
@@ -339,13 +389,18 @@ gboolean rygel_player_controller_next (RygelPlayerController* self) {
 }
 
 
-gboolean rygel_player_controller_previous (RygelPlayerController* self) {
+gboolean rygel_player_controller_next (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, FALSE);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->next (self);
+}
+
+
+static gboolean rygel_player_controller_real_previous (RygelPlayerController* self) {
 	gboolean result = FALSE;
 	guint _tmp0_ = 0U;
 	guint _tmp1_ = 0U;
 	guint _tmp2_ = 0U;
 	guint _tmp3_ = 0U;
-	g_return_val_if_fail (self != NULL, FALSE);
 	_tmp0_ = rygel_player_controller_get_track (self);
 	_tmp1_ = _tmp0_;
 	if (_tmp1_ <= ((guint) 1)) {
@@ -360,7 +415,13 @@ gboolean rygel_player_controller_previous (RygelPlayerController* self) {
 }
 
 
-void rygel_player_controller_set_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
+gboolean rygel_player_controller_previous (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, FALSE);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->previous (self);
+}
+
+
+static void rygel_player_controller_real_set_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
 	guint _tmp0_ = 0U;
 	const gchar* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
@@ -369,13 +430,17 @@ void rygel_player_controller_set_single_play_uri (RygelPlayerController* self, c
 	const gchar* _tmp6_ = NULL;
 	const gchar* _tmp7_ = NULL;
 	RygelMediaPlayer* _tmp8_ = NULL;
-	const gchar* _tmp9_ = NULL;
+	RygelMediaPlayer* _tmp9_ = NULL;
 	const gchar* _tmp10_ = NULL;
-	RygelMediaPlayer* _tmp11_ = NULL;
-	const gchar* _tmp12_ = NULL;
-	const gchar* _tmp13_ = NULL;
+	const gchar* _tmp11_ = NULL;
+	RygelMediaPlayer* _tmp12_ = NULL;
+	RygelMediaPlayer* _tmp13_ = NULL;
 	const gchar* _tmp14_ = NULL;
-	g_return_if_fail (self != NULL);
+	const gchar* _tmp15_ = NULL;
+	const gchar* _tmp16_ = NULL;
+	const gchar* _tmp17_ = NULL;
+	const gchar* _tmp18_ = NULL;
+	const gchar* _tmp19_ = NULL;
 	g_return_if_fail (uri != NULL);
 	g_return_if_fail (metadata != NULL);
 	_tmp0_ = self->priv->timeout_id;
@@ -397,23 +462,28 @@ void rygel_player_controller_set_single_play_uri (RygelPlayerController* self, c
 	if (_tmp6_ == NULL) {
 		_tmp6_ = "";
 	}
-	_tmp8_ = self->priv->_player;
-	rygel_media_player_set_mime_type (_tmp8_, _tmp6_);
-	_tmp10_ = features;
-	_tmp9_ = _tmp10_;
-	if (_tmp9_ == NULL) {
-		_tmp9_ = "*";
+	_tmp8_ = rygel_player_controller_get_player (self);
+	_tmp9_ = _tmp8_;
+	rygel_media_player_set_mime_type (_tmp9_, _tmp6_);
+	_tmp11_ = features;
+	_tmp10_ = _tmp11_;
+	if (_tmp10_ == NULL) {
+		_tmp10_ = "*";
 	}
-	_tmp11_ = self->priv->_player;
-	rygel_media_player_set_content_features (_tmp11_, _tmp9_);
-	_tmp12_ = self->priv->_metadata;
-	rygel_player_controller_set_track_metadata (self, _tmp12_);
-	_tmp13_ = self->priv->_uri;
-	rygel_player_controller_set_track_uri (self, _tmp13_);
+	_tmp12_ = rygel_player_controller_get_player (self);
+	_tmp13_ = _tmp12_;
+	rygel_media_player_set_content_features (_tmp13_, _tmp10_);
+	_tmp14_ = rygel_player_controller_get_metadata (self);
+	_tmp15_ = _tmp14_;
+	rygel_player_controller_set_track_metadata (self, _tmp15_);
+	_tmp16_ = rygel_player_controller_get_uri (self);
+	_tmp17_ = _tmp16_;
+	rygel_player_controller_set_track_uri (self, _tmp17_);
 	__g_list_free__g_object_unref0_0 (self->priv->playlist);
 	self->priv->playlist = NULL;
-	_tmp14_ = self->priv->_uri;
-	if (g_strcmp0 (_tmp14_, "") == 0) {
+	_tmp18_ = rygel_player_controller_get_uri (self);
+	_tmp19_ = _tmp18_;
+	if (g_strcmp0 (_tmp19_, "") == 0) {
 		rygel_player_controller_set_n_tracks (self, (guint) 0);
 		rygel_player_controller_set_track (self, (guint) 0);
 	} else {
@@ -423,7 +493,13 @@ void rygel_player_controller_set_single_play_uri (RygelPlayerController* self, c
 }
 
 
-void rygel_player_controller_set_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
+void rygel_player_controller_set_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_single_play_uri (self, uri, metadata, mime, features);
+}
+
+
+static void rygel_player_controller_real_set_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
 	guint _tmp0_ = 0U;
 	const gchar* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
@@ -437,7 +513,6 @@ void rygel_player_controller_set_playlist_uri (RygelPlayerController* self, cons
 	guint _tmp10_ = 0U;
 	guint _tmp11_ = 0U;
 	gboolean _tmp12_ = FALSE;
-	g_return_if_fail (self != NULL);
 	g_return_if_fail (uri != NULL);
 	g_return_if_fail (metadata != NULL);
 	g_return_if_fail (collection != NULL);
@@ -474,14 +549,19 @@ void rygel_player_controller_set_playlist_uri (RygelPlayerController* self, cons
 }
 
 
-void rygel_player_controller_set_next_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
+void rygel_player_controller_set_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_playlist_uri (self, uri, metadata, collection);
+}
+
+
+static void rygel_player_controller_real_set_next_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
 	const gchar* _tmp0_ = NULL;
 	const gchar* _tmp1_ = NULL;
 	const gchar* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
 	const gchar* _tmp4_ = NULL;
 	gchar* _tmp5_ = NULL;
-	g_return_if_fail (self != NULL);
 	g_return_if_fail (uri != NULL);
 	g_return_if_fail (metadata != NULL);
 	_tmp0_ = uri;
@@ -501,17 +581,22 @@ void rygel_player_controller_set_next_single_play_uri (RygelPlayerController* se
 }
 
 
+void rygel_player_controller_set_next_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_next_single_play_uri (self, uri, metadata, mime, features);
+}
+
+
 static gpointer _g_object_ref0 (gpointer self) {
 	return self ? g_object_ref (self) : NULL;
 }
 
 
-void rygel_player_controller_set_next_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
+static void rygel_player_controller_real_set_next_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
 	const gchar* _tmp0_ = NULL;
 	const gchar* _tmp1_ = NULL;
 	GUPnPMediaCollection* _tmp2_ = NULL;
 	GUPnPMediaCollection* _tmp3_ = NULL;
-	g_return_if_fail (self != NULL);
 	g_return_if_fail (uri != NULL);
 	g_return_if_fail (metadata != NULL);
 	g_return_if_fail (collection != NULL);
@@ -530,6 +615,12 @@ void rygel_player_controller_set_next_playlist_uri (RygelPlayerController* self,
 }
 
 
+void rygel_player_controller_set_next_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_next_playlist_uri (self, uri, metadata, collection);
+}
+
+
 static gboolean ___lambda4_ (RygelPlayerController* self) {
 	gboolean result = FALSE;
 	gboolean _tmp0_ = FALSE;
@@ -552,31 +643,33 @@ static gboolean ____lambda4__gsource_func (gpointer self) {
 static void rygel_player_controller_notify_state_cb (RygelPlayerController* self, GObject* player, GParamSpec* p) {
 	gchar* state = NULL;
 	RygelMediaPlayer* _tmp0_ = NULL;
-	gchar* _tmp1_ = NULL;
+	RygelMediaPlayer* _tmp1_ = NULL;
 	gchar* _tmp2_ = NULL;
-	const gchar* _tmp3_ = NULL;
+	gchar* _tmp3_ = NULL;
+	const gchar* _tmp4_ = NULL;
 	g_return_if_fail (self != NULL);
 	g_return_if_fail (player != NULL);
 	g_return_if_fail (p != NULL);
-	_tmp0_ = self->priv->_player;
-	_tmp1_ = rygel_media_player_get_playback_state (_tmp0_);
-	_tmp2_ = _tmp1_;
-	state = _tmp2_;
-	_tmp3_ = state;
-	if (g_strcmp0 (_tmp3_, "EOS") == 0) {
+	_tmp0_ = rygel_player_controller_get_player (self);
+	_tmp1_ = _tmp0_;
+	_tmp2_ = rygel_media_player_get_playback_state (_tmp1_);
+	_tmp3_ = _tmp2_;
+	state = _tmp3_;
+	_tmp4_ = state;
+	if (g_strcmp0 (_tmp4_, "EOS") == 0) {
 		g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ____lambda4__gsource_func, g_object_ref (self), g_object_unref);
 	} else {
-		const gchar* _tmp4_ = NULL;
 		const gchar* _tmp5_ = NULL;
-		_tmp4_ = self->priv->_playback_state;
-		_tmp5_ = state;
-		if (g_strcmp0 (_tmp4_, _tmp5_) != 0) {
-			const gchar* _tmp6_ = NULL;
-			gchar* _tmp7_ = NULL;
-			_tmp6_ = state;
-			_tmp7_ = g_strdup (_tmp6_);
+		const gchar* _tmp6_ = NULL;
+		_tmp5_ = self->priv->_playback_state;
+		_tmp6_ = state;
+		if (g_strcmp0 (_tmp5_, _tmp6_) != 0) {
+			const gchar* _tmp7_ = NULL;
+			gchar* _tmp8_ = NULL;
+			_tmp7_ = state;
+			_tmp8_ = g_strdup (_tmp7_);
 			_g_free0 (self->priv->_playback_state);
-			self->priv->_playback_state = _tmp7_;
+			self->priv->_playback_state = _tmp8_;
 			g_object_notify ((GObject*) self, "playback-state");
 		}
 	}
@@ -615,19 +708,20 @@ static void rygel_player_controller_apply_track (RygelPlayerController* self) {
 		GUPnPDIDLLiteResource* res = NULL;
 		GUPnPDIDLLiteItem* _tmp7_ = NULL;
 		const gchar* _tmp8_ = NULL;
-		GUPnPDIDLLiteResource* _tmp9_ = NULL;
-		GUPnPDIDLLiteItem* _tmp10_ = NULL;
-		gchar* _tmp11_ = NULL;
+		const gchar* _tmp9_ = NULL;
+		GUPnPDIDLLiteResource* _tmp10_ = NULL;
+		GUPnPDIDLLiteItem* _tmp11_ = NULL;
 		gchar* _tmp12_ = NULL;
 		gchar* _tmp13_ = NULL;
 		gchar* _tmp14_ = NULL;
-		GUPnPDIDLLiteResource* _tmp15_ = NULL;
-		const gchar* _tmp16_ = NULL;
-		gboolean _tmp17_ = FALSE;
-		GUPnPDIDLLiteItem* _tmp18_ = NULL;
-		const gchar* _tmp19_ = NULL;
+		gchar* _tmp15_ = NULL;
+		GUPnPDIDLLiteResource* _tmp16_ = NULL;
+		const gchar* _tmp17_ = NULL;
+		gboolean _tmp18_ = FALSE;
+		GUPnPDIDLLiteItem* _tmp19_ = NULL;
 		const gchar* _tmp20_ = NULL;
-		gboolean _tmp21_ = FALSE;
+		const gchar* _tmp21_ = NULL;
+		gboolean _tmp22_ = FALSE;
 		_tmp1_ = self->priv->playlist;
 		_tmp2_ = rygel_player_controller_get_track (self);
 		_tmp3_ = _tmp2_;
@@ -636,41 +730,42 @@ static void rygel_player_controller_apply_track (RygelPlayerController* self) {
 		_tmp6_ = _g_object_ref0 ((GUPnPDIDLLiteItem*) _tmp5_);
 		item = _tmp6_;
 		_tmp7_ = item;
-		_tmp8_ = self->priv->_protocol_info;
-		_tmp9_ = gupnp_didl_lite_object_get_compat_resource ((GUPnPDIDLLiteObject*) _tmp7_, _tmp8_, TRUE);
-		res = _tmp9_;
-		_tmp10_ = item;
-		_tmp11_ = gupnp_didl_lite_object_get_xml_string ((GUPnPDIDLLiteObject*) _tmp10_);
-		_tmp12_ = _tmp11_;
-		_tmp13_ = g_strdup_printf (RYGEL_PLAYER_CONTROLLER_DIDL_FRAME_TEMPLATE, _tmp12_);
-		_tmp14_ = _tmp13_;
-		rygel_player_controller_set_track_metadata (self, _tmp14_);
-		_g_free0 (_tmp14_);
-		_g_free0 (_tmp12_);
-		_tmp15_ = res;
-		_tmp16_ = gupnp_didl_lite_resource_get_uri (_tmp15_);
-		rygel_player_controller_set_track_uri (self, _tmp16_);
-		_tmp18_ = item;
-		_tmp19_ = gupnp_didl_lite_object_get_upnp_class ((GUPnPDIDLLiteObject*) _tmp18_);
-		_tmp20_ = _tmp19_;
-		_tmp21_ = g_str_has_prefix (_tmp20_, "object.item.image");
-		if (_tmp21_) {
-			const gchar* _tmp22_ = NULL;
+		_tmp8_ = rygel_player_controller_get_protocol_info (self);
+		_tmp9_ = _tmp8_;
+		_tmp10_ = gupnp_didl_lite_object_get_compat_resource ((GUPnPDIDLLiteObject*) _tmp7_, _tmp9_, TRUE);
+		res = _tmp10_;
+		_tmp11_ = item;
+		_tmp12_ = gupnp_didl_lite_object_get_xml_string ((GUPnPDIDLLiteObject*) _tmp11_);
+		_tmp13_ = _tmp12_;
+		_tmp14_ = g_strdup_printf (RYGEL_PLAYER_CONTROLLER_DIDL_FRAME_TEMPLATE, _tmp13_);
+		_tmp15_ = _tmp14_;
+		rygel_player_controller_set_track_metadata (self, _tmp15_);
+		_g_free0 (_tmp15_);
+		_g_free0 (_tmp13_);
+		_tmp16_ = res;
+		_tmp17_ = gupnp_didl_lite_resource_get_uri (_tmp16_);
+		rygel_player_controller_set_track_uri (self, _tmp17_);
+		_tmp19_ = item;
+		_tmp20_ = gupnp_didl_lite_object_get_upnp_class ((GUPnPDIDLLiteObject*) _tmp19_);
+		_tmp21_ = _tmp20_;
+		_tmp22_ = g_str_has_prefix (_tmp21_, "object.item.image");
+		if (_tmp22_) {
 			const gchar* _tmp23_ = NULL;
-			_tmp22_ = rygel_player_controller_get_playback_state (self);
-			_tmp23_ = _tmp22_;
-			_tmp17_ = g_strcmp0 (_tmp23_, "STOPPED") != 0;
+			const gchar* _tmp24_ = NULL;
+			_tmp23_ = rygel_player_controller_get_playback_state (self);
+			_tmp24_ = _tmp23_;
+			_tmp18_ = g_strcmp0 (_tmp24_, "STOPPED") != 0;
 		} else {
-			_tmp17_ = FALSE;
+			_tmp18_ = FALSE;
 		}
-		if (_tmp17_) {
-			GUPnPDIDLLiteItem* _tmp24_ = NULL;
-			glong _tmp25_ = 0L;
+		if (_tmp18_) {
+			GUPnPDIDLLiteItem* _tmp25_ = NULL;
 			glong _tmp26_ = 0L;
-			_tmp24_ = item;
-			_tmp25_ = gupnp_didl_lite_item_get_lifetime (_tmp24_);
-			_tmp26_ = _tmp25_;
-			rygel_player_controller_setup_image_timeouts (self, _tmp26_);
+			glong _tmp27_ = 0L;
+			_tmp25_ = item;
+			_tmp26_ = gupnp_didl_lite_item_get_lifetime (_tmp25_);
+			_tmp27_ = _tmp26_;
+			rygel_player_controller_setup_image_timeouts (self, _tmp27_);
 		}
 		_g_object_unref0 (res);
 		_g_object_unref0 (item);
@@ -765,12 +860,12 @@ static void rygel_player_controller_on_setting_changed (RygelPlayerController* s
 		_tmp6_ = rygel_configuration_get_int (_tmp4_, RYGEL_PLAYER_CONTROLLER_CONFIG_SECTION, RYGEL_PLAYER_CONTROLLER_TIMEOUT_KEY, 0, _tmp5_, &_inner_error_);
 		_tmp3_ = _tmp6_;
 		if (_inner_error_ != NULL) {
-			goto __catch2_g_error;
+			goto __catch1_g_error;
 		}
 		self->priv->default_image_timeout = (guint) _tmp3_;
 	}
-	goto __finally2;
-	__catch2_g_error:
+	goto __finally1;
+	__catch1_g_error:
 	{
 		GError* _error_ = NULL;
 		_error_ = _inner_error_;
@@ -778,7 +873,7 @@ static void rygel_player_controller_on_setting_changed (RygelPlayerController* s
 		self->priv->default_image_timeout = (guint) RYGEL_PLAYER_CONTROLLER_DEFAULT_IMAGE_TIMEOUT;
 		_g_error_free0 (_error_);
 	}
-	__finally2:
+	__finally1:
 	if (_inner_error_ != NULL) {
 		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
 		g_clear_error (&_inner_error_);
@@ -816,7 +911,7 @@ static gchar* string_replace (const gchar* self, const gchar* old, const gchar*
 		regex = _tmp4_;
 		if (_inner_error_ != NULL) {
 			if (_inner_error_->domain == G_REGEX_ERROR) {
-				goto __catch3_g_regex_error;
+				goto __catch2_g_regex_error;
 			}
 			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
 			g_clear_error (&_inner_error_);
@@ -829,7 +924,7 @@ static gchar* string_replace (const gchar* self, const gchar* old, const gchar*
 		if (_inner_error_ != NULL) {
 			_g_regex_unref0 (regex);
 			if (_inner_error_->domain == G_REGEX_ERROR) {
-				goto __catch3_g_regex_error;
+				goto __catch2_g_regex_error;
 			}
 			_g_regex_unref0 (regex);
 			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
@@ -843,8 +938,8 @@ static gchar* string_replace (const gchar* self, const gchar* old, const gchar*
 		_g_regex_unref0 (regex);
 		return result;
 	}
-	goto __finally3;
-	__catch3_g_regex_error:
+	goto __finally2;
+	__catch2_g_regex_error:
 	{
 		GError* e = NULL;
 		e = _inner_error_;
@@ -852,7 +947,7 @@ static gchar* string_replace (const gchar* self, const gchar* old, const gchar*
 		g_assert_not_reached ();
 		_g_error_free0 (e);
 	}
-	__finally3:
+	__finally2:
 	if (_inner_error_ != NULL) {
 		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
 		g_clear_error (&_inner_error_);
@@ -901,9 +996,16 @@ static gchar* rygel_player_controller_unescape (RygelPlayerController* self, con
 
 
 static RygelMediaPlayer* rygel_player_controller_get_player (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_player (self);
+}
+
+
+static RygelMediaPlayer* rygel_player_controller_real_get_player (RygelPlayerController* base) {
 	RygelMediaPlayer* result;
+	RygelPlayerController* self;
 	RygelMediaPlayer* _tmp0_ = NULL;
-	g_return_val_if_fail (self != NULL, NULL);
+	self = base;
 	_tmp0_ = self->priv->_player;
 	result = _tmp0_;
 	return result;
@@ -911,9 +1013,16 @@ static RygelMediaPlayer* rygel_player_controller_get_player (RygelPlayerControll
 
 
 static void rygel_player_controller_set_player (RygelPlayerController* self, RygelMediaPlayer* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_player (self, value);
+}
+
+
+static void rygel_player_controller_real_set_player (RygelPlayerController* base, RygelMediaPlayer* value) {
+	RygelPlayerController* self;
 	RygelMediaPlayer* _tmp0_ = NULL;
 	RygelMediaPlayer* _tmp1_ = NULL;
-	g_return_if_fail (self != NULL);
+	self = base;
 	_tmp0_ = value;
 	_tmp1_ = _g_object_ref0 (_tmp0_);
 	_g_object_unref0 (self->priv->_player);
@@ -923,9 +1032,16 @@ static void rygel_player_controller_set_player (RygelPlayerController* self, Ryg
 
 
 static const gchar* rygel_player_controller_get_protocol_info (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_protocol_info (self);
+}
+
+
+static const gchar* rygel_player_controller_real_get_protocol_info (RygelPlayerController* base) {
 	const gchar* result;
+	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
-	g_return_val_if_fail (self != NULL, NULL);
+	self = base;
 	_tmp0_ = self->priv->_protocol_info;
 	result = _tmp0_;
 	return result;
@@ -933,9 +1049,16 @@ static const gchar* rygel_player_controller_get_protocol_info (RygelPlayerContro
 
 
 static void rygel_player_controller_set_protocol_info (RygelPlayerController* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_protocol_info (self, value);
+}
+
+
+static void rygel_player_controller_real_set_protocol_info (RygelPlayerController* base, const gchar* value) {
+	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
 	gchar* _tmp1_ = NULL;
-	g_return_if_fail (self != NULL);
+	self = base;
 	_tmp0_ = value;
 	_tmp1_ = g_strdup (_tmp0_);
 	_g_free0 (self->priv->_protocol_info);
@@ -945,9 +1068,16 @@ static void rygel_player_controller_set_protocol_info (RygelPlayerController* se
 
 
 const gchar* rygel_player_controller_get_playback_state (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_playback_state (self);
+}
+
+
+static const gchar* rygel_player_controller_real_get_playback_state (RygelPlayerController* base) {
 	const gchar* result;
+	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
-	g_return_val_if_fail (self != NULL, NULL);
+	self = base;
 	_tmp0_ = self->priv->_playback_state;
 	result = _tmp0_;
 	return result;
@@ -955,19 +1085,35 @@ const gchar* rygel_player_controller_get_playback_state (RygelPlayerController*
 
 
 void rygel_player_controller_set_playback_state (RygelPlayerController* self, const gchar* value) {
-	RygelMediaPlayer* _tmp0_ = NULL;
-	const gchar* _tmp1_ = NULL;
 	g_return_if_fail (self != NULL);
-	_tmp0_ = self->priv->_player;
-	_tmp1_ = value;
-	rygel_media_player_set_playback_state (_tmp0_, _tmp1_);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_playback_state (self, value);
+}
+
+
+static void rygel_player_controller_real_set_playback_state (RygelPlayerController* base, const gchar* value) {
+	RygelPlayerController* self;
+	RygelMediaPlayer* _tmp0_ = NULL;
+	RygelMediaPlayer* _tmp1_ = NULL;
+	const gchar* _tmp2_ = NULL;
+	self = base;
+	_tmp0_ = rygel_player_controller_get_player (self);
+	_tmp1_ = _tmp0_;
+	_tmp2_ = value;
+	rygel_media_player_set_playback_state (_tmp1_, _tmp2_);
 }
 
 
 guint rygel_player_controller_get_n_tracks (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, 0U);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_n_tracks (self);
+}
+
+
+static guint rygel_player_controller_real_get_n_tracks (RygelPlayerController* base) {
 	guint result;
+	RygelPlayerController* self;
 	guint _tmp0_ = 0U;
-	g_return_val_if_fail (self != NULL, 0U);
+	self = base;
 	_tmp0_ = self->priv->_n_tracks;
 	result = _tmp0_;
 	return result;
@@ -975,9 +1121,16 @@ guint rygel_player_controller_get_n_tracks (RygelPlayerController* self) {
 
 
 static void rygel_player_controller_set_n_tracks (RygelPlayerController* self, guint value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_n_tracks (self, value);
+}
+
+
+static void rygel_player_controller_real_set_n_tracks (RygelPlayerController* base, guint value) {
+	RygelPlayerController* self;
 	guint _tmp0_ = 0U;
 	guint _tmp1_ = 0U;
-	g_return_if_fail (self != NULL);
+	self = base;
 	_tmp0_ = value;
 	_tmp1_ = self->priv->_n_tracks;
 	if (_tmp0_ != _tmp1_) {
@@ -990,9 +1143,16 @@ static void rygel_player_controller_set_n_tracks (RygelPlayerController* self, g
 
 
 guint rygel_player_controller_get_track (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, 0U);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_track (self);
+}
+
+
+static guint rygel_player_controller_real_get_track (RygelPlayerController* base) {
 	guint result;
+	RygelPlayerController* self;
 	guint _tmp0_ = 0U;
-	g_return_val_if_fail (self != NULL, 0U);
+	self = base;
 	_tmp0_ = self->priv->_track;
 	result = _tmp0_;
 	return result;
@@ -1000,9 +1160,16 @@ guint rygel_player_controller_get_track (RygelPlayerController* self) {
 
 
 void rygel_player_controller_set_track (RygelPlayerController* self, guint value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_track (self, value);
+}
+
+
+static void rygel_player_controller_real_set_track (RygelPlayerController* base, guint value) {
+	RygelPlayerController* self;
 	guint _tmp0_ = 0U;
 	guint _tmp1_ = 0U;
-	g_return_if_fail (self != NULL);
+	self = base;
 	_tmp0_ = value;
 	_tmp1_ = self->priv->_track;
 	if (_tmp0_ != _tmp1_) {
@@ -1016,9 +1183,16 @@ void rygel_player_controller_set_track (RygelPlayerController* self, guint value
 
 
 const gchar* rygel_player_controller_get_uri (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_uri (self);
+}
+
+
+static const gchar* rygel_player_controller_real_get_uri (RygelPlayerController* base) {
 	const gchar* result;
+	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
-	g_return_val_if_fail (self != NULL, NULL);
+	self = base;
 	_tmp0_ = self->priv->_uri;
 	result = _tmp0_;
 	return result;
@@ -1026,9 +1200,16 @@ const gchar* rygel_player_controller_get_uri (RygelPlayerController* self) {
 
 
 static void rygel_player_controller_set_uri (RygelPlayerController* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_uri (self, value);
+}
+
+
+static void rygel_player_controller_real_set_uri (RygelPlayerController* base, const gchar* value) {
+	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
 	gchar* _tmp1_ = NULL;
-	g_return_if_fail (self != NULL);
+	self = base;
 	_tmp0_ = value;
 	_tmp1_ = g_strdup (_tmp0_);
 	_g_free0 (self->priv->_uri);
@@ -1038,9 +1219,16 @@ static void rygel_player_controller_set_uri (RygelPlayerController* self, const
 
 
 const gchar* rygel_player_controller_get_metadata (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_metadata (self);
+}
+
+
+static const gchar* rygel_player_controller_real_get_metadata (RygelPlayerController* base) {
 	const gchar* result;
+	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
-	g_return_val_if_fail (self != NULL, NULL);
+	self = base;
 	_tmp0_ = self->priv->_metadata;
 	result = _tmp0_;
 	return result;
@@ -1048,9 +1236,16 @@ const gchar* rygel_player_controller_get_metadata (RygelPlayerController* self)
 
 
 static void rygel_player_controller_set_metadata (RygelPlayerController* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_metadata (self, value);
+}
+
+
+static void rygel_player_controller_real_set_metadata (RygelPlayerController* base, const gchar* value) {
+	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
 	gchar* _tmp1_ = NULL;
-	g_return_if_fail (self != NULL);
+	self = base;
 	_tmp0_ = value;
 	_tmp1_ = g_strdup (_tmp0_);
 	_g_free0 (self->priv->_metadata);
@@ -1060,111 +1255,158 @@ static void rygel_player_controller_set_metadata (RygelPlayerController* self, c
 
 
 gchar* rygel_player_controller_get_track_uri (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_track_uri (self);
+}
+
+
+static gchar* rygel_player_controller_real_get_track_uri (RygelPlayerController* base) {
 	gchar* result;
+	RygelPlayerController* self;
 	RygelMediaPlayer* _tmp0_ = NULL;
-	gchar* _tmp1_ = NULL;
+	RygelMediaPlayer* _tmp1_ = NULL;
 	gchar* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
-	gboolean _tmp4_ = FALSE;
-	g_return_val_if_fail (self != NULL, NULL);
-	_tmp0_ = self->priv->_player;
-	_tmp1_ = rygel_media_player_get_uri (_tmp0_);
-	_tmp2_ = _tmp1_;
+	gchar* _tmp4_ = NULL;
+	gboolean _tmp5_ = FALSE;
+	self = base;
+	_tmp0_ = rygel_player_controller_get_player (self);
+	_tmp1_ = _tmp0_;
+	_tmp2_ = rygel_media_player_get_uri (_tmp1_);
 	_tmp3_ = _tmp2_;
-	_tmp4_ = _tmp3_ != NULL;
-	_g_free0 (_tmp3_);
-	if (_tmp4_) {
-		RygelMediaPlayer* _tmp5_ = NULL;
-		gchar* _tmp6_ = NULL;
-		gchar* _tmp7_ = NULL;
+	_tmp4_ = _tmp3_;
+	_tmp5_ = _tmp4_ != NULL;
+	_g_free0 (_tmp4_);
+	if (_tmp5_) {
+		RygelMediaPlayer* _tmp6_ = NULL;
+		RygelMediaPlayer* _tmp7_ = NULL;
 		gchar* _tmp8_ = NULL;
 		gchar* _tmp9_ = NULL;
 		gchar* _tmp10_ = NULL;
-		_tmp5_ = self->priv->_player;
-		_tmp6_ = rygel_media_player_get_uri (_tmp5_);
+		gchar* _tmp11_ = NULL;
+		gchar* _tmp12_ = NULL;
+		_tmp6_ = rygel_player_controller_get_player (self);
 		_tmp7_ = _tmp6_;
-		_tmp8_ = _tmp7_;
-		_tmp9_ = g_markup_escape_text (_tmp8_, (gssize) (-1));
+		_tmp8_ = rygel_media_player_get_uri (_tmp7_);
+		_tmp9_ = _tmp8_;
 		_tmp10_ = _tmp9_;
-		_g_free0 (_tmp8_);
-		result = _tmp10_;
+		_tmp11_ = g_markup_escape_text (_tmp10_, (gssize) (-1));
+		_tmp12_ = _tmp11_;
+		_g_free0 (_tmp10_);
+		result = _tmp12_;
 		return result;
 	} else {
-		gchar* _tmp11_ = NULL;
-		_tmp11_ = g_strdup ("");
-		result = _tmp11_;
+		gchar* _tmp13_ = NULL;
+		_tmp13_ = g_strdup ("");
+		result = _tmp13_;
 		return result;
 	}
 }
 
 
 static void rygel_player_controller_set_track_uri (RygelPlayerController* self, const gchar* value) {
-	RygelMediaPlayer* _tmp0_ = NULL;
-	const gchar* _tmp1_ = NULL;
 	g_return_if_fail (self != NULL);
-	_tmp0_ = self->priv->_player;
-	_tmp1_ = value;
-	rygel_media_player_set_uri (_tmp0_, _tmp1_);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_track_uri (self, value);
+}
+
+
+static void rygel_player_controller_real_set_track_uri (RygelPlayerController* base, const gchar* value) {
+	RygelPlayerController* self;
+	RygelMediaPlayer* _tmp0_ = NULL;
+	RygelMediaPlayer* _tmp1_ = NULL;
+	const gchar* _tmp2_ = NULL;
+	self = base;
+	_tmp0_ = rygel_player_controller_get_player (self);
+	_tmp1_ = _tmp0_;
+	_tmp2_ = value;
+	rygel_media_player_set_uri (_tmp1_, _tmp2_);
 }
 
 
 gchar* rygel_player_controller_get_track_metadata (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_track_metadata (self);
+}
+
+
+static gchar* rygel_player_controller_real_get_track_metadata (RygelPlayerController* base) {
 	gchar* result;
+	RygelPlayerController* self;
 	gchar* _tmp0_ = NULL;
 	RygelMediaPlayer* _tmp1_ = NULL;
-	gchar* _tmp2_ = NULL;
+	RygelMediaPlayer* _tmp2_ = NULL;
 	gchar* _tmp3_ = NULL;
-	gchar* _tmp5_ = NULL;
-	g_return_val_if_fail (self != NULL, NULL);
-	_tmp1_ = self->priv->_player;
-	_tmp2_ = rygel_media_player_get_metadata (_tmp1_);
-	_tmp3_ = _tmp2_;
-	_tmp0_ = _tmp3_;
+	gchar* _tmp4_ = NULL;
+	gchar* _tmp6_ = NULL;
+	self = base;
+	_tmp1_ = rygel_player_controller_get_player (self);
+	_tmp2_ = _tmp1_;
+	_tmp3_ = rygel_media_player_get_metadata (_tmp2_);
+	_tmp4_ = _tmp3_;
+	_tmp0_ = _tmp4_;
 	if (_tmp0_ == NULL) {
-		gchar* _tmp4_ = NULL;
-		_tmp4_ = g_strdup ("");
+		gchar* _tmp5_ = NULL;
+		_tmp5_ = g_strdup ("");
 		_g_free0 (_tmp0_);
-		_tmp0_ = _tmp4_;
+		_tmp0_ = _tmp5_;
 	}
-	_tmp5_ = _tmp0_;
+	_tmp6_ = _tmp0_;
 	_tmp0_ = NULL;
-	result = _tmp5_;
+	result = _tmp6_;
 	_g_free0 (_tmp0_);
 	return result;
 }
 
 
 static void rygel_player_controller_set_track_metadata (RygelPlayerController* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_track_metadata (self, value);
+}
+
+
+static void rygel_player_controller_real_set_track_metadata (RygelPlayerController* base, const gchar* value) {
+	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
 	gboolean _tmp1_ = FALSE;
-	g_return_if_fail (self != NULL);
+	self = base;
 	_tmp0_ = value;
 	_tmp1_ = g_str_has_prefix (_tmp0_, "&lt;");
 	if (_tmp1_) {
 		RygelMediaPlayer* _tmp2_ = NULL;
-		const gchar* _tmp3_ = NULL;
-		gchar* _tmp4_ = NULL;
+		RygelMediaPlayer* _tmp3_ = NULL;
+		const gchar* _tmp4_ = NULL;
 		gchar* _tmp5_ = NULL;
-		_tmp2_ = self->priv->_player;
-		_tmp3_ = value;
-		_tmp4_ = rygel_player_controller_unescape (self, _tmp3_);
-		_tmp5_ = _tmp4_;
-		rygel_media_player_set_metadata (_tmp2_, _tmp5_);
-		_g_free0 (_tmp5_);
+		gchar* _tmp6_ = NULL;
+		_tmp2_ = rygel_player_controller_get_player (self);
+		_tmp3_ = _tmp2_;
+		_tmp4_ = value;
+		_tmp5_ = rygel_player_controller_unescape (self, _tmp4_);
+		_tmp6_ = _tmp5_;
+		rygel_media_player_set_metadata (_tmp3_, _tmp6_);
+		_g_free0 (_tmp6_);
 	} else {
-		RygelMediaPlayer* _tmp6_ = NULL;
-		const gchar* _tmp7_ = NULL;
-		_tmp6_ = self->priv->_player;
-		_tmp7_ = value;
-		rygel_media_player_set_metadata (_tmp6_, _tmp7_);
+		RygelMediaPlayer* _tmp7_ = NULL;
+		RygelMediaPlayer* _tmp8_ = NULL;
+		const gchar* _tmp9_ = NULL;
+		_tmp7_ = rygel_player_controller_get_player (self);
+		_tmp8_ = _tmp7_;
+		_tmp9_ = value;
+		rygel_media_player_set_metadata (_tmp8_, _tmp9_);
 	}
 }
 
 
 const gchar* rygel_player_controller_get_next_uri (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_next_uri (self);
+}
+
+
+static const gchar* rygel_player_controller_real_get_next_uri (RygelPlayerController* base) {
 	const gchar* result;
+	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
-	g_return_val_if_fail (self != NULL, NULL);
+	self = base;
 	_tmp0_ = self->priv->_next_uri;
 	result = _tmp0_;
 	return result;
@@ -1172,9 +1414,16 @@ const gchar* rygel_player_controller_get_next_uri (RygelPlayerController* self)
 
 
 static void rygel_player_controller_set_next_uri (RygelPlayerController* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_next_uri (self, value);
+}
+
+
+static void rygel_player_controller_real_set_next_uri (RygelPlayerController* base, const gchar* value) {
+	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
 	gchar* _tmp1_ = NULL;
-	g_return_if_fail (self != NULL);
+	self = base;
 	_tmp0_ = value;
 	_tmp1_ = g_strdup (_tmp0_);
 	_g_free0 (self->priv->_next_uri);
@@ -1184,9 +1433,16 @@ static void rygel_player_controller_set_next_uri (RygelPlayerController* self, c
 
 
 const gchar* rygel_player_controller_get_next_metadata (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_next_metadata (self);
+}
+
+
+static const gchar* rygel_player_controller_real_get_next_metadata (RygelPlayerController* base) {
 	const gchar* result;
+	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
-	g_return_val_if_fail (self != NULL, NULL);
+	self = base;
 	_tmp0_ = self->priv->_next_metadata;
 	result = _tmp0_;
 	return result;
@@ -1194,9 +1450,16 @@ const gchar* rygel_player_controller_get_next_metadata (RygelPlayerController* s
 
 
 static void rygel_player_controller_set_next_metadata (RygelPlayerController* self, const gchar* value) {
+	g_return_if_fail (self != NULL);
+	RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->set_next_metadata (self, value);
+}
+
+
+static void rygel_player_controller_real_set_next_metadata (RygelPlayerController* base, const gchar* value) {
+	RygelPlayerController* self;
 	const gchar* _tmp0_ = NULL;
 	gchar* _tmp1_ = NULL;
-	g_return_if_fail (self != NULL);
+	self = base;
 	_tmp0_ = value;
 	_tmp1_ = g_strdup (_tmp0_);
 	_g_free0 (self->priv->_next_metadata);
@@ -1206,7 +1469,14 @@ static void rygel_player_controller_set_next_metadata (RygelPlayerController* se
 
 
 gchar* rygel_player_controller_get_current_transport_actions (RygelPlayerController* self) {
+	g_return_val_if_fail (self != NULL, NULL);
+	return RYGEL_PLAYER_CONTROLLER_GET_CLASS (self)->get_current_transport_actions (self);
+}
+
+
+static gchar* rygel_player_controller_real_get_current_transport_actions (RygelPlayerController* base) {
 	gchar* result;
+	RygelPlayerController* self;
 	gchar* actions = NULL;
 	const gchar* _tmp0_ = NULL;
 	const gchar* _tmp1_ = NULL;
@@ -1224,13 +1494,14 @@ gchar* rygel_player_controller_get_current_transport_actions (RygelPlayerControl
 	guint _tmp16_ = 0U;
 	guint _tmp17_ = 0U;
 	RygelMediaPlayer* _tmp20_ = NULL;
-	gboolean _tmp21_ = FALSE;
+	RygelMediaPlayer* _tmp21_ = NULL;
 	gboolean _tmp22_ = FALSE;
-	gboolean _tmp25_ = FALSE;
-	const gchar* _tmp26_ = NULL;
-	gboolean _tmp32_ = FALSE;
-	const gchar* _tmp33_ = NULL;
-	g_return_val_if_fail (self != NULL, NULL);
+	gboolean _tmp23_ = FALSE;
+	gboolean _tmp26_ = FALSE;
+	const gchar* _tmp27_ = NULL;
+	gboolean _tmp34_ = FALSE;
+	const gchar* _tmp35_ = NULL;
+	self = base;
 	actions = NULL;
 	_tmp0_ = rygel_player_controller_get_playback_state (self);
 	_tmp1_ = _tmp0_;
@@ -1307,113 +1578,120 @@ gchar* rygel_player_controller_get_current_transport_actions (RygelPlayerControl
 		_g_free0 (actions);
 		actions = _tmp19_;
 	}
-	_tmp20_ = self->priv->_player;
-	_tmp21_ = rygel_media_player_get_can_seek (_tmp20_);
-	_tmp22_ = _tmp21_;
-	if (_tmp22_) {
-		const gchar* _tmp23_ = NULL;
-		gchar* _tmp24_ = NULL;
-		_tmp23_ = actions;
-		_tmp24_ = g_strconcat (_tmp23_, ",X_DLNA_SeekTime", NULL);
+	_tmp20_ = rygel_player_controller_get_player (self);
+	_tmp21_ = _tmp20_;
+	_tmp22_ = rygel_media_player_get_can_seek (_tmp21_);
+	_tmp23_ = _tmp22_;
+	if (_tmp23_) {
+		const gchar* _tmp24_ = NULL;
+		gchar* _tmp25_ = NULL;
+		_tmp24_ = actions;
+		_tmp25_ = g_strconcat (_tmp24_, ",X_DLNA_SeekTime", NULL);
 		_g_free0 (actions);
-		actions = _tmp24_;
+		actions = _tmp25_;
 	}
-	_tmp26_ = actions;
-	if (_tmp26_ != NULL) {
-		RygelMediaPlayer* _tmp27_ = NULL;
-		gboolean _tmp28_ = FALSE;
-		gboolean _tmp29_ = FALSE;
-		_tmp27_ = self->priv->_player;
-		_tmp28_ = rygel_media_player_get_can_seek_bytes (_tmp27_);
+	_tmp27_ = actions;
+	if (_tmp27_ != NULL) {
+		RygelMediaPlayer* _tmp28_ = NULL;
+		RygelMediaPlayer* _tmp29_ = NULL;
+		gboolean _tmp30_ = FALSE;
+		gboolean _tmp31_ = FALSE;
+		_tmp28_ = rygel_player_controller_get_player (self);
 		_tmp29_ = _tmp28_;
-		_tmp25_ = _tmp29_;
+		_tmp30_ = rygel_media_player_get_can_seek_bytes (_tmp29_);
+		_tmp31_ = _tmp30_;
+		_tmp26_ = _tmp31_;
 	} else {
-		_tmp25_ = FALSE;
+		_tmp26_ = FALSE;
 	}
-	if (_tmp25_) {
-		const gchar* _tmp30_ = NULL;
-		gchar* _tmp31_ = NULL;
-		_tmp30_ = actions;
-		_tmp31_ = g_strconcat (_tmp30_, ",X_DLNA_SeekByte", NULL);
+	if (_tmp26_) {
+		const gchar* _tmp32_ = NULL;
+		gchar* _tmp33_ = NULL;
+		_tmp32_ = actions;
+		_tmp33_ = g_strconcat (_tmp32_, ",X_DLNA_SeekByte", NULL);
 		_g_free0 (actions);
-		actions = _tmp31_;
+		actions = _tmp33_;
 	}
-	_tmp33_ = actions;
-	if (_tmp33_ != NULL) {
-		RygelMediaPlayer* _tmp34_ = NULL;
-		gchar** _tmp35_ = NULL;
-		gint _tmp35__length1 = 0;
-		gchar** _tmp36_ = NULL;
-		gint _tmp36__length1 = 0;
-		gchar** _tmp37_ = NULL;
-		gint _tmp37__length1 = 0;
-		_tmp34_ = self->priv->_player;
-		_tmp35_ = rygel_media_player_get_allowed_playback_speeds (_tmp34_, &_tmp35__length1);
-		_tmp36_ = _tmp35_;
-		_tmp36__length1 = _tmp35__length1;
+	_tmp35_ = actions;
+	if (_tmp35_ != NULL) {
+		RygelMediaPlayer* _tmp36_ = NULL;
+		RygelMediaPlayer* _tmp37_ = NULL;
+		gchar** _tmp38_ = NULL;
+		gint _tmp38__length1 = 0;
+		gchar** _tmp39_ = NULL;
+		gint _tmp39__length1 = 0;
+		gchar** _tmp40_ = NULL;
+		gint _tmp40__length1 = 0;
+		_tmp36_ = rygel_player_controller_get_player (self);
 		_tmp37_ = _tmp36_;
-		_tmp37__length1 = _tmp36__length1;
-		_tmp32_ = _tmp36__length1 > 1;
-		_tmp37_ = (_vala_array_free (_tmp37_, _tmp37__length1, (GDestroyNotify) g_free), NULL);
+		_tmp38_ = rygel_media_player_get_allowed_playback_speeds (_tmp37_, &_tmp38__length1);
+		_tmp39_ = _tmp38_;
+		_tmp39__length1 = _tmp38__length1;
+		_tmp40_ = _tmp39_;
+		_tmp40__length1 = _tmp39__length1;
+		_tmp34_ = _tmp39__length1 > 1;
+		_tmp40_ = (_vala_array_free (_tmp40_, _tmp40__length1, (GDestroyNotify) g_free), NULL);
 	} else {
-		_tmp32_ = FALSE;
+		_tmp34_ = FALSE;
 	}
-	if (_tmp32_) {
+	if (_tmp34_) {
 		gchar* play_speeds = NULL;
-		gchar* _tmp38_ = NULL;
-		RygelMediaPlayer* _tmp39_ = NULL;
-		gchar** _tmp40_ = NULL;
-		gint _tmp40__length1 = 0;
-		gchar** _tmp41_ = NULL;
-		gint _tmp41__length1 = 0;
-		const gchar* _tmp52_ = NULL;
-		const gchar* _tmp53_ = NULL;
-		gchar* _tmp54_ = NULL;
-		_tmp38_ = g_strdup ("");
-		play_speeds = _tmp38_;
-		_tmp39_ = self->priv->_player;
-		_tmp40_ = rygel_media_player_get_allowed_playback_speeds (_tmp39_, &_tmp40__length1);
-		_tmp41_ = _tmp40_;
-		_tmp41__length1 = _tmp40__length1;
+		gchar* _tmp41_ = NULL;
+		RygelMediaPlayer* _tmp42_ = NULL;
+		RygelMediaPlayer* _tmp43_ = NULL;
+		gchar** _tmp44_ = NULL;
+		gint _tmp44__length1 = 0;
+		gchar** _tmp45_ = NULL;
+		gint _tmp45__length1 = 0;
+		const gchar* _tmp56_ = NULL;
+		const gchar* _tmp57_ = NULL;
+		gchar* _tmp58_ = NULL;
+		_tmp41_ = g_strdup ("");
+		play_speeds = _tmp41_;
+		_tmp42_ = rygel_player_controller_get_player (self);
+		_tmp43_ = _tmp42_;
+		_tmp44_ = rygel_media_player_get_allowed_playback_speeds (_tmp43_, &_tmp44__length1);
+		_tmp45_ = _tmp44_;
+		_tmp45__length1 = _tmp44__length1;
 		{
 			gchar** speed_collection = NULL;
 			gint speed_collection_length1 = 0;
 			gint _speed_collection_size_ = 0;
 			gint speed_it = 0;
-			speed_collection = _tmp41_;
-			speed_collection_length1 = _tmp41__length1;
-			for (speed_it = 0; speed_it < _tmp41__length1; speed_it = speed_it + 1) {
-				gchar* _tmp42_ = NULL;
+			speed_collection = _tmp45_;
+			speed_collection_length1 = _tmp45__length1;
+			for (speed_it = 0; speed_it < _tmp45__length1; speed_it = speed_it + 1) {
+				gchar* _tmp46_ = NULL;
 				gchar* speed = NULL;
-				_tmp42_ = g_strdup (speed_collection[speed_it]);
-				speed = _tmp42_;
+				_tmp46_ = g_strdup (speed_collection[speed_it]);
+				speed = _tmp46_;
 				{
-					const gchar* _tmp43_ = NULL;
-					_tmp43_ = speed;
-					if (g_strcmp0 (_tmp43_, "1") != 0) {
-						const gchar* _tmp44_ = NULL;
-						_tmp44_ = play_speeds;
-						if (g_strcmp0 (_tmp44_, "") == 0) {
-							const gchar* _tmp45_ = NULL;
-							gchar* _tmp46_ = NULL;
-							_tmp45_ = speed;
-							_tmp46_ = g_strconcat (",X_DLNA_PS=", _tmp45_, NULL);
+					const gchar* _tmp47_ = NULL;
+					_tmp47_ = speed;
+					if (g_strcmp0 (_tmp47_, "1") != 0) {
+						const gchar* _tmp48_ = NULL;
+						_tmp48_ = play_speeds;
+						if (g_strcmp0 (_tmp48_, "") == 0) {
+							const gchar* _tmp49_ = NULL;
+							gchar* _tmp50_ = NULL;
+							_tmp49_ = speed;
+							_tmp50_ = g_strconcat (",X_DLNA_PS=", _tmp49_, NULL);
 							_g_free0 (play_speeds);
-							play_speeds = _tmp46_;
+							play_speeds = _tmp50_;
 						} else {
-							const gchar* _tmp47_ = NULL;
-							const gchar* _tmp48_ = NULL;
-							gchar* _tmp49_ = NULL;
-							gchar* _tmp50_ = NULL;
-							gchar* _tmp51_ = NULL;
-							_tmp47_ = play_speeds;
-							_tmp48_ = speed;
-							_tmp49_ = g_strconcat ("\\,", _tmp48_, NULL);
-							_tmp50_ = _tmp49_;
-							_tmp51_ = g_strconcat (_tmp47_, _tmp50_, NULL);
+							const gchar* _tmp51_ = NULL;
+							const gchar* _tmp52_ = NULL;
+							gchar* _tmp53_ = NULL;
+							gchar* _tmp54_ = NULL;
+							gchar* _tmp55_ = NULL;
+							_tmp51_ = play_speeds;
+							_tmp52_ = speed;
+							_tmp53_ = g_strconcat ("\\,", _tmp52_, NULL);
+							_tmp54_ = _tmp53_;
+							_tmp55_ = g_strconcat (_tmp51_, _tmp54_, NULL);
 							_g_free0 (play_speeds);
-							play_speeds = _tmp51_;
-							_g_free0 (_tmp50_);
+							play_speeds = _tmp55_;
+							_g_free0 (_tmp54_);
 						}
 					}
 					_g_free0 (speed);
@@ -1421,11 +1699,11 @@ gchar* rygel_player_controller_get_current_transport_actions (RygelPlayerControl
 			}
 			speed_collection = (_vala_array_free (speed_collection, speed_collection_length1, (GDestroyNotify) g_free), NULL);
 		}
-		_tmp52_ = actions;
-		_tmp53_ = play_speeds;
-		_tmp54_ = g_strconcat (_tmp52_, _tmp53_, NULL);
+		_tmp56_ = actions;
+		_tmp57_ = play_speeds;
+		_tmp58_ = g_strconcat (_tmp56_, _tmp57_, NULL);
 		_g_free0 (actions);
-		actions = _tmp54_;
+		actions = _tmp58_;
 		_g_free0 (play_speeds);
 	}
 	result = actions;
@@ -1437,6 +1715,35 @@ static void rygel_player_controller_class_init (RygelPlayerControllerClass * kla
 	rygel_player_controller_parent_class = g_type_class_peek_parent (klass);
 	g_type_class_add_private (klass, sizeof (RygelPlayerControllerPrivate));
 	G_OBJECT_CLASS (klass)->constructed = rygel_player_controller_real_constructed;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->next = rygel_player_controller_real_next;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->previous = rygel_player_controller_real_previous;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_single_play_uri = rygel_player_controller_real_set_single_play_uri;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_playlist_uri = rygel_player_controller_real_set_playlist_uri;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_next_single_play_uri = rygel_player_controller_real_set_next_single_play_uri;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_next_playlist_uri = rygel_player_controller_real_set_next_playlist_uri;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_player = rygel_player_controller_real_get_player;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_player = rygel_player_controller_real_set_player;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_protocol_info = rygel_player_controller_real_get_protocol_info;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_protocol_info = rygel_player_controller_real_set_protocol_info;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_playback_state = rygel_player_controller_real_get_playback_state;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_playback_state = rygel_player_controller_real_set_playback_state;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_n_tracks = rygel_player_controller_real_get_n_tracks;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_n_tracks = rygel_player_controller_real_set_n_tracks;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_track = rygel_player_controller_real_get_track;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_track = rygel_player_controller_real_set_track;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_uri = rygel_player_controller_real_get_uri;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_uri = rygel_player_controller_real_set_uri;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_metadata = rygel_player_controller_real_get_metadata;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_metadata = rygel_player_controller_real_set_metadata;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_track_uri = rygel_player_controller_real_get_track_uri;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_track_uri = rygel_player_controller_real_set_track_uri;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_track_metadata = rygel_player_controller_real_get_track_metadata;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_track_metadata = rygel_player_controller_real_set_track_metadata;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_next_uri = rygel_player_controller_real_get_next_uri;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_next_uri = rygel_player_controller_real_set_next_uri;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_next_metadata = rygel_player_controller_real_get_next_metadata;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->set_next_metadata = rygel_player_controller_real_set_next_metadata;
+	RYGEL_PLAYER_CONTROLLER_CLASS (klass)->get_current_transport_actions = rygel_player_controller_real_get_current_transport_actions;
 	G_OBJECT_CLASS (klass)->get_property = _vala_rygel_player_controller_get_property;
 	G_OBJECT_CLASS (klass)->set_property = _vala_rygel_player_controller_set_property;
 	G_OBJECT_CLASS (klass)->finalize = rygel_player_controller_finalize;
diff --git a/src/librygel-renderer/rygel-player-controller.vala b/src/librygel-renderer/rygel-player-controller.vala
index 24f8469..11eecd7 100644
--- a/src/librygel-renderer/rygel-player-controller.vala
+++ b/src/librygel-renderer/rygel-player-controller.vala
@@ -35,7 +35,7 @@ using GUPnP;
  * proxy the playback state to react on end of item to be able to switch to
  * the next item.
  */
-internal class Rygel.PlayerController : Object {
+public class Rygel.PlayerController : Object {
     private const int DEFAULT_IMAGE_TIMEOUT = 15;
     private const string CONFIG_SECTION = "Renderer";
     private const string TIMEOUT_KEY = "image-timeout";
@@ -47,21 +47,21 @@ internal class Rygel.PlayerController : Object {
         "%s</DIDL-Lite>";
 
     /* private (construction) properties */
-    public MediaPlayer player { construct; private get; }
-    public string protocol_info { construct; private get; }
+    public virtual MediaPlayer player { construct; private get; }
+    public virtual string protocol_info { construct; private get; }
 
     /* public properties */
 
     /* this._playback_state mirrors player.playback_state without including
      * non-UPnP "EOS" value. It is updated from notify_state_cb */
     [CCode (notify = false)]
-    public string playback_state {
+    public virtual string playback_state {
         get { return this._playback_state; }
         set { this.player.playback_state = value; }
     }
 
     [CCode (notify = false)]
-    public uint n_tracks {
+    public virtual uint n_tracks {
         get { return this._n_tracks; }
         private set {
             if (value != this._n_tracks) {
@@ -73,7 +73,7 @@ internal class Rygel.PlayerController : Object {
     }
 
     [CCode (notify = false)]
-    public uint track {
+    public virtual uint track {
         get { return this._track; }
         set {
             if (value != this._track) {
@@ -85,11 +85,11 @@ internal class Rygel.PlayerController : Object {
         default = 0;
     }
 
-    public string uri { get; private set; default = ""; }
-    public string metadata { get; private set; default = ""; }
+    public virtual string uri { get; private set; default = ""; }
+    public virtual string metadata { get; private set; default = ""; }
 
     [CCode (notify = false)]
-    public string track_uri {
+    public virtual string track_uri {
         owned get {
             if (this.player.uri != null) {
                 return Markup.escape_text (this.player.uri);
@@ -104,7 +104,7 @@ internal class Rygel.PlayerController : Object {
     }
 
     [CCode (notify = false)]
-    public string track_metadata {
+    public virtual string track_metadata {
         owned get { return this.player.metadata ?? ""; }
 
         private set {
@@ -116,10 +116,10 @@ internal class Rygel.PlayerController : Object {
         }
     }
 
-    public string next_uri { get; private set; default = ""; }
-    public string next_metadata { get; private set; default = ""; }
+    public virtual string next_uri { get; private set; default = ""; }
+    public virtual string next_metadata { get; private set; default = ""; }
 
-    public string current_transport_actions {
+    public virtual string current_transport_actions {
         owned get {
             string actions = null;
             switch (this.playback_state) {
@@ -206,7 +206,7 @@ internal class Rygel.PlayerController : Object {
         this.on_setting_changed (CONFIG_SECTION, TIMEOUT_KEY);
     }
 
-    public bool next () {
+    public virtual bool next () {
         // Try advancing in playlist
         if (this.track < this.n_tracks) {
             this.track++;
@@ -239,7 +239,7 @@ internal class Rygel.PlayerController : Object {
         return false;
     }
 
-    public bool previous () {
+    public virtual bool previous () {
         if (this.track <= 1) {
             return false;
         }
@@ -249,10 +249,10 @@ internal class Rygel.PlayerController : Object {
         return true;
     }
 
-    public void set_single_play_uri (string uri,
-                                     string metadata,
-                                     string? mime,
-                                     string? features)
+    public virtual void set_single_play_uri (string uri,
+                                             string metadata,
+                                             string? mime,
+                                             string? features)
     {
         if (this.timeout_id != 0) {
             Source.remove (this.timeout_id);
@@ -279,9 +279,9 @@ internal class Rygel.PlayerController : Object {
         }
     }
 
-    public void set_playlist_uri (string uri,
-                                  string metadata,
-                                  MediaCollection collection) {
+    public virtual void set_playlist_uri (string uri,
+                                          string metadata,
+                                          MediaCollection collection) {
         if (this.timeout_id != 0) {
             Source.remove (this.timeout_id);
             this.timeout_id = 0;
@@ -303,10 +303,10 @@ internal class Rygel.PlayerController : Object {
         }
     }
 
-    public void set_next_single_play_uri (string uri,
-                                          string metadata,
-                                          string? mime,
-                                          string? features) {
+    public virtual void set_next_single_play_uri (string uri,
+                                                  string metadata,
+                                                  string? mime,
+                                                  string? features) {
         this.next_uri = uri;
         this.next_metadata = metadata;
         this.next_mime = mime;
@@ -314,9 +314,9 @@ internal class Rygel.PlayerController : Object {
         this.next_collection = null;
     }
 
-    public void set_next_playlist_uri (string uri,
-                                       string metadata,
-                                       MediaCollection collection) {
+    public virtual void set_next_playlist_uri (string uri,
+                                               string metadata,
+                                               MediaCollection collection) {
         this.next_uri = uri;
         this.next_metadata = metadata;
         this.next_mime = null;
diff --git a/src/librygel-renderer/rygel-renderer-2.2.deps b/src/librygel-renderer/rygel-renderer-2.2.deps
index 8fec1aa..33618c2 100644
--- a/src/librygel-renderer/rygel-renderer-2.2.deps
+++ b/src/librygel-renderer/rygel-renderer-2.2.deps
@@ -1 +1,2 @@
 rygel-core-2.2
+gupnp-av-1.0
diff --git a/src/librygel-renderer/rygel-renderer.h b/src/librygel-renderer/rygel-renderer.h
index d801915..ca8e72e 100644
--- a/src/librygel-renderer/rygel-renderer.h
+++ b/src/librygel-renderer/rygel-renderer.h
@@ -11,6 +11,7 @@
 #include <string.h>
 #include <float.h>
 #include <math.h>
+#include <libgupnp-av/gupnp-av.h>
 
 G_BEGIN_DECLS
 
@@ -34,6 +35,17 @@ typedef struct _RygelMediaRendererPluginPrivate RygelMediaRendererPluginPrivate;
 typedef struct _RygelMediaPlayer RygelMediaPlayer;
 typedef struct _RygelMediaPlayerIface RygelMediaPlayerIface;
 
+#define RYGEL_TYPE_PLAYER_CONTROLLER (rygel_player_controller_get_type ())
+#define RYGEL_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerController))
+#define RYGEL_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
+#define RYGEL_IS_PLAYER_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RYGEL_TYPE_PLAYER_CONTROLLER))
+#define RYGEL_IS_PLAYER_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), RYGEL_TYPE_PLAYER_CONTROLLER))
+#define RYGEL_PLAYER_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), RYGEL_TYPE_PLAYER_CONTROLLER, RygelPlayerControllerClass))
+
+typedef struct _RygelPlayerController RygelPlayerController;
+typedef struct _RygelPlayerControllerClass RygelPlayerControllerClass;
+typedef struct _RygelPlayerControllerPrivate RygelPlayerControllerPrivate;
+
 #define RYGEL_TYPE_MEDIA_RENDERER (rygel_media_renderer_get_type ())
 #define RYGEL_MEDIA_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RYGEL_TYPE_MEDIA_RENDERER, RygelMediaRenderer))
 #define RYGEL_MEDIA_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), RYGEL_TYPE_MEDIA_RENDERER, RygelMediaRendererClass))
@@ -84,6 +96,44 @@ struct _RygelMediaRendererPluginClass {
 	RygelMediaPlayer* (*get_player) (RygelMediaRendererPlugin* self);
 };
 
+struct _RygelPlayerController {
+	GObject parent_instance;
+	RygelPlayerControllerPrivate * priv;
+};
+
+struct _RygelPlayerControllerClass {
+	GObjectClass parent_class;
+	gboolean (*next) (RygelPlayerController* self);
+	gboolean (*previous) (RygelPlayerController* self);
+	void (*set_single_play_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_playlist_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	void (*set_next_single_play_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+	void (*set_next_playlist_uri) (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+	RygelMediaPlayer* (*get_player) (RygelPlayerController* self);
+	void (*set_player) (RygelPlayerController* self, RygelMediaPlayer* value);
+	const gchar* (*get_protocol_info) (RygelPlayerController* self);
+	void (*set_protocol_info) (RygelPlayerController* self, const gchar* value);
+	const gchar* (*get_playback_state) (RygelPlayerController* self);
+	void (*set_playback_state) (RygelPlayerController* self, const gchar* value);
+	guint (*get_n_tracks) (RygelPlayerController* self);
+	void (*set_n_tracks) (RygelPlayerController* self, guint value);
+	guint (*get_track) (RygelPlayerController* self);
+	void (*set_track) (RygelPlayerController* self, guint value);
+	const gchar* (*get_uri) (RygelPlayerController* self);
+	void (*set_uri) (RygelPlayerController* self, const gchar* value);
+	const gchar* (*get_metadata) (RygelPlayerController* self);
+	void (*set_metadata) (RygelPlayerController* self, const gchar* value);
+	gchar* (*get_track_uri) (RygelPlayerController* self);
+	void (*set_track_uri) (RygelPlayerController* self, const gchar* value);
+	gchar* (*get_track_metadata) (RygelPlayerController* self);
+	void (*set_track_metadata) (RygelPlayerController* self, const gchar* value);
+	const gchar* (*get_next_uri) (RygelPlayerController* self);
+	void (*set_next_uri) (RygelPlayerController* self, const gchar* value);
+	const gchar* (*get_next_metadata) (RygelPlayerController* self);
+	void (*set_next_metadata) (RygelPlayerController* self, const gchar* value);
+	gchar* (*get_current_transport_actions) (RygelPlayerController* self);
+};
+
 struct _RygelMediaRenderer {
 	RygelMediaDevice parent_instance;
 	RygelMediaRendererPrivate * priv;
@@ -96,8 +146,9 @@ struct _RygelMediaRendererClass {
 
 GType rygel_media_renderer_plugin_get_type (void) G_GNUC_CONST;
 GType rygel_media_player_get_type (void) G_GNUC_CONST;
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities);
-RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities);
+GType rygel_player_controller_get_type (void) G_GNUC_CONST;
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_new (const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
+RygelMediaRendererPlugin* rygel_media_renderer_plugin_construct (GType object_type, const gchar* name, const gchar* title, const gchar* description, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
 RygelMediaPlayer* rygel_media_renderer_plugin_get_player (RygelMediaRendererPlugin* self);
 gchar* rygel_media_renderer_plugin_get_protocol_info (RygelMediaRendererPlugin* self);
 GList* rygel_media_renderer_plugin_get_supported_profiles (RygelMediaRendererPlugin* self);
@@ -131,9 +182,29 @@ gint64 rygel_media_player_get_position (RygelMediaPlayer* self);
 gint64 rygel_media_player_get_byte_position (RygelMediaPlayer* self);
 gchar* rygel_media_player_get_position_as_str (RygelMediaPlayer* self);
 gchar* rygel_media_player_get_protocol_info (RygelMediaPlayer* self);
+RygelPlayerController* rygel_player_controller_new (RygelMediaPlayer* player, const gchar* protocol_info);
+RygelPlayerController* rygel_player_controller_construct (GType object_type, RygelMediaPlayer* player, const gchar* protocol_info);
+gboolean rygel_player_controller_next (RygelPlayerController* self);
+gboolean rygel_player_controller_previous (RygelPlayerController* self);
+void rygel_player_controller_set_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+void rygel_player_controller_set_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+void rygel_player_controller_set_next_single_play_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, const gchar* mime, const gchar* features);
+void rygel_player_controller_set_next_playlist_uri (RygelPlayerController* self, const gchar* uri, const gchar* metadata, GUPnPMediaCollection* collection);
+const gchar* rygel_player_controller_get_playback_state (RygelPlayerController* self);
+void rygel_player_controller_set_playback_state (RygelPlayerController* self, const gchar* value);
+guint rygel_player_controller_get_n_tracks (RygelPlayerController* self);
+guint rygel_player_controller_get_track (RygelPlayerController* self);
+void rygel_player_controller_set_track (RygelPlayerController* self, guint value);
+const gchar* rygel_player_controller_get_uri (RygelPlayerController* self);
+const gchar* rygel_player_controller_get_metadata (RygelPlayerController* self);
+gchar* rygel_player_controller_get_track_uri (RygelPlayerController* self);
+gchar* rygel_player_controller_get_track_metadata (RygelPlayerController* self);
+const gchar* rygel_player_controller_get_next_uri (RygelPlayerController* self);
+const gchar* rygel_player_controller_get_next_metadata (RygelPlayerController* self);
+gchar* rygel_player_controller_get_current_transport_actions (RygelPlayerController* self);
 GType rygel_media_renderer_get_type (void) G_GNUC_CONST;
-RygelMediaRenderer* rygel_media_renderer_new (const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities);
-RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities);
+RygelMediaRenderer* rygel_media_renderer_new (const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
+RygelMediaRenderer* rygel_media_renderer_construct (GType object_type, const gchar* title, RygelMediaPlayer* player, RygelPluginCapabilities capabilities, RygelPlayerController* controller);
 
 
 G_END_DECLS
diff --git a/src/plugins/mpris/rygel-mpris-plugin.vala b/src/plugins/mpris/rygel-mpris-plugin.vala
index 6e45700..19e628e 100644
--- a/src/plugins/mpris/rygel-mpris-plugin.vala
+++ b/src/plugins/mpris/rygel-mpris-plugin.vala
@@ -42,7 +42,7 @@ public class Rygel.MPRIS.Plugin : Rygel.MediaRendererPlugin {
             title = service_name;
         }
 
-        base (service_name, title);
+        base (service_name, title, null);
 
         this.actual_player = actual_player;
         this.mime_types = actual_player.supported_mime_types;
-- 
1.9.1

