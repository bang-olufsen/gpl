From 98da324764fc97a54c33dc73c7fda8f00482f1d0 Mon Sep 17 00:00:00 2001
From: Simon Mikuda <simon.mikuda@streamunlimited.com>
Date: Fri, 13 Mar 2020 08:46:40 +0100
Subject: [PATCH] Implement control fifo for GoogleCast

Signed-off-by: Simon Mikuda <simon.mikuda@streamunlimited.com>
---
 src/pcm/pcm_hw.c | 48 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 48 insertions(+)

diff --git a/src/pcm/pcm_hw.c b/src/pcm/pcm_hw.c
index aec5b2f..6971e05 100644
--- a/src/pcm/pcm_hw.c
+++ b/src/pcm/pcm_hw.c
@@ -55,6 +55,12 @@ const char *_snd_module_pcm_hw = "";
 #define F_SETSIG 10
 #endif
 
+enum {
+	FIFO_EVENT_OPENED = 0,
+	FIFO_EVENT_CLOSED,
+	FIFO_EVENT_ERROR,
+} _switch_fifo_events_enum;
+
 /*
  *  Compatibility
  */
@@ -110,6 +116,7 @@ typedef struct {
 	unsigned int chmap_caps;
 	snd_pcm_chmap_query_t **chmap_override;
 	int force_silence;
+	int fifo_fd;
 } snd_pcm_hw_t;
 
 #define SNDRV_FILE_PCM_STREAM_PLAYBACK		ALSA_DEVICE_DIRECTORY "pcmC%iD%ip"
@@ -1081,6 +1088,16 @@ static int snd_pcm_hw_munmap(snd_pcm_t *pcm ATTRIBUTE_UNUSED)
 	return 0;
 }
 
+static void write_event_to_fifo(int fifo_fd, char control)
+{
+	int err;
+	if (fifo_fd >= 0) {
+		err = write(fifo_fd, &control, 1);
+		if (err != 1)
+			SNDERR("Error write to FIFO err=%d", err);
+	}
+}
+
 static int snd_pcm_hw_close(snd_pcm_t *pcm)
 {
 	snd_pcm_hw_t *hw = pcm->private_data;
@@ -1092,6 +1109,10 @@ static int snd_pcm_hw_close(snd_pcm_t *pcm)
 
 	unmap_status_and_control_data(hw);
 
+	write_event_to_fifo(hw->fifo_fd, FIFO_EVENT_CLOSED);
+	if (hw->fifo_fd >= 0)
+		close(hw->fifo_fd);
+
 	free(hw);
 	return err;
 }
@@ -1797,6 +1818,8 @@ int _snd_pcm_hw_open(snd_pcm_t **pcmp, const char *name,
 	snd_config_t *n;
 	int nonblock = 1; /* non-block per default */
 	int force_silence = 0;
+	int fifo_fd = -1;
+	const char *fifo_path = NULL;
 	snd_pcm_chmap_query_t **chmap = NULL;
 	snd_pcm_hw_t *hw;
 
@@ -1907,6 +1930,10 @@ int _snd_pcm_hw_open(snd_pcm_t **pcmp, const char *name,
 			force_silence = err;
 			continue;
 		}
+		if (strcmp(id, "fifo") == 0) {
+			snd_config_get_string(n, &fifo_path);
+			continue;
+		}
 		SNDERR("Unknown field %s", id);
 		err = -EINVAL;
 		goto fail;
@@ -1916,9 +1943,26 @@ int _snd_pcm_hw_open(snd_pcm_t **pcmp, const char *name,
 		err = -EINVAL;
 		goto fail;
 	}
+
+	if (fifo_path != NULL) {
+		fifo_fd = open(fifo_path, O_WRONLY | O_NONBLOCK);
+		if (fifo_fd < 0)
+			SNDERR("Failed to open FIFO err=%d", fifo_fd);
+	}
+
 	err = snd_pcm_hw_open(pcmp, name, card, device, subdevice, stream,
 			      mode | (nonblock ? SND_PCM_NONBLOCK : 0),
 			      0, sync_ptr_ioctl);
+
+	/* Try to recover from error by sending error through fifo */
+	if (err < 0 && fifo_fd >= 0) {
+		write_event_to_fifo(fifo_fd, FIFO_EVENT_ERROR);
+		sleep(2);
+		err = snd_pcm_hw_open(pcmp, name, card, device, subdevice, stream,
+					  mode | (nonblock ? SND_PCM_NONBLOCK : 0),
+					  0, sync_ptr_ioctl);
+	}
+
 	if (err < 0)
 		goto fail;
 	if (nonblock && ! (mode & SND_PCM_NONBLOCK)) {
@@ -1943,11 +1987,15 @@ int _snd_pcm_hw_open(snd_pcm_t **pcmp, const char *name,
 	if (chmap)
 		hw->chmap_override = chmap;
 	hw->force_silence = force_silence;
+	hw->fifo_fd = fifo_fd;
+	write_event_to_fifo(fifo_fd, FIFO_EVENT_OPENED);
 
 	return 0;
 
 fail:
         snd_pcm_free_chmaps(chmap);
+		if (fifo_fd >= 0)
+			close(fifo_fd);
         return err;
 }
 
-- 
2.7.4

