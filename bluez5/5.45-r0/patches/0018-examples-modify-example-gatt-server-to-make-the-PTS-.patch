From 592fb8a08afbeb87dcf250fcb3a88ffa895536c8 Mon Sep 17 00:00:00 2001
From: Bernhard Miller <bernhard.miller@streamunlimited.com>
Date: Mon, 6 Mar 2017 14:07:53 +0100
Subject: [PATCH] examples: modify example-gatt-server to make the PTS test
 cases work

Signed-off-by: Bernhard Miller <bernhard.miller@streamunlimited.com>
---
 test/example-gatt-server | 335 +++++++++++++++++++++++++++++------------------
 1 file changed, 204 insertions(+), 131 deletions(-)

diff --git a/test/example-gatt-server b/test/example-gatt-server
index 97e0220..fa9faa2 100755
--- a/test/example-gatt-server
+++ b/test/example-gatt-server
@@ -39,6 +39,9 @@ class InvalidValueLengthException(dbus.exceptions.DBusException):
 
 class FailedException(dbus.exceptions.DBusException):
     _dbus_error_name = 'org.bluez.Error.Failed'
+    
+class InvalidOffsetException(dbus.exceptions.DBusException):
+    _dbus_error_name = 'org.bluez.Error.InvalidOffset'
 
 
 class Application(dbus.service.Object):
@@ -49,7 +52,6 @@ class Application(dbus.service.Object):
         self.path = '/'
         self.services = []
         dbus.service.Object.__init__(self, bus, self.path)
-        self.add_service(HeartRateService(bus, 0))
         self.add_service(BatteryService(bus, 1))
         self.add_service(TestService(bus, 2))
         self.add_service(DeviceInformationService(bus, 3))
@@ -251,119 +253,6 @@ class Descriptor(dbus.service.Object):
         raise NotSupportedException()
 
 
-class HeartRateService(Service):
-    """
-    Fake Heart Rate Service that simulates a fake heart beat and control point
-    behavior.
-
-    """
-    HR_UUID = '0000180d-0000-1000-8000-00805f9b34fb'
-
-    def __init__(self, bus, index):
-        Service.__init__(self, bus, index, self.HR_UUID, True)
-        self.add_characteristic(HeartRateMeasurementChrc(bus, 0, self))
-        self.add_characteristic(BodySensorLocationChrc(bus, 1, self))
-        self.add_characteristic(HeartRateControlPointChrc(bus, 2, self))
-        self.energy_expended = 0
-
-
-class HeartRateMeasurementChrc(Characteristic):
-    HR_MSRMT_UUID = '00002a37-0000-1000-8000-00805f9b34fb'
-
-    def __init__(self, bus, index, service):
-        Characteristic.__init__(
-                self, bus, index,
-                self.HR_MSRMT_UUID,
-                ['notify'],
-                service)
-        self.notifying = False
-        self.hr_ee_count = 0
-
-    def hr_msrmt_cb(self):
-        value = []
-        value.append(dbus.Byte(0x06))
-
-        value.append(dbus.Byte(randint(90, 130)))
-
-        if self.hr_ee_count % 10 == 0:
-            value[0] = dbus.Byte(value[0] | 0x08)
-            value.append(dbus.Byte(self.service.energy_expended & 0xff))
-            value.append(dbus.Byte((self.service.energy_expended >> 8) & 0xff))
-
-        self.service.energy_expended = \
-                min(0xffff, self.service.energy_expended + 1)
-        self.hr_ee_count += 1
-
-        print('Updating value: ' + repr(value))
-
-        self.PropertiesChanged(GATT_CHRC_IFACE, { 'Value': value }, [])
-
-        return self.notifying
-
-    def _update_hr_msrmt_simulation(self):
-        print('Update HR Measurement Simulation')
-
-        if not self.notifying:
-            return
-
-        GObject.timeout_add(1000, self.hr_msrmt_cb)
-
-    def StartNotify(self):
-        if self.notifying:
-            print('Already notifying, nothing to do')
-            return
-
-        self.notifying = True
-        self._update_hr_msrmt_simulation()
-
-    def StopNotify(self):
-        if not self.notifying:
-            print('Not notifying, nothing to do')
-            return
-
-        self.notifying = False
-        self._update_hr_msrmt_simulation()
-
-
-class BodySensorLocationChrc(Characteristic):
-    BODY_SNSR_LOC_UUID = '00002a38-0000-1000-8000-00805f9b34fb'
-
-    def __init__(self, bus, index, service):
-        Characteristic.__init__(
-                self, bus, index,
-                self.BODY_SNSR_LOC_UUID,
-                ['read'],
-                service)
-
-    def ReadValue(self, options):
-        # Return 'Chest' as the sensor location.
-        return [ 0x01 ]
-
-class HeartRateControlPointChrc(Characteristic):
-    HR_CTRL_PT_UUID = '00002a39-0000-1000-8000-00805f9b34fb'
-
-    def __init__(self, bus, index, service):
-        Characteristic.__init__(
-                self, bus, index,
-                self.HR_CTRL_PT_UUID,
-                ['write'],
-                service)
-
-    def WriteValue(self, value, options):
-        print('Heart Rate Control Point WriteValue called')
-
-        if len(value) != 1:
-            raise InvalidValueLengthException()
-
-        byte = value[0]
-        print('Control Point value: ' + repr(byte))
-
-        if byte != 1:
-            raise FailedException("0x80")
-
-        print('Energy Expended field reset!')
-        self.service.energy_expended = 0
-
 
 class BatteryService(Service):
     """
@@ -407,7 +296,7 @@ class BatteryLevelCharacteristic(Characteristic):
             self.battery_lvl -= 2
             if self.battery_lvl < 0:
                 self.battery_lvl = 0
-        print('Battery Level drained: ' + repr(self.battery_lvl))
+#        print('Battery Level drained: ' + repr(self.battery_lvl))
         self.notify_battery_level()
         return True
 
@@ -434,16 +323,21 @@ class BatteryLevelCharacteristic(Characteristic):
 class TestService(Service):
     """
     Dummy test service that provides characteristics and descriptors that
-    exercise various API functionality.
+    for PTS test cases.
+    Uses some UUIDs for various other profiles.
 
     """
-    TEST_SVC_UUID = '12345678-1234-5678-1234-56789abcdef0'
+    TEST_SVC_UUID = '0000180d-0000-1000-8000-00805f9b34fb'
 
     def __init__(self, bus, index):
         Service.__init__(self, bus, index, self.TEST_SVC_UUID, True)
         self.add_characteristic(TestCharacteristic(bus, 0, self))
         self.add_characteristic(TestEncryptCharacteristic(bus, 1, self))
         self.add_characteristic(TestSecureCharacteristic(bus, 2, self))
+        self.add_characteristic(TestNotPermittedCharacteristic(bus, 3, self))
+        self.add_characteristic(TestLongCharacteristic(bus, 4, self))
+        self.add_characteristic(TestApplicationErrorCharacteristic(bus, 5, self))
+        self.add_characteristic(TestAuthenticationCharacteristic(bus, 6, self))
 
 class TestCharacteristic(Characteristic):
     """
@@ -451,34 +345,199 @@ class TestCharacteristic(Characteristic):
     contains "extended properties", as well as a test descriptor.
 
     """
-    TEST_CHRC_UUID = '12345678-1234-5678-1234-56789abcdef1'
+    TEST_CHRC_UUID = '00002a38-0000-1000-8000-00805f9b34fb'
+
+    def __init__(self, bus, index, service):
+        Characteristic.__init__(
+                self, bus, index,
+                self.TEST_CHRC_UUID,
+                ['read', 'write', 'writable-auxiliaries', 'reliable-write'],
+                service)
+        self.value = "a"
+        self.add_descriptor(TestDescriptor(bus, 0, self))
+        self.add_descriptor(
+                CharacteristicUserDescriptionDescriptor(bus, 1, self))
+
+    def ReadValue(self, options):
+        offset = 0
+        if "offset" in options:
+            offset = options["offset"]
+			
+        print('TestCharacteristic Read: %s offset=%i' % (repr(self.value), offset))
+        
+        if offset > len(self.value):
+            raise InvalidOffsetException()
+        return self.value[offset:]
+
+    def WriteValue(self, value, options):
+        offset = 0
+        if "offset" in options:
+            offset = options["offset"]
+            
+        print('TestCharacteristic Write: %s offset=%i' % (repr(value), offset))
+        
+        if offset > len(self.value):
+            print("Invalid offset")
+            raise InvalidOffsetException()
+            
+        if len(value) > len(self.value):
+            print("Invalid length")
+            raise InvalidValueLengthException()
+            
+        if offset > 0:
+            if offset + len(value) > len(self.value):
+                self.value = self.value[:offset] + value
+            else:
+                self.value = self.value[:offset] + value + self.value[(offset + len(value)):]
+        else:
+            self.value = value
+        
+class TestLongCharacteristic(Characteristic):
+    """
+    Dummy test long characteristic.
+
+    """
+    TEST_CHRC_UUID = '00002a39-0000-1000-8000-00805f9b34fb'
 
     def __init__(self, bus, index, service):
         Characteristic.__init__(
                 self, bus, index,
                 self.TEST_CHRC_UUID,
-                ['read', 'write', 'writable-auxiliaries'],
+                ['read', 'write', 'writable-auxiliaries', 
+                # comment for GATT/SR/GAW/BI-33-C and GATT/SR/GAW/BI-09-C
+                #'write-without-response', 
+                'reliable-write'],
                 service)
         self.value = []
+        for i in range(0, 54):
+            self.value.append(dbus.Byte('b'))
         self.add_descriptor(TestDescriptor(bus, 0, self))
         self.add_descriptor(
                 CharacteristicUserDescriptionDescriptor(bus, 1, self))
 
     def ReadValue(self, options):
-        print('TestCharacteristic Read: ' + repr(self.value))
-        return self.value
+        offset = 0
+        if "offset" in options:
+            offset = options["offset"]
+			
+        print('TestLongCharacteristic Read: %s offset=%i' % (repr(self.value), offset))
+        
+        if offset > len(self.value):
+            raise InvalidOffsetException()
+            
+        return self.value[offset:]
+
+    def WriteValue(self, value, options):
+        # uncomment for GATT/SR/GAW/BI-33-C
+        # raise InvalidValueLengthException()
+        
+        # uncomment for GATT/SR/GAW/BI-09-C
+        raise InvalidOffsetException()
+        
+        offset = 0
+        if "offset" in options:
+            offset = options["offset"]
+            
+        print('TestLongCharacteristic Write BMI: %s offset=%i' % (repr(value), offset))
+        
+        if offset > len(self.value):
+            print("Offset exception")
+            raise InvalidOffsetException()
+            
+        newvalue = []
+        if offset > 0:
+            newvalue = newvalue + self.value[:offset]
+        
+        newvalue = newvalue + value
+        
+        endoffset = offset + len(value)
+        if endoffset < len(self.value):
+            newvalue = newvalue + self.value[endoffset:]
+            
+        self.value = newvalue
+        print('post Write: %s' % (repr(self.value)))
+            
+class TestAuthenticationCharacteristic(Characteristic):
+    """
+    Dummy test characteristic. 
+
+    """
+    TEST_CHRC_UUID = '00002a40-0000-1000-8000-00805f9b34fb'
+
+    def __init__(self, bus, index, service):
+        Characteristic.__init__(
+                self, bus, index,
+                self.TEST_CHRC_UUID,
+                ['read', 'authenticated-signed-writes'],
+                service)
+        self.value = 42
+
+    def ReadValue(self, options):
+        print('TestAuthenticationCharacteristic Read: %s' % (repr(self.value)))
+        
+        ret = [ self.value ]
+        
+        # PTS auth write test is increasing the value by one after the first read
+        # fake this here, as something goes wrong with bluez and PTS when communicating
+        # signatures.
+        # uncomment this line for GATT/SR/GAW/BI-01-C
+        # self.value += 1
+        return ret
 
     def WriteValue(self, value, options):
-        print('TestCharacteristic Write: ' + repr(value))
+        print('TestAuthenticationCharacteristic Write: ' + repr(value))
         self.value = value
 
+class TestNotPermittedCharacteristic(Characteristic):
+    """
+    Dummy test characteristic to raise not permitted errors.
+
+    """
+    TEST_CHRC_NPERM_UUID = '0000180d-0000-1000-8000-00805f9b34fb'
+
+    def __init__(self, bus, index, service):
+        Characteristic.__init__(
+                self, bus, index,
+                self.TEST_CHRC_NPERM_UUID,
+                ['read'],
+                service)
+
+    def ReadValue(self, options):
+        print('TestNotPermittedCharacteristic Read')
+        raise NotPermittedException()
+
+    def WriteValue(self, value, options):
+        print('TestNotPermittedCharacteristic Write')
+        raise NotPermittedException()
+
+class TestApplicationErrorCharacteristic(Characteristic):
+    """
+    Dummy test characteristic to raise application errors.
+
+    """
+    TEST_CHRC_NPERM_UUID = '00001820-0000-1000-8000-00805f9b34fb'
+
+    def __init__(self, bus, index, service):
+        Characteristic.__init__(
+                self, bus, index,
+                self.TEST_CHRC_NPERM_UUID,
+                ['read', 'write'],
+                service)
+
+    def ReadValue(self, options):
+        print('TestApplicationErrorCharacteristic Read')
+        raise FailedException()
+
+    def WriteValue(self, value, options):
+        print('TestApplicationErrorCharacteristic Write')
+        raise FailedException()
 
 class TestDescriptor(Descriptor):
     """
     Dummy test descriptor. Returns a static value.
 
     """
-    TEST_DESC_UUID = '12345678-1234-5678-1234-56789abcdef2'
+    TEST_DESC_UUID = '0000180e-0000-1000-8000-00805f9b34fb'
 
     def __init__(self, bus, index, characteristic):
         Descriptor.__init__(
@@ -511,9 +570,23 @@ class CharacteristicUserDescriptionDescriptor(Descriptor):
                 characteristic)
 
     def ReadValue(self, options):
-        return self.value
+        offset = 0
+        if "offset" in options:
+            offset = options["offset"]
+			
+        print('CharacteristicUserDescriptionDescriptor Read: %s offset=%i' % (repr(self.value), offset))
+        
+        if offset > len(self.value):
+            raise InvalidOffsetException()
+        return self.value[offset:]
 
     def WriteValue(self, value, options):
+        # uncomment for GATT/SR/GAW/BI-35-C
+        # raise InvalidValueLengthException()
+        
+        # uncomment for GATT/SR/GAW/BI-26-C
+        # raise InvalidOffsetException()
+        
         if not self.writable:
             raise NotPermittedException()
         self.value = value
@@ -523,13 +596,13 @@ class TestEncryptCharacteristic(Characteristic):
     Dummy test characteristic requiring encryption.
 
     """
-    TEST_CHRC_UUID = '12345678-1234-5678-1234-56789abcdef3'
+    TEST_CHRC_UUID = '0000180f-0000-1000-8000-00805f9b34fb'
 
     def __init__(self, bus, index, service):
         Characteristic.__init__(
                 self, bus, index,
                 self.TEST_CHRC_UUID,
-                ['encrypt-read', 'encrypt-write'],
+                ['encrypt-read', 'encrypt-write', 'encrypt-authenticated-read', 'encrypt-authenticated-write'],
                 service)
         self.value = []
         self.add_descriptor(TestEncryptDescriptor(bus, 2, self))
@@ -549,7 +622,7 @@ class TestEncryptDescriptor(Descriptor):
     Dummy test descriptor requiring encryption. Returns a static value.
 
     """
-    TEST_DESC_UUID = '12345678-1234-5678-1234-56789abcdef4'
+    TEST_DESC_UUID = '00001811-0000-1000-8000-00805f9b34fb'
 
     def __init__(self, bus, index, characteristic):
         Descriptor.__init__(
@@ -569,7 +642,7 @@ class TestSecureCharacteristic(Characteristic):
     Dummy test characteristic requiring secure connection.
 
     """
-    TEST_CHRC_UUID = '12345678-1234-5678-1234-56789abcdef5'
+    TEST_CHRC_UUID = '00001812-0000-1000-8000-00805f9b34fb'
 
     def __init__(self, bus, index, service):
         Characteristic.__init__(
@@ -596,7 +669,7 @@ class TestSecureDescriptor(Descriptor):
     Dummy test descriptor requiring secure connection. Returns a static value.
 
     """
-    TEST_DESC_UUID = '12345678-1234-5678-1234-56789abcdef6'
+    TEST_DESC_UUID = '00001813-0000-1000-8000-00805f9b34fb'
 
     def __init__(self, bus, index, characteristic):
         Descriptor.__init__(
@@ -652,10 +725,10 @@ class HidOverGattService(Service):
     Fake HoG service for PTS tests
 
     """
-    BATTERY_UUID = '1812'
+    HOG_UUID = '1812'
 
     def __init__(self, bus, index):
-        Service.__init__(self, bus, index, self.BATTERY_UUID, True)
+        Service.__init__(self, bus, index, self.HOG_UUID, True)
 
 
 def register_app_cb():
-- 
2.7.4

