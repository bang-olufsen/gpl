From 88951a3e026c81d80e7a5eafeca6acc060c6bf93 Mon Sep 17 00:00:00 2001
From: Martin Geier <martin.geier@streamunlimited.com>
Date: Wed, 28 Jun 2017 10:37:31 +0200
Subject: [PATCH] Fix hal methos, add serialize methods

Signed-off-by: Martin Geier <martin.geier@streamunlimited.com>
---
 examples/hal/hal-listen.cpp |  6 +++---
 include/dbus-c++/types.h    | 41 ++++++++++++++++++++++++++++++++++++++---
 2 files changed, 41 insertions(+), 6 deletions(-)

diff --git a/examples/hal/hal-listen.cpp b/examples/hal/hal-listen.cpp
index bb70b1a..d4357ea 100644
--- a/examples/hal/hal-listen.cpp
+++ b/examples/hal/hal-listen.cpp
@@ -8,8 +8,8 @@
 #include <iostream>
 
 HalManagerProxy::HalManagerProxy(DBus::Connection &connection)
-  : DBus::InterfaceProxy("org.freedesktop.Hal.Manager"),
-    DBus::ObjectProxy(connection, "/org/freedesktop/Hal/Manager", "org.freedesktop.Hal")
+  : DBus::InterfaceProxy("org.freedesktop.DBus.ObjectManager"),
+    DBus::ObjectProxy(connection, "/", "org.bluez")
 {
   connect_signal(HalManagerProxy, DeviceAdded, DeviceAddedCb);
   connect_signal(HalManagerProxy, DeviceRemoved, DeviceRemovedCb);
@@ -32,7 +32,7 @@ std::vector< std::string > HalManagerProxy::GetAllDevices()
   std::vector< std::string > udis;
   DBus::CallMessage call;
 
-  call.member("GetAllDevices");
+  call.member("GetManagedObjects");
 
   DBus::Message reply = invoke_method(call);
   DBus::MessageIter it = reply.reader();
diff --git a/include/dbus-c++/types.h b/include/dbus-c++/types.h
index 044e72b..f03e0c1 100644
--- a/include/dbus-c++/types.h
+++ b/include/dbus-c++/types.h
@@ -35,6 +35,40 @@
 #include "message.h"
 #include "error.h"
 
+extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, uint8_t &val);
+extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, bool &val);
+extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, int16_t &val);
+extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, uint16_t &val);
+extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, int32_t &val);
+extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, uint32_t &val);
+extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, int64_t &val);
+extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, uint64_t &val);
+extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, double &val);
+extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, std::string &val);
+//extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, DBus::Path &val);
+//extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, DBus::Signature &val);
+
+template<typename E>
+extern DBus::MessageIter &operator >> (DBus::MessageIter &iter, std::vector<E>& val);
+
+
+//extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const DBus::Invalid &);
+extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const uint8_t &val);
+extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const bool &val);
+extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const int16_t &val);
+extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const uint16_t &val);
+extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const int32_t &val);
+extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const uint32_t &val);
+extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const int64_t &val);
+extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const uint64_t &val);
+extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const double &val);
+extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const std::string &val);
+//extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const DBus::Path &val);
+//extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const DBus::Signature &val);
+
+template<typename E>
+extern DBus::MessageIter &operator << (DBus::MessageIter &iter, const std::vector<E>& val);
+
 namespace DBus
 {
 
@@ -318,6 +352,9 @@ struct type< Struct<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
 
 } /* namespace DBus */
 
+extern DXXAPI DBus::MessageIter &operator << (DBus::MessageIter &iter, const DBus::Variant &val);
+extern DXXAPI DBus::MessageIter &operator >> (DBus::MessageIter &iter, DBus::Variant &val);
+
 inline DBus::MessageIter &operator << (DBus::MessageIter &iter, const DBus::Invalid &)
 {
   return iter;
@@ -431,7 +468,7 @@ inline DBus::MessageIter &operator << (DBus::MessageIter &iter, const std::map<K
   {
     DBus::MessageIter eit = ait.new_dict_entry();
 
-    eit << mit->first << mit->second;
+    eit << (K)(mit->first) << (V)(mit->second);
 
     ait.close_container(eit);
   }
@@ -472,7 +509,6 @@ inline DBus::MessageIter &operator << (DBus::MessageIter &iter, const DBus::Stru
   return iter;
 }
 
-extern DXXAPI DBus::MessageIter &operator << (DBus::MessageIter &iter, const DBus::Variant &val);
 
 inline DBus::MessageIter &operator >> (DBus::MessageIter &iter, DBus::Invalid &)
 {
@@ -644,7 +680,6 @@ inline DBus::MessageIter &operator >> (DBus::MessageIter &iter, DBus::Struct<T1,
   return ++iter;
 }
 
-extern DXXAPI DBus::MessageIter &operator >> (DBus::MessageIter &iter, DBus::Variant &val);
 
 #endif//__DBUSXX_TYPES_H
 
-- 
2.7.4

