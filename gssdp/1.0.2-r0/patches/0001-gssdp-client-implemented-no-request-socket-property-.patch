From f3038cd4b01fd4d8ba628aa47b823ba8f74f6da9 Mon Sep 17 00:00:00 2001
From: Stanislav Ruzani <stanislav.ruzani@streamunlimited.com>
Date: Sat, 19 Jan 2019 08:39:08 +0100
Subject: [PATCH 1/2] gssdp-client: implemented "no-request-socket" property to
 be able to disable request socket on UDP port 1900 This is useful when two
 instances of gssdp client are running at the same, where one instance could
 "steal" packets heading to port 1900. This flag should only be used when the
 owner of gssdp client DOES NOT call _gssdp_client_send_message () with
 message type _GSSDP_DISCOVERY_RESPONSE (i.e. when only gssdp-resource-browser
 is used)

Signed-off-by: Stanislav Ruzani <stanislav.ruzani@streamunlimited.com>
---
 libgssdp/gssdp-client.c | 82 +++++++++++++++++++++++++++++++++++++------------
 1 file changed, 62 insertions(+), 20 deletions(-)

diff --git a/libgssdp/gssdp-client.c b/libgssdp/gssdp-client.c
index 6bfc4aa..3b58c43 100644
--- a/libgssdp/gssdp-client.c
+++ b/libgssdp/gssdp-client.c
@@ -134,6 +134,7 @@ struct _GSSDPClientPrivate {
         GHashTable        *user_agent_cache;
         guint              socket_ttl;
         guint              msearch_port;
+        gboolean           no_request_socket;
         GSSDPNetworkDevice device;
         GList             *headers;
 
@@ -155,6 +156,7 @@ enum {
         PROP_ACTIVE,
         PROP_SOCKET_TTL,
         PROP_MSEARCH_PORT,
+        PROP_NO_REQUEST_SOCKET
 };
 
 enum {
@@ -247,21 +249,23 @@ gssdp_client_initable_init (GInitable                   *initable,
         if (!init_network_info (client, &internal_error))
                 goto errors;
 
-        /* Set up sockets (Will set errno if it failed) */
-        client->priv->request_socket =
-                gssdp_socket_source_new (GSSDP_SOCKET_SOURCE_TYPE_REQUEST,
-                                         gssdp_client_get_host_ip (client),
-                                         client->priv->socket_ttl,
-                                         client->priv->device.iface_name,
-                                         &internal_error);
-        if (client->priv->request_socket != NULL) {
-                gssdp_socket_source_set_callback
-                        (client->priv->request_socket,
-                        (GSourceFunc) request_socket_source_cb,
-                        client);
-        } else {
-                goto errors;
-        }
+        /* Unless disabled, set up sockets (Will set errno if it failed) */
+        if (!client->priv->no_request_socket) {
+			client->priv->request_socket =
+					gssdp_socket_source_new (GSSDP_SOCKET_SOURCE_TYPE_REQUEST,
+											 gssdp_client_get_host_ip (client),
+											 client->priv->socket_ttl,
+											 client->priv->device.iface_name,
+											 &internal_error);
+			if (client->priv->request_socket != NULL) {
+					gssdp_socket_source_set_callback
+							(client->priv->request_socket,
+							(GSourceFunc) request_socket_source_cb,
+							client);
+			} else {
+					goto errors;
+			}
+		}
 
         client->priv->multicast_socket =
                 gssdp_socket_source_new (GSSDP_SOCKET_SOURCE_TYPE_MULTICAST,
@@ -298,7 +302,7 @@ gssdp_client_initable_init (GInitable                   *initable,
                                          client);
         }
  errors:
-        if (!client->priv->request_socket ||
+        if ((!client->priv->no_request_socket && !client->priv->request_socket) ||
             !client->priv->multicast_socket ||
             !client->priv->search_socket) {
                 g_propagate_error (error, internal_error);
@@ -324,7 +328,9 @@ gssdp_client_initable_init (GInitable                   *initable,
                 return FALSE;
         }
 
-        gssdp_socket_source_attach (client->priv->request_socket);
+        if (client->priv->request_socket)
+			gssdp_socket_source_attach (client->priv->request_socket);
+
         gssdp_socket_source_attach (client->priv->multicast_socket);
         gssdp_socket_source_attach (client->priv->search_socket);
 
@@ -383,6 +389,9 @@ gssdp_client_get_property (GObject    *object,
         case PROP_MSEARCH_PORT:
                 g_value_set_uint (value, client->priv->msearch_port);
                 break;
+		case PROP_NO_REQUEST_SOCKET:
+				g_value_set_boolean (value, client->priv->no_request_socket);
+				break;
         default:
                 G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
                 break;
@@ -427,6 +436,9 @@ gssdp_client_set_property (GObject      *object,
         case PROP_MSEARCH_PORT:
                 client->priv->msearch_port = g_value_get_uint (value);
                 break;
+        case PROP_NO_REQUEST_SOCKET:
+                client->priv->no_request_socket = g_value_get_boolean (value);
+                break;
         default:
                 G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
                 break;
@@ -658,6 +670,29 @@ gssdp_client_class_init (GSSDPClientClass *klass)
                          G_PARAM_STATIC_STRINGS));
 
         /**
+         * GSSDPClient:no-request-socket:
+         *
+         * Disable unicast request socket on UDP port 1900.
+         * This is useful when two instances of gssdp client are running at the same,
+         * where one instance could "steal" packets heading to port 1900.
+         * Use this flag only when the owner of gssdp client DOES NOT call
+         * _gssdp_client_send_message () with message type _GSSDP_DISCOVERY_RESPONSE
+         * (i.e. when only gssdp-resource-browser is used)
+         * This property can be only set during object construction.
+         */
+        g_object_class_install_property
+                (object_class,
+                 PROP_NO_REQUEST_SOCKET,
+                 g_param_spec_boolean
+                        ("no-request-socket",
+                         "Disable request socket",
+                         "Flag to disable unicast request socket at port 1900",
+		                 FALSE,
+                         G_PARAM_READWRITE |
+                         G_PARAM_CONSTRUCT_ONLY |
+                         G_PARAM_STATIC_STRINGS));
+
+        /**
          * GSSDPClient::message-received: (skip)
          * @client: The #GSSDPClient that received the message.
          * @from_ip: The IP address of the source.
@@ -1070,12 +1105,19 @@ _gssdp_client_send_message (GSSDPClient      *client,
         if (dest_port == 0)
                 dest_port = SSDP_PORT;
 
-        if (type == _GSSDP_DISCOVERY_REQUEST)
+        if (type == _GSSDP_DISCOVERY_REQUEST) {
                 socket = gssdp_socket_source_get_socket
                                         (client->priv->search_socket);
-        else
+        } else {
+                if (!client->priv->request_socket) {
+					g_warning ("Error sending SSDP packet to %s: request socket was explicitly disabled",
+                           dest_ip);
+					return;
+                }
+
                 socket = gssdp_socket_source_get_socket
-                                        (client->priv->request_socket);
+		                        (client->priv->request_socket);
+        }
 
         inet_address = g_inet_address_new_from_string (dest_ip);
         address = g_inet_socket_address_new (inet_address, dest_port);
-- 
2.7.4

