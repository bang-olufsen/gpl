From b33d169a417cb8c74fc1836ab352f5f2bf13556a Mon Sep 17 00:00:00 2001
From: Matus Ujhelyi <matus.ujhelyi@streamunlimited.com>
Date: Thu, 28 Feb 2013 16:15:42 +0100
Subject: [PATCH] stream800: add factory-test-board initial support

Signed-off-by: Matus Ujhelyi <matus.ujhelyi@streamunlimited.com>
---
 board/streamunlimited/stream800/Makefile           |  2 +-
 .../stream800/board-sue_factory_test_board.c       | 85 ++++++++++++++++++++++
 .../stream800/board-sue_factory_test_board.h       | 37 ++++++++++
 board/streamunlimited/stream800/board.c            | 14 ++++
 board/streamunlimited/stream800/mux.c              | 19 +++++
 5 files changed, 156 insertions(+), 1 deletion(-)
 create mode 100644 board/streamunlimited/stream800/board-sue_factory_test_board.c
 create mode 100644 board/streamunlimited/stream800/board-sue_factory_test_board.h

diff --git a/board/streamunlimited/stream800/Makefile b/board/streamunlimited/stream800/Makefile
index ec3835c..5fdfc55 100644
--- a/board/streamunlimited/stream800/Makefile
+++ b/board/streamunlimited/stream800/Makefile
@@ -21,7 +21,7 @@ LIB	= $(obj)lib$(BOARD).o
 ifdef CONFIG_SPL_BUILD
 COBJS	:= board-spl.o mux.o
 else
-COBJS	:= board.o mux.o adc.o board-sue_demo_client_board.o board-lan_dock_board.o board-sue_first_carrier_board.o fwupdate.o sfu_parser.o
+COBJS	:= board.o mux.o adc.o board-sue_demo_client_board.o board-lan_dock_board.o board-sue_first_carrier_board.o board-sue_factory_test_board.o fwupdate.o sfu_parser.o
 endif
 
 SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
diff --git a/board/streamunlimited/stream800/board-sue_factory_test_board.c b/board/streamunlimited/stream800/board-sue_factory_test_board.c
new file mode 100644
index 0000000..bf63e87
--- /dev/null
+++ b/board/streamunlimited/stream800/board-sue_factory_test_board.c
@@ -0,0 +1,85 @@
+/*
+ * board-sue_factory_test_board.c
+ *
+ * Copyright (C) 2012, StreamUnlimited Engineering GmbH, http://www.streamunlimited.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR /PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include "board-sue_factory_test_board.h"
+
+/*
+ * "SUE Carrier Board" - board specific initialization
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/hardware.h>
+#include <phy.h>
+#include <asm/arch-am33xx/phy.h>
+
+static struct ctrl_dev *cdev = (struct ctrl_dev *)CTRL_DEVICE_BASE;
+
+// "SUE Factory Test Board" board initialization
+void factory_test__init(const struct Stream800Board *board)
+{
+	if (!board || board->carrierBoardType != CBT_SueFactoryTestBoard)
+		BUG();
+
+	printf("TODO: 'SUE Factory Test' board initialization.\n");
+}
+
+// "SUE Factory Test" board late initialization
+void factory_test__late_init(const struct Stream800Board *board)
+{
+	if (!board || board->carrierBoardType != CBT_SueFactoryTestBoard)
+		BUG();
+
+	printf("TODO: 'SUE Factory Test' board late initialization.\n");
+}
+
+#ifdef CONFIG_DRIVER_TI_CPSW
+static struct cpsw_slave_data cpsw_slaves[] = {
+	// TODO: check this configuration for the SUE Carrier Board board
+	{
+		.slave_reg_ofs	= 0x208,
+		.sliver_reg_ofs	= 0xd80,	// CPSW_SL1
+		.phy_id			= 4,
+		.phy_if			= PHY_INTERFACE_MODE_RMII
+	},
+	{
+		.slave_reg_ofs	= 0x308,
+		.sliver_reg_ofs	= 0xdc0,	// CPSW_SL2
+		.phy_id			= 0,
+		.phy_if			= PHY_INTERFACE_MODE_RGMII
+	}
+};
+
+void factory_test__cpsw_eth_init(const struct Stream800Board *board, struct cpsw_platform_data *cpsw_data)
+{
+	if (!board || board->carrierBoardType != CBT_SueFactoryTestBoard)
+		BUG();
+
+	cpsw_data->slaves = 2;
+	cpsw_data->slave_data = cpsw_slaves;
+
+	// Advisory 1.0.10
+	// "The AM335x device does not support internal delay mode, so RGMII1_IDMODE and RGMII2_IDMODE must be set to 1b."
+	writel(RMII1_MODE_ENABLE | MII1_CLK_FROM_CHIP_PIN | RGMII1_NO_INTERNAL_DELAY
+		| RGMII2_MODE_ENABLE | RGMII2_NO_INTERNAL_DELAY , &cdev->miisel);
+}
+#endif /* CONFIG_DRIVER_TI_CPSW */
+
+void factory_test__on_board_state_changed(const struct Stream800Board *board, BoardState state)
+{
+	printf("TODO: Board state changed to '%s'\n", boardStateStrings[state]);
+}
diff --git a/board/streamunlimited/stream800/board-sue_factory_test_board.h b/board/streamunlimited/stream800/board-sue_factory_test_board.h
new file mode 100644
index 0000000..d5290f2
--- /dev/null
+++ b/board/streamunlimited/stream800/board-sue_factory_test_board.h
@@ -0,0 +1,37 @@
+/*
+ * board-sue_factory_test_board.h
+ *
+ * Copyright (C) 2012, StreamUnlimited Engineering GmbH, http://www.streamunlimited.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR /PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __BOARD_SUE_FACTORY_TEST_BOARD_H
+#define __BOARD_SUE_FACTORY_TEST_BOARD_H
+
+#include <common.h>
+#include "board.h"
+#include <cpsw.h>
+
+// "SUE Factory Test Board" board initialization
+void factory_test__init(const struct Stream800Board *board);
+
+// "SUE Factory Test Board" board late initialization
+void factory_test__late_init(const struct Stream800Board *board);
+
+#ifdef CONFIG_DRIVER_TI_CPSW
+void factory_test__cpsw_eth_init(const struct Stream800Board *board, struct cpsw_platform_data *cpsw_data);
+#endif
+
+/* Handling board state change (LED indication, ...) */
+void factory_test__on_board_state_changed(const struct Stream800Board *board, BoardState state);
+
+#endif	// __BOARD_SUE_FACTORY_TEST_BOARD_H
diff --git a/board/streamunlimited/stream800/board.c b/board/streamunlimited/stream800/board.c
index d2caa7e..9ac8efe 100644
--- a/board/streamunlimited/stream800/board.c
+++ b/board/streamunlimited/stream800/board.c
@@ -40,6 +40,7 @@
 #include "board-lan_dock_board.h"
 #include "board-sue_demo_client_board.h"
 #include "board-sue_first_carrier_board.h"
+#include "board-sue_factory_test_board.h"
 #include "adc.h"
 #include "fwupdate.h"
 #include "si5351x.h"
@@ -136,6 +137,9 @@ int board_init(void)
 		case CBT_SueFirstCarrierBoard:
 			first_carrier__init(&board);
 			break;
+		case CBT_SueFactoryTestBoard:
+			factory_test__init(&board);
+			break;
 		default:
 			printf("board_late_init: Not supported board!\n");
 			//panic("Not supported board!");
@@ -186,6 +190,7 @@ static struct SupportedCarrierBoards {
 } supportedCarrierBoards[] = {
 	{CBT_SueDemoClientBoard,	0xF76,	0xFFF,	0x000,	0x088}
 	,{CBT_LanDockBoard,			0x7FF,	0x910,	0x7FF,	0x910}
+	,{CBT_SueFactoryTestBoard,	0x000,	0x088,	0x000,	0x088}
 	// TODO: add another boards here
 };
 
@@ -351,6 +356,9 @@ int board_late_init(void)
 		case CBT_SueFirstCarrierBoard:
 			first_carrier__late_init(&board);
 			break;
+		case CBT_SueFactoryTestBoard:
+			factory_test__late_init(&board);
+			break;
 		default:
 			printf("board_late_init: Not supported board!\n");
 			//panic("Not supported board!");
@@ -440,6 +448,9 @@ int board_eth_init(bd_t *bis)
 		case CBT_SueFirstCarrierBoard:
 			first_carrier__cpsw_eth_init(&board, &cpsw_data);
 			break;
+		case CBT_SueFactoryTestBoard:
+			factory_test__cpsw_eth_init(&board, &cpsw_data);
+			break;
 		default:
 			printf("board_eth_init: Not supported board!\n");
 			//panic("Not supported board!");
@@ -509,6 +520,9 @@ void on_board_state_changed(BoardState state)
 	case CBT_SueFirstCarrierBoard:
 		first_carrier__on_board_state_changed(&board, state);
 		break;
+	case CBT_SueFactoryTestBoard:
+		factory_test__on_board_state_changed(&board, state);
+		break;
 	default:
 		printf("on_board_state_changed: Not supported board!\n");
 		//panic("Not supported board!");
diff --git a/board/streamunlimited/stream800/mux.c b/board/streamunlimited/stream800/mux.c
index cb2fdea..c034ac9 100644
--- a/board/streamunlimited/stream800/mux.c
+++ b/board/streamunlimited/stream800/mux.c
@@ -92,6 +92,7 @@ static struct module_pin_mux mmc0_pin_mux_sk_evm[] = {
 };
 
 static struct module_pin_mux mmc1_pin_mux[] = {
+#if 0
 	{OFFSET(gpmc_ad3), (MODE(1) | RXACTIVE | PULLUP_EN)},	/* MMC1_DAT3 */
 	{OFFSET(gpmc_ad2), (MODE(1) | RXACTIVE | PULLUP_EN)},	/* MMC1_DAT2 */
 	{OFFSET(gpmc_ad1), (MODE(1) | RXACTIVE | PULLUP_EN)},	/* MMC1_DAT1 */
@@ -100,6 +101,16 @@ static struct module_pin_mux mmc1_pin_mux[] = {
 	{OFFSET(gpmc_csn2), (MODE(2) | RXACTIVE | PULLUP_EN)},	/* MMC1_CMD */
 	{OFFSET(gpmc_csn0), (MODE(7) | RXACTIVE | PULLUP_EN)},	/* MMC1_WP */
 	{OFFSET(gpmc_advn_ale), (MODE(7) | RXACTIVE | PULLUP_EN)},	/* MMC1_CD */
+#endif
+
+	{OFFSET(gpmc_ad8),  (MODE(2) | RXACTIVE | PULLUP_EN)},
+	{OFFSET(gpmc_ad9),  (MODE(2) | RXACTIVE | PULLUP_EN)},
+	{OFFSET(gpmc_ad10), (MODE(2) | RXACTIVE | PULLUP_EN)},
+	{OFFSET(gpmc_ad11), (MODE(2) | RXACTIVE | PULLUP_EN)},
+	{OFFSET(gpmc_csn1), (MODE(2) | RXACTIVE | PULLUP_EN)},
+	{OFFSET(gpmc_csn2), (MODE(2) | RXACTIVE | PULLUP_EN)},
+	{OFFSET(gpmc_ad12), (MODE(7) | RXACTIVE | PULLUP_EN)},
+	{OFFSET(gpmc_ad13), (MODE(7) | RXACTIVE | PULLUP_EN)},
 	{-1},
 };
 
@@ -271,6 +282,14 @@ void enable_board_pin_mux(struct Stream800Board *board)
 			configure_module_pin_mux(rmii1_pin_mux);
 			configure_module_pin_mux(rgmii2_pin_mux);
 #endif
+			configure_module_pin_mux(mmc1_pin_mux);
+			break;
+		case CBT_SueFactoryTestBoard:
+#ifndef CONFIG_NO_ETH
+			configure_module_pin_mux(rmii1_pin_mux);
+			configure_module_pin_mux(rgmii2_pin_mux);
+#endif
+			configure_module_pin_mux(mmc1_pin_mux);
 			break;
 		default:
 			printf("enable_board_pin_mux: Not supported board!\n");
-- 
2.7.4

