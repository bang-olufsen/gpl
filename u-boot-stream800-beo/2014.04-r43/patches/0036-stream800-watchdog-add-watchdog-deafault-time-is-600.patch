From f0427d7244b36432d9eb6b1f5966252693556204 Mon Sep 17 00:00:00 2001
From: Matus Ujhelyi <matus.ujhelyi@streamunlimited.com>
Date: Fri, 19 Apr 2013 10:40:01 +0200
Subject: [PATCH] stream800-watchdog: add watchdog, deafault time is 600s in
 env and 300s in config

Signed-off-by: Matus Ujhelyi <matus.ujhelyi@streamunlimited.com>
---
 board/streamunlimited/stream800/Makefile   |   2 +-
 board/streamunlimited/stream800/board.c    |   9 ++
 board/streamunlimited/stream800/omap_wdt.c | 155 +++++++++++++++++++++++++++++
 board/streamunlimited/stream800/omap_wdt.h |  45 +++++++++
 include/configs/stream800.h                |   3 +
 5 files changed, 213 insertions(+), 1 deletion(-)
 create mode 100644 board/streamunlimited/stream800/omap_wdt.c
 create mode 100644 board/streamunlimited/stream800/omap_wdt.h

diff --git a/board/streamunlimited/stream800/Makefile b/board/streamunlimited/stream800/Makefile
index 5fdfc55..97d5fac 100644
--- a/board/streamunlimited/stream800/Makefile
+++ b/board/streamunlimited/stream800/Makefile
@@ -21,7 +21,7 @@ LIB	= $(obj)lib$(BOARD).o
 ifdef CONFIG_SPL_BUILD
 COBJS	:= board-spl.o mux.o
 else
-COBJS	:= board.o mux.o adc.o board-sue_demo_client_board.o board-lan_dock_board.o board-sue_first_carrier_board.o board-sue_factory_test_board.o fwupdate.o sfu_parser.o
+COBJS	:= board.o mux.o adc.o board-sue_demo_client_board.o board-lan_dock_board.o board-sue_first_carrier_board.o board-sue_factory_test_board.o fwupdate.o sfu_parser.o omap_wdt.o
 endif
 
 SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
diff --git a/board/streamunlimited/stream800/board.c b/board/streamunlimited/stream800/board.c
index eb8a9a7..e4040fc 100644
--- a/board/streamunlimited/stream800/board.c
+++ b/board/streamunlimited/stream800/board.c
@@ -54,6 +54,10 @@
 #warning Using default value for u-boot version: "00000000.00000000.00000000.00000000"
 #endif // STREAM_UBOOT_VERSION
 
+#if defined(CONFIG_WATCHDOG_STREAM800)
+extern void watchdog_start(void);
+#endif
+
 #define DB_PART_NAME            "settings"
 #define DB_PART_VID_HDR_OFFSET  "2048"
 #define DB_VOLUME_NAME          "stream800-settings"
@@ -390,6 +394,11 @@ int board_late_init(void)
 	/* TODO Check on gpio to go to factory defaults*/
 	/* factory_reset(); */
 
+#if defined(CONFIG_WATCHDOG_STREAM800)
+    // Start the watchdog
+    watchdog_start();
+#endif
+
 	return 0;
 }
 #endif
diff --git a/board/streamunlimited/stream800/omap_wdt.c b/board/streamunlimited/stream800/omap_wdt.c
new file mode 100644
index 0000000..ea83088
--- /dev/null
+++ b/board/streamunlimited/stream800/omap_wdt.c
@@ -0,0 +1,155 @@
+/*
+ * [origin: Linux kernel drivers/watchdog/omap_wdt.c]
+ *
+ * Watchdog driver for the TI OMAP 16xx & 24xx/34xx 32KHz (non-secure) watchdog
+ *
+ * Author: MontaVista Software, Inc.
+ *	 <gdavis@mvista.com> or <source@mvista.com>
+ *
+ * 2003 (c) MontaVista Software, Inc. This file is licensed under the
+ * terms of the GNU General Public License version 2. This program is
+ * licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ *
+ * History:
+ *
+ * 20030527: George G. Davis <gdavis@mvista.com>
+ *	Initially based on linux-2.4.19-rmk7-pxa1/drivers/char/sa1100_wdt.c
+ *	(c) Copyright 2000 Oleg Drokin <green@crimea.edu>
+ *	Based on SoftDog driver by Alan Cox <alan@lxorguk.ukuu.org.uk>
+ *
+ * Copyright (c) 2004 Texas Instruments.
+ *	1. Modified to support OMAP1610 32-KHz watchdog timer
+ *	2. Ported to 2.6 kernel
+ *
+ * Copyright (c) 2005 David Brownell
+ *	Use the driver model and standard identifiers; handle bigger timeouts.
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <asm/arch/cpu.h>
+#include "omap_wdt.h"
+#include <watchdog.h>
+#include "board.h"
+
+#ifndef CONFIG_STREAM800_WDT_TIMEOUT
+#error CONFIG_STREAM800_WDT_TIMEOUT must be specified when watchdog is enabled
+#endif
+ 
+/*
+ * OMAP watchdog runs a 32-bit counter @ 32kHz,
+ * upward counting and triggers warm reset when
+ * counter reaches max value (0xFFFFFFFF)
+ */
+static unsigned long timer_margin = 0;
+static unsigned int wdt_trgr_pattern = 0x1234;
+
+static struct wd_timer *wdtimer = (struct wd_timer *)WDT_BASE;
+
+/******************************************************
+ * Routine: wait_for_command_complete
+ * Description: Wait for posting to finish on watchdog
+ ******************************************************/
+static void wait_for_command_complete(void)
+{
+	volatile int pending = 1;
+
+	while (pending) {
+	    pending = readl(&wdtimer->wdtwwps);
+    }
+}
+
+static void omap_wdt_ping(void)
+{
+	/* wait for posted write to complete */
+    wait_for_command_complete();
+
+	wdt_trgr_pattern = ~wdt_trgr_pattern;
+	writel(wdt_trgr_pattern, (&wdtimer->wdtwtgr));
+
+	/* wait for posted write to complete */
+    wait_for_command_complete();
+	/* reloaded WCRR from WLDR */
+}
+
+static void omap_wdt_enable(void)
+{
+	/* Sequence to enable the watchdog */
+	writel(0xBBBB, &wdtimer->wdtwspr);
+    wait_for_command_complete();
+
+	writel(0x4444, &wdtimer->wdtwspr);
+    wait_for_command_complete();
+
+    printf("Watchdog enabled...\n");
+}
+
+static void omap_wdt_disable(void)
+{
+	/* sequence required to disable watchdog */
+	writel(0xAAAA, &wdtimer->wdtwspr);	/* TIMER_MODE */
+    wait_for_command_complete();
+
+	writel(0x5555, &wdtimer->wdtwspr);	/* TIMER_MODE */
+    wait_for_command_complete();
+
+    printf("Watchdog disabled...\n");
+}
+
+static void omap_wdt_adjust_timeout(unsigned long new_timeout)
+{
+	if (new_timeout < TIMER_MARGIN_MIN)
+		new_timeout = TIMER_MARGIN_DEFAULT;
+	if (new_timeout > TIMER_MARGIN_MAX)
+		new_timeout = TIMER_MARGIN_MAX;
+	timer_margin = new_timeout;
+}
+
+static void omap_wdt_set_timeout(void)
+{
+	u32 pre_margin = GET_WLDR_VAL(timer_margin);
+
+	/* just count up at 32 KHz */
+    wait_for_command_complete();
+
+	writel(pre_margin, &wdtimer->wdtwldr);
+    wait_for_command_complete();
+}
+
+void watchdog_reset(void)
+{
+    omap_wdt_ping();
+}
+
+void watchdog_start(void)
+{
+    char* wdt_timeout_str;
+    unsigned long wdt_timeout;
+    
+    /* get watchdog timeout from environment */
+    wdt_timeout_str = getenv("wdt_timeout");
+    if (NULL != wdt_timeout_str) {
+        wdt_timeout = simple_strtoul(wdt_timeout_str, NULL, 10);
+        printf("Using env watchdog timeout (wdt_timeout): %lu seconds\n",
+               wdt_timeout);
+    } else {
+        // use default timeout
+        wdt_timeout = CONFIG_STREAM800_WDT_TIMEOUT;
+        printf("Using default watchdog timeout: %lu seconds\n",
+               wdt_timeout);
+        printf("Specify watchdog timeout via env \"wdt_timeout\" variable\n");
+    }
+    omap_wdt_adjust_timeout(wdt_timeout);
+    
+	/* initialize prescaler */
+    wait_for_command_complete();
+
+	writel((1 << 5) | (PTV << 2), &wdtimer->wdtwclr);
+    wait_for_command_complete();
+
+	omap_wdt_set_timeout();
+	omap_wdt_ping(); /* trigger loading of new timeout value */
+	omap_wdt_enable();
+}
+
diff --git a/board/streamunlimited/stream800/omap_wdt.h b/board/streamunlimited/stream800/omap_wdt.h
new file mode 100644
index 0000000..bb5345d
--- /dev/null
+++ b/board/streamunlimited/stream800/omap_wdt.h
@@ -0,0 +1,45 @@
+/*
+ *  [origin: linux/drivers/char/watchdog/omap_wdt.h]
+ *
+ *  BRIEF MODULE DESCRIPTION
+ *      OMAP Watchdog timer register definitions
+ *
+ *  Copyright (C) 2004 Texas Instruments.
+ *
+ *  This program is free software; you can redistribute  it and/or modify it
+ *  under  the terms of  the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the  License, or (at your
+ *  option) any later version.
+ *
+ *  THIS  SOFTWARE  IS PROVIDED   ``AS  IS'' AND   ANY  EXPRESS OR IMPLIED
+ *  WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF
+ *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
+ *  NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ *  NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF
+ *  USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ *  ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT
+ *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  You should have received a copy of the  GNU General Public License along
+ *  with this program; if not, write  to the Free Software Foundation, Inc.,
+ *  675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#ifndef _OMAP_WATCHDOG_H
+#define _OMAP_WATCHDOG_H
+
+/* Using the prescaler, the OMAP watchdog could go for many
+ * months before firing.  These limits work without scaling,
+ * with the 60 second default assumed by most tools and docs.
+ */
+#define TIMER_MARGIN_MAX    	(24 * 60 * 60)	/* 1 day */
+#define TIMER_MARGIN_DEFAULT	60	/* 60 secs */
+#define TIMER_MARGIN_MIN	1
+
+#define PTV			0	/* prescale */
+#define GET_WLDR_VAL(secs)	(0xffffffff - ((secs) * (32768/(1<<PTV))) + 1)
+
+#endif				/* _OMAP_WATCHDOG_H */
+
diff --git a/include/configs/stream800.h b/include/configs/stream800.h
index f575376..57f7598 100644
--- a/include/configs/stream800.h
+++ b/include/configs/stream800.h
@@ -1158,6 +1158,9 @@
 
 #define CONFIG_CONST_ECC_AUTOCORRECT
 
+#define CONFIG_WATCHDOG_STREAM800
+#define CONFIG_STREAM800_WDT_TIMEOUT  (300)
+
 #define CONFIG_HUSH_INIT_VAR
 #define CONFIG_MD5
 #define CONFIG_SHA256
-- 
2.7.4

