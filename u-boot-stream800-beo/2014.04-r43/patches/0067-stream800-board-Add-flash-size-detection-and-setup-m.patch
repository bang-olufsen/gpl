From ddf5e2f87dfa7fe6bdbfdf6cca2e1d7465047b7d Mon Sep 17 00:00:00 2001
From: Marek Belisko <marek.belisko@streamunlimited.com>
Date: Tue, 10 Dec 2013 13:39:58 +0100
Subject: [PATCH] stream800: board: Add flash size detection and setup
 mtdparts.

Signed-off-by: Marek Belisko <marek.belisko@streamunlimited.com>
---
 board/streamunlimited/stream800/board.c      | 82 ++++++++++++++++++++++++++++
 board/streamunlimited/stream800/partitions.h | 64 ++++++++++++++++++++++
 include/configs/stream800.h                  | 58 +++-----------------
 3 files changed, 155 insertions(+), 49 deletions(-)
 create mode 100644 board/streamunlimited/stream800/partitions.h

diff --git a/board/streamunlimited/stream800/board.c b/board/streamunlimited/stream800/board.c
index fab18ed..9ee1f94 100755
--- a/board/streamunlimited/stream800/board.c
+++ b/board/streamunlimited/stream800/board.c
@@ -43,6 +43,8 @@
 #include "adc.h"
 #include "fwupdate.h"
 #include "si5351x.h"
+#include "partitions.h"
+#include <linux/err.h>
 
 #ifdef CONFIG_SPL_BUILD
 #error This file should not be built for SPL
@@ -348,6 +350,81 @@ static void factory_reset(void) {
 	udelay(2000000);
 }
 
+static int create_mtd_part(char *buf, struct partition part)
+{
+	return sprintf(buf, "%dk(%s)", (part.size / 1024), part.name);
+}
+
+/*
+ * Detect flash size and setup mtdparts variable
+ * accordingly from defined partition table
+ */
+static int detect_flash()
+{
+	struct mtd_info *mtd = get_mtd_device_nm("nand0");
+	enum s800_flash_size size = FLASH_SIZE_UNKNOWN;
+	int ret = 0;
+
+	if (IS_ERR(mtd)) {
+		printf("Device %s not found!\n", "nand0");
+		return -ENODEV;
+	}
+
+	if (mtd->size == 0x10000000) {
+		/* 256MB flash */
+		size = FLASH_SIZE_256M;
+	} else if (mtd->size == 0x20000000) {
+		/* 512MB flash */
+		size = FLASH_SIZE_512M;
+	}
+
+	if (size != FLASH_SIZE_UNKNOWN) {
+		printf("Setting partitions for %sMB flash.\n", size == FLASH_SIZE_256M ? "256" : "512");
+
+		struct partition *s800_parts;
+		int part_size;
+
+		if (size == FLASH_SIZE_256M) {
+			s800_parts = s800_part_256M;
+			part_size = ARRAY_SIZE(s800_part_256M);
+		} else if (size == FLASH_SIZE_512M) {
+			s800_parts = s800_part_512M;
+			part_size = ARRAY_SIZE(s800_part_512M);
+		}
+
+		/* prepare buffer for mtdparts env*/
+		const char *mtdparts_prefix = "mtdparts=omap2-nand.0:";
+		char *mtdparts = malloc(strlen(mtdparts_prefix) + (part_size * 30));
+		int j = strlen(mtdparts_prefix);
+		int i;
+
+		strcpy(mtdparts, mtdparts_prefix);
+
+		for (i = 0; i < part_size; i++) {
+			char buf[30];
+			create_mtd_part(buf, s800_parts[i]);
+			if (i != (part_size - 1)) {
+				int len = strlen(buf);
+				buf[len] = ',';
+				buf[len + 1] = '\0';
+			}
+
+			strncpy(&mtdparts[j], buf, strlen(buf));
+			j += strlen(buf);
+		}
+
+		mtdparts[j] = '\0';
+		printf("Setting mtdparts: %s\n", mtdparts);
+
+		setenv("mtdparts", mtdparts);
+	} else {
+		printf("Unknown flash size!!!!\n");
+		ret = -ENODEV;
+	}
+
+	return ret;
+}
+
 #ifdef CONFIG_BOARD_LATE_INIT
 int board_late_init(void)
 {
@@ -408,6 +485,9 @@ int board_late_init(void)
     watchdog_start();
 #endif
 
+	/* detect flash size and setup mtdparts variable */
+	detect_flash();
+
 	return 0;
 }
 #endif
@@ -556,6 +636,8 @@ static int do_bstate(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
 
 	if (argc == 1) {
 		printf("Current board state: '%s'\n", boardStateStrings[get_board_state()]);
+
+
 		return 0;
 	}
 
diff --git a/board/streamunlimited/stream800/partitions.h b/board/streamunlimited/stream800/partitions.h
new file mode 100644
index 0000000..ce4a11b
--- /dev/null
+++ b/board/streamunlimited/stream800/partitions.h
@@ -0,0 +1,64 @@
+#ifndef _PARTITIONS_H
+#define _PARTITIONS_H
+
+/* For 256MiB flash  */
+
+struct partition {
+	u32 base;
+	u32 size;
+	const char *name;
+};
+
+enum s800_flash_size {
+	FLASH_SIZE_256M = 0,
+	FLASH_SIZE_512M,
+	FLASH_SIZE_UNKNOWN,
+};
+
+struct partition s800_part_256M[] = {
+	[0] = { 0x00000000, 0x00020000, "mlo" },
+	[1] = { 0x00020000, 0x00020000, "mlo2" },
+	[2] = { 0x00040000, 0x00020000, "mlo3" },
+	[3] = { 0x00060000, 0x00020000, "mlo4" },
+	[4] = { 0x00080000, 0x00200000, "u-boot" },
+	/*
+	 * when update env size or base update also CONFIG_ENV_RANGE and
+	 * CONFIG_UBOOTENV_BASE in stream800.h
+	 */
+	[5] = { 0x00280000, 0x00080000, "u-boot-env" },
+	/*
+	 * when update constants size or base  update also CONFIG_CONSTANTS_RANGE
+	 * and CONFIG_CONSTANTS_BASE  in stream800.h
+	 */
+	[6] = { 0x00300000, 0x00080000, "constants" },
+	[7] = { 0x00380000, 0x00800000, "settings" },
+	[8] = { 0x00B80000, 0x00600000, "kernel" },
+	[9] = { 0x01180000, 0x00200000, "dts" },
+	[10] = { 0x01380000, 0x07300000, "rootfs" },
+	[11] = { 0x08680000, 0x07980000, "download" }
+};
+
+struct partition s800_part_512M[] = {
+	[0] = { 0x00000000, 0x00020000, "mlo" },
+	[1] = { 0x00020000, 0x00020000, "mlo2" },
+	[2] = { 0x00040000, 0x00020000, "mlo3" },
+	[3] = { 0x00060000, 0x00020000, "mlo4" },
+	[4] = { 0x00080000, 0x00200000, "u-boot" },
+	/*
+	 * when update env size and or update also CONFIG_ENV_RANGE and
+	 * CONFIG_UBOOTENV_BASE in stream800.h
+	 */
+	[5] = { 0x00280000, 0x00080000, "u-boot-env" },
+	/*
+	 * when update constants size or base  update also CONFIG_CONSTANTS_RANGE
+	 * and CONFIG_CONSTANTS_BASE  in stream800.h
+	 */
+	[6] = { 0x00300000, 0x00080000, "constants" },
+	[7] = { 0x00380000, 0x00800000, "settings" },
+	[8] = { 0x00B80000, 0x00600000, "kernel" },
+	[9] = { 0x01180000, 0x00200000, "dts" },
+	[10] = { 0x01380000, 0x17300000, "rootfs" },
+	[11] = { 0x18680000, 0x07980000, "download" }
+};
+
+#endif /* _PARTITIONS_H */
diff --git a/include/configs/stream800.h b/include/configs/stream800.h
index cca74cb..786cd0d 100644
--- a/include/configs/stream800.h
+++ b/include/configs/stream800.h
@@ -62,19 +62,9 @@
 #define CONFIG_CMD_MTDPARTS
 
 #define MTDIDS_DEFAULT          "nand0=omap2-nand.0"
-#define MTDPARTS_DEFAULT		"mtdparts=omap2-nand.0:" \
-        _str(CONFIG_MLO_SIZE) "(mlo)," \
-        _str(CONFIG_MLO_SIZE) "(mlo2)," \
-        _str(CONFIG_MLO_SIZE) "(mlo3)," \
-        _str(CONFIG_MLO_SIZE) "(mlo4)," \
-        _str(CONFIG_UBOOT_SIZE) "(u-boot)," \
-        _str(CONFIG_UBOOTENV_SIZE) "(u-boot-env)," \
-        _str(CONFIG_CONSTPART_SIZE) "(constants)," \
-        _str(CONFIG_SETTINGS_SIZE) "(settings)," \
-        _str(CONFIG_UIMAGE_SIZE) "(kernel)," \
-        _str(CONFIG_DTS_SIZE) "(dts)," \
-        _str(CONFIG_RFS_SIZE) "(rootfs)," \
-        _str(CONFIG_DOWNLOAD_SIZE) "(download)"
+/* MTDPARTS_DEFAULT are set dynamically based on flash size */
+#define MTDPARTS_DEFAULT		""
+
 #define CONFIG_MTD_PARTITIONS
 #define CONFIG_CMD_UBI
 #define CONFIG_CMD_UBIFS
@@ -99,44 +89,14 @@
 #define _stra(s) #s
 #define _str(s) _stra(s)
 
-#define CONFIG_MLO_BASE     0x00000000
-#define CONFIG_MLO_SIZE     0x00020000
-
-#define CONFIG_MLO_BASE_2     0x00020000
-#define CONFIG_MLO_SIZE_2     0x00020000
-
-#define CONFIG_MLO_BASE_3     0x00040000
-#define CONFIG_MLO_SIZE_3     0x00020000
-
-#define CONFIG_MLO_BASE_4     0x00060000
-#define CONFIG_MLO_SIZE_4     0x00020000
-
-#define CONFIG_UBOOT_BASE       0x00080000
-#define CONFIG_UBOOT_SIZE       0x00200000
-
+/*
+ * Must be same as env and constants size
+ * in board/streamunlimited/stream800/partitions.h
+ */
 #define CONFIG_UBOOTENV_BASE    0x00280000
-#define CONFIG_UBOOTENV_SIZE    0x00080000
-#define CONFIG_ENV_RANGE        CONFIG_UBOOTENV_SIZE
-
+#define CONFIG_ENV_RANGE        0x00080000
 #define CONFIG_CONSTANTS_BASE   0x00300000
-#define CONFIG_CONSTPART_SIZE   0x00080000
-#define CONFIG_CONSTANTS_RANGE  CONFIG_CONSTPART_SIZE
-
-#define CONFIG_SETTINGS_BASE    0x00380000
-#define CONFIG_SETTINGS_SIZE    0x00800000
-
-#define CONFIG_UIMAGE_BASE      0x00B80000
-#define CONFIG_UIMAGE_SIZE      0x00600000
-
-#define CONFIG_DTS_BASE    		0x01180000
-#define CONFIG_DTS_SIZE    		0x00200000
-
-#define CONFIG_RFS_BASE         0x01380000
-#define CONFIG_RFS_SIZE         0x07300000
-
-#define CONFIG_DOWNLOAD_BASE    0x08680000
-#define CONFIG_DOWNLOAD_SIZE    0x07980000
-
+#define CONFIG_CONSTANTS_RANGE  0x00080000
 
 /* set to negative value for no autoboot */
 #define CONFIG_BOOTDELAY		1
-- 
2.7.4

